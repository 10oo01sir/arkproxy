
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy"

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_show.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "sql_cte.h"
#include "sql_window.h"
#include "item_windowfunc.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)                  \
  if (!(A))                                      \
  {                                              \
    my_parse_error(thd, ER_SYNTAX_ERROR);        \
    MYSQL_YYABORT;                               \
  }

#define my_yyabort_error(A)                      \
  do { my_error A; MYSQL_YYABORT; } while(0)

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

static void my_parse_error_intern(THD *thd, const char *err_text,
                                  const char *yytext)
{
  Lex_input_stream *lip= &thd->m_parser_state->m_lip;
  if (!yytext)
  {
    if (!(yytext= lip->get_tok_start()))
      yytext= "";
  }
  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext),
                    thd->variables.character_set_client);
  my_error(ER_PARSE_ERROR, MYF(0), err_text, err.ptr(), lip->yylineno);
}


static void my_parse_error(THD *thd, uint err_number, const char *yytext=0)
{
  return my_parse_error_intern(thd, ER_THD(thd, err_number), yytext);
}

void LEX::parse_error()
{
  my_parse_error(thd, ER_SYNTAX_ERROR);
}


/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER_THD(thd, ER_SYNTAX_ERROR);
  my_parse_error_intern(thd, s, 0);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


static sp_head *make_sp_head(THD *thd, sp_name *name,
                             enum stored_procedure_type type)
{
  LEX *lex= thd->lex;
  sp_head *sp;

  /* Order is important here: new - reset - init */
  if ((sp= new sp_head()))
  {
    sp->reset_thd_mem_root(thd);
    sp->init(lex);
    sp->m_type= type;
    if (name)
      sp->init_sp_name(thd, name);
    sp->m_chistics= &lex->sp_chistics;
    lex->sphead= sp;
  }
  bzero(&lex->sp_chistics, sizeof(lex->sp_chistics));
  return sp;
}

static bool maybe_start_compound_statement(THD *thd)
{
  if (!thd->lex->sphead)
  {
    if (!make_sp_head(thd, NULL, TYPE_ENUM_PROCEDURE))
      return 1;

    Lex->sp_chistics.suid= SP_IS_NOT_SUID;
    Lex->sphead->set_body_start(thd, YYLIP->get_cpp_ptr());
  }
  return 0;
}

static bool push_sp_label(THD *thd, LEX_STRING label)
{
  sp_pcontext *ctx= thd->lex->spcont;
  sp_label *lab= ctx->find_label(label);

  if (lab)
  {
    my_error(ER_SP_LABEL_REDEFINE, MYF(0), label.str);
    return 1;
  }
  else
  {
    lab= thd->lex->spcont->push_label(thd, label,
        thd->lex->sphead->instructions());
    lab->type= sp_label::ITERATION;
  }
  return 0;
}

static bool push_sp_empty_label(THD *thd)
{
  if (maybe_start_compound_statement(thd))
    return 1;
  /* Unlabeled controls get an empty label. */
  thd->lex->spcont->push_label(thd, empty_lex_str,
      thd->lex->sphead->instructions());
  return 0;
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new (lex->thd->mem_root)
    sp_instr_set_case_expr(sp->instructions(), parsing_ctx, case_expr_id, expr,
                           lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;
  THD *thd= lex->thd;

  if (simple)
  {
    var= new (thd->mem_root)
         Item_case_expr(thd, ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new (thd->mem_root) Item_func_eq(thd, var, when);
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i= new (lex->thd->mem_root) sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to after END CASE
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(lex->thd, i, ctx->last_label());
}

static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var != NULL)
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new (thd->mem_root)
         set_var(thd, var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var, thd->mem_root);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null(thd);
    if (it == NULL)
      return TRUE;
  }

  sp_set= new (thd->mem_root)
         sp_instr_set(lex->sphead->instructions(), lex->spcont,
                                   spv->offset, it, spv->sql_type(),
                                   lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new (thd->mem_root) Item_null(thd);

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(thd, lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new (thd->mem_root)
        sp_instr_set_trigger_field(lex->sphead->instructions(),
                                                 lex->spcont, trg_fld, val,
         lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(thd, name, spvar->offset, spvar->sql_type(),
                 pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(thd, left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(thd, left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(thd, left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select
          statement uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
                       is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->order_list.first && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "ORDER BY");
    return TRUE;
  }

  if (lex->current_select->explicit_limit && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "LIMIT");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}


static bool add_create_index_prepare(LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->option_list= NULL;
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    if (no_lookahead)
        lex->sphead->m_tmp_query= lip->get_ptr();
    else
        lex->sphead->m_tmp_query= lip->get_tok_end();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}


static void add_key_to_list(LEX *lex, LEX_STRING *field_name,
                            enum Key::Keytype type, bool check_exists)
{
  Key *key;
  MEM_ROOT *mem_root= lex->thd->mem_root;
  key= new (mem_root)
        Key(type, null_lex_str, HA_KEY_ALG_UNDEF, false,
             DDL_options(check_exists ?
                         DDL_options::OPT_IF_NOT_EXISTS :
                         DDL_options::OPT_NONE));
  key->columns.push_back(new (mem_root) Key_part_spec(*field_name, 0),
                         mem_root);
  lex->alter_info.key_list.push_back(key, mem_root);
}

void LEX::init_last_field(Column_definition *field, const char *field_name,
         CHARSET_INFO *cs)
{
  last_field= field;

  field->field_name= field_name;

  /* reset LEX fields that are used in Create_field::set_and_check() */
  charset= cs;
}

void LEX::set_last_field_type(const Lex_field_type_st &type)
{
  last_field->sql_type= type.field_type();
  last_field->charset= charset;

  if (type.length())
  {
    int err;
    last_field->length= my_strtoll10(type.length(), NULL, &err);
    if (err)
      last_field->length= ~0ULL; // safety
  }
  else
    last_field->length= 0;

  last_field->decimals= type.dec() ? (uint)atoi(type.dec()) : 0;
}

bool LEX::set_bincmp(CHARSET_INFO *cs, bool bin)
{
  /*
     if charset is NULL - we're parsing a field declaration.
     we cannot call find_bin_collation for a field here, because actual
     field charset is determined in get_sql_field_charset() much later.
     so we only set a flag.
  */
  if (!charset)
  {
    charset= cs;
    last_field->flags|= bin ? BINCMP_FLAG : 0;
    return false;
  }

  charset= bin ? find_bin_collation(cs ? cs : charset)
               :                    cs ? cs : charset;
  return charset == NULL;
}

#define bincmp_collation(X,Y)           \
  do                                    \
  {                                     \
     if (Lex->set_bincmp(X,Y))          \
       MYSQL_YYABORT;                   \
  } while(0)

Virtual_column_info *add_virtual_expression(THD *thd, Item *expr)
{
  Virtual_column_info *v= new (thd->mem_root) Virtual_column_info();
  if (!v)
  {
     mem_alloc_error(sizeof(Virtual_column_info));
     return 0;
   }
   v->expr= expr;
   v->utf8= 0;  /* connection charset */
   return v;
}



/* Line 189 of yacc.c  */
#line 985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADMIN_SYM = 262,
     ADDDATE_SYM = 263,
     AFTER_SYM = 264,
     AGAINST = 265,
     AGGREGATE_SYM = 266,
     ALGORITHM_SYM = 267,
     ALL = 268,
     ALTER = 269,
     ALWAYS_SYM = 270,
     ANALYZE_SYM = 271,
     AND_AND_SYM = 272,
     AND_SYM = 273,
     ANY_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     ATOMIC_SYM = 280,
     AUTHORS_SYM = 281,
     AUTOEXTEND_SIZE_SYM = 282,
     AUTO_INC = 283,
     AUTO_SYM = 284,
     AVG_ROW_LENGTH = 285,
     AVG_SYM = 286,
     BACKUP_SYM = 287,
     BEFORE_SYM = 288,
     BEGIN_SYM = 289,
     BETWEEN_SYM = 290,
     BIGINT = 291,
     BINARY = 292,
     BINLOG_SYM = 293,
     BIN_NUM = 294,
     BIT_AND = 295,
     BIT_OR = 296,
     BIT_SYM = 297,
     BIT_XOR = 298,
     BLOB_SYM = 299,
     BLOCK_SYM = 300,
     BOOLEAN_SYM = 301,
     BOOL_SYM = 302,
     BOTH = 303,
     BTREE_SYM = 304,
     BY = 305,
     BYTE_SYM = 306,
     CACHE_SYM = 307,
     CALL_SYM = 308,
     CASCADE = 309,
     CASCADED = 310,
     CASE_SYM = 311,
     CAST_SYM = 312,
     CATALOG_NAME_SYM = 313,
     CHAIN_SYM = 314,
     CHANGE = 315,
     CHANGED = 316,
     CHARSET = 317,
     CHAR_SYM = 318,
     CHECKPOINT_SYM = 319,
     CHECKSUM_SYM = 320,
     CHECK_SYM = 321,
     CIPHER_SYM = 322,
     CLASS_ORIGIN_SYM = 323,
     CLIENT_SYM = 324,
     CLOSE_SYM = 325,
     COALESCE = 326,
     CODE_SYM = 327,
     COLLATE_SYM = 328,
     COLLATION_SYM = 329,
     COLUMNS = 330,
     COLUMN_ADD_SYM = 331,
     COLUMN_CHECK_SYM = 332,
     COLUMN_CREATE_SYM = 333,
     COLUMN_DELETE_SYM = 334,
     COLUMN_GET_SYM = 335,
     COLUMN_SYM = 336,
     COLUMN_NAME_SYM = 337,
     COMMENT_SYM = 338,
     COMMITTED_SYM = 339,
     COMMIT_SYM = 340,
     COMPACT_SYM = 341,
     COMPLETION_SYM = 342,
     COMPRESSED_SYM = 343,
     CONCURRENT = 344,
     CONDITION_SYM = 345,
     CONNECTION_SYM = 346,
     CONSISTENT_SYM = 347,
     CONSTRAINT = 348,
     CONSTRAINT_CATALOG_SYM = 349,
     CONSTRAINT_NAME_SYM = 350,
     CONSTRAINT_SCHEMA_SYM = 351,
     CONTAINS_SYM = 352,
     CONTEXT_SYM = 353,
     CONTINUE_SYM = 354,
     CONTRIBUTORS_SYM = 355,
     CONVERT_SYM = 356,
     COUNT_SYM = 357,
     CPU_SYM = 358,
     CREATE = 359,
     CROSS = 360,
     CUBE_SYM = 361,
     CUME_DIST_SYM = 362,
     CURDATE = 363,
     CURRENT_SYM = 364,
     CURRENT_USER = 365,
     CURRENT_ROLE = 366,
     CURRENT_POS_SYM = 367,
     CURSOR_SYM = 368,
     CURSOR_NAME_SYM = 369,
     CURTIME = 370,
     DATABASE = 371,
     DATABASES = 372,
     DATAFILE_SYM = 373,
     DATA_SYM = 374,
     DATETIME = 375,
     DATE_ADD_INTERVAL = 376,
     DATE_SUB_INTERVAL = 377,
     DATE_SYM = 378,
     DAY_HOUR_SYM = 379,
     DAY_MICROSECOND_SYM = 380,
     DAY_MINUTE_SYM = 381,
     DAY_SECOND_SYM = 382,
     DAY_SYM = 383,
     DEALLOCATE_SYM = 384,
     DECIMAL_NUM = 385,
     DECIMAL_SYM = 386,
     DECLARE_SYM = 387,
     DEFAULT = 388,
     DEFINER_SYM = 389,
     DELAYED_SYM = 390,
     DELAY_KEY_WRITE_SYM = 391,
     DELETE_SYM = 392,
     DENSE_RANK_SYM = 393,
     DESC = 394,
     DESCRIBE = 395,
     DES_KEY_FILE = 396,
     DETERMINISTIC_SYM = 397,
     DIAGNOSTICS_SYM = 398,
     DIRECTORY_SYM = 399,
     DISABLE_SYM = 400,
     DISCARD = 401,
     DISK_SYM = 402,
     DISTINCT = 403,
     DIV_SYM = 404,
     DOUBLE_SYM = 405,
     DO_DOMAIN_IDS_SYM = 406,
     DO_SYM = 407,
     DROP = 408,
     DUAL_SYM = 409,
     DUMPFILE = 410,
     DUPLICATE_SYM = 411,
     DYNAMIC_SYM = 412,
     EACH_SYM = 413,
     ELSE = 414,
     ELSEIF_SYM = 415,
     ENABLE_SYM = 416,
     ENCLOSED = 417,
     END = 418,
     ENDS_SYM = 419,
     END_OF_INPUT = 420,
     ENGINES_SYM = 421,
     ENGINE_SYM = 422,
     ENUM = 423,
     EQUAL_SYM = 424,
     ERROR_SYM = 425,
     ERRORS = 426,
     ESCAPED = 427,
     ESCAPE_SYM = 428,
     EVENTS_SYM = 429,
     EVENT_SYM = 430,
     EVERY_SYM = 431,
     EXCHANGE_SYM = 432,
     EXAMINED_SYM = 433,
     EXCLUDE_SYM = 434,
     EXECUTE_SYM = 435,
     EXISTS = 436,
     EXIT_SYM = 437,
     EXPANSION_SYM = 438,
     EXPORT_SYM = 439,
     EXTENDED_SYM = 440,
     EXTENT_SIZE_SYM = 441,
     EXTRACT_SYM = 442,
     FALSE_SYM = 443,
     FAST_SYM = 444,
     FAULTS_SYM = 445,
     FETCH_SYM = 446,
     FILE_SYM = 447,
     FIRST_VALUE_SYM = 448,
     FIRST_SYM = 449,
     FIXED_SYM = 450,
     FLOAT_NUM = 451,
     FLOAT_SYM = 452,
     FLUSH_SYM = 453,
     FOLLOWS_SYM = 454,
     FOLLOWING_SYM = 455,
     FORCE_SYM = 456,
     FOREIGN = 457,
     FOR_SYM = 458,
     FORMAT_SYM = 459,
     FOUND_SYM = 460,
     FROM = 461,
     FULL = 462,
     FULLTEXT_SYM = 463,
     FUNCTION_SYM = 464,
     GE = 465,
     GENERAL = 466,
     GENERATED_SYM = 467,
     GEOMETRYCOLLECTION = 468,
     GEOMETRY_SYM = 469,
     GET_FORMAT = 470,
     GET_SYM = 471,
     GLOBAL_SYM = 472,
     GRANT = 473,
     GRANTS = 474,
     GROUP_SYM = 475,
     GROUP_CONCAT_SYM = 476,
     LAG_SYM = 477,
     LEAD_SYM = 478,
     HANDLER_SYM = 479,
     HARD_SYM = 480,
     HASH_SYM = 481,
     HAVING = 482,
     HELP_SYM = 483,
     HEX_NUM = 484,
     HEX_STRING = 485,
     HIGH_PRIORITY = 486,
     HOST_SYM = 487,
     HOSTS_SYM = 488,
     HOUR_MICROSECOND_SYM = 489,
     HOUR_MINUTE_SYM = 490,
     HOUR_SECOND_SYM = 491,
     HOUR_SYM = 492,
     ID_SYM = 493,
     IDENT = 494,
     IDENTIFIED_SYM = 495,
     IDENT_QUOTED = 496,
     IF_SYM = 497,
     IGNORE_DOMAIN_IDS_SYM = 498,
     IGNORE_SYM = 499,
     IGNORE_SERVER_IDS_SYM = 500,
     IMMEDIATE_SYM = 501,
     IMPORT = 502,
     INDEXES = 503,
     INDEX_SYM = 504,
     INFILE = 505,
     INITIAL_SIZE_SYM = 506,
     INNER_SYM = 507,
     INOUT_SYM = 508,
     INSENSITIVE_SYM = 509,
     INSERT = 510,
     INSERT_METHOD = 511,
     INSTALL_SYM = 512,
     INTERVAL_SYM = 513,
     INTO = 514,
     INT_SYM = 515,
     INVOKER_SYM = 516,
     IN_SYM = 517,
     IO_SYM = 518,
     IPC_SYM = 519,
     IS = 520,
     ISOLATION = 521,
     ISSUER_SYM = 522,
     ITERATE_SYM = 523,
     JOIN_SYM = 524,
     JSON_SYM = 525,
     KEYS = 526,
     KEY_BLOCK_SIZE = 527,
     KEY_SYM = 528,
     KILL_SYM = 529,
     LANGUAGE_SYM = 530,
     LAST_SYM = 531,
     LAST_VALUE = 532,
     LE = 533,
     LEADING = 534,
     LEAVES = 535,
     LEAVE_SYM = 536,
     LEFT = 537,
     LESS_SYM = 538,
     LEVEL_SYM = 539,
     LEX_HOSTNAME = 540,
     LIKE = 541,
     LIMIT = 542,
     LINEAR_SYM = 543,
     LINES = 544,
     LINESTRING = 545,
     LIST_SYM = 546,
     LOAD = 547,
     LOCAL_SYM = 548,
     LOCATOR_SYM = 549,
     LOCKS_SYM = 550,
     LOCK_SYM = 551,
     LOGFILE_SYM = 552,
     LOGS_SYM = 553,
     LONGBLOB = 554,
     LONGTEXT = 555,
     LONG_NUM = 556,
     LONG_SYM = 557,
     LOOP_SYM = 558,
     LOW_PRIORITY = 559,
     MASTER_CONNECT_RETRY_SYM = 560,
     MASTER_DELAY_SYM = 561,
     MASTER_GTID_POS_SYM = 562,
     MASTER_HOST_SYM = 563,
     MASTER_LOG_FILE_SYM = 564,
     MASTER_LOG_POS_SYM = 565,
     MASTER_PASSWORD_SYM = 566,
     MASTER_PORT_SYM = 567,
     MASTER_SERVER_ID_SYM = 568,
     MASTER_SSL_CAPATH_SYM = 569,
     MASTER_SSL_CA_SYM = 570,
     MASTER_SSL_CERT_SYM = 571,
     MASTER_SSL_CIPHER_SYM = 572,
     MASTER_SSL_CRL_SYM = 573,
     MASTER_SSL_CRLPATH_SYM = 574,
     MASTER_SSL_KEY_SYM = 575,
     MASTER_SSL_SYM = 576,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 577,
     MASTER_SYM = 578,
     MASTER_USER_SYM = 579,
     MASTER_USE_GTID_SYM = 580,
     MASTER_HEARTBEAT_PERIOD_SYM = 581,
     MATCH = 582,
     MAX_CONNECTIONS_PER_HOUR = 583,
     MAX_QUERIES_PER_HOUR = 584,
     MAX_ROWS = 585,
     MAX_SIZE_SYM = 586,
     MAX_SYM = 587,
     MAX_UPDATES_PER_HOUR = 588,
     MAX_STATEMENT_TIME_SYM = 589,
     MAX_USER_CONNECTIONS_SYM = 590,
     MAX_VALUE_SYM = 591,
     MEDIUMBLOB = 592,
     MEDIUMINT = 593,
     MEDIUMTEXT = 594,
     MEDIUM_SYM = 595,
     MEMORY_SYM = 596,
     MERGE_SYM = 597,
     MESSAGE_TEXT_SYM = 598,
     MICROSECOND_SYM = 599,
     MIGRATE_SYM = 600,
     MINUTE_MICROSECOND_SYM = 601,
     MINUTE_SECOND_SYM = 602,
     MINUTE_SYM = 603,
     MIN_ROWS = 604,
     MIN_SYM = 605,
     MODE_SYM = 606,
     MODIFIES_SYM = 607,
     MODIFY_SYM = 608,
     MOD_SYM = 609,
     MONTH_SYM = 610,
     MULTILINESTRING = 611,
     MULTIPOINT = 612,
     MULTIPOLYGON = 613,
     MUTEX_SYM = 614,
     MYSQL_SYM = 615,
     MYSQL_ERRNO_SYM = 616,
     NAMES_SYM = 617,
     NAME_SYM = 618,
     NATIONAL_SYM = 619,
     NATURAL = 620,
     NCHAR_STRING = 621,
     NCHAR_SYM = 622,
     NE = 623,
     NEG = 624,
     NEW_SYM = 625,
     NEXT_SYM = 626,
     NODEGROUP_SYM = 627,
     NONE_SYM = 628,
     NOT2_SYM = 629,
     NOT_SYM = 630,
     NOW_SYM = 631,
     NO_SYM = 632,
     NO_WAIT_SYM = 633,
     NO_WRITE_TO_BINLOG = 634,
     NTILE_SYM = 635,
     NULL_SYM = 636,
     NUM = 637,
     NUMBER_SYM = 638,
     NUMERIC_SYM = 639,
     NTH_VALUE_SYM = 640,
     NVARCHAR_SYM = 641,
     OFFSET_SYM = 642,
     OLD_PASSWORD_SYM = 643,
     ON = 644,
     ONE_SYM = 645,
     ONLY_SYM = 646,
     ONLINE_SYM = 647,
     OPEN_SYM = 648,
     OPTIMIZE = 649,
     OPTIONS_SYM = 650,
     OPTION = 651,
     OPTIONALLY = 652,
     OR2_SYM = 653,
     ORDER_SYM = 654,
     OR_OR_SYM = 655,
     OR_SYM = 656,
     OTHERS_SYM = 657,
     OUTER = 658,
     OUTFILE = 659,
     OUT_SYM = 660,
     OVER_SYM = 661,
     OWNER_SYM = 662,
     PACK_KEYS_SYM = 663,
     PAGE_SYM = 664,
     PAGE_CHECKSUM_SYM = 665,
     PARAM_MARKER = 666,
     PARSER_SYM = 667,
     PARSE_VCOL_EXPR_SYM = 668,
     PARTIAL = 669,
     PARTITION_SYM = 670,
     PARTITIONS_SYM = 671,
     PARTITIONING_SYM = 672,
     PASSWORD_SYM = 673,
     PERCENT_RANK_SYM = 674,
     PERSISTENT_SYM = 675,
     PHASE_SYM = 676,
     PLUGINS_SYM = 677,
     PLUGIN_SYM = 678,
     POINT_SYM = 679,
     POLYGON = 680,
     PORT_SYM = 681,
     POSITION_SYM = 682,
     PRECEDES_SYM = 683,
     PRECEDING_SYM = 684,
     PRECISION = 685,
     PREPARE_SYM = 686,
     PRESERVE_SYM = 687,
     PREV_SYM = 688,
     PRIMARY_SYM = 689,
     PRIVILEGES = 690,
     PROCEDURE_SYM = 691,
     PROCESS = 692,
     PROCESSLIST_SYM = 693,
     PROFILE_SYM = 694,
     PROFILES_SYM = 695,
     PROXY_SYM = 696,
     PURGE = 697,
     QUARTER_SYM = 698,
     QUERY_SYM = 699,
     QUICK = 700,
     RANGE_SYM = 701,
     RANK_SYM = 702,
     READS_SYM = 703,
     READ_ONLY_SYM = 704,
     READ_SYM = 705,
     READ_WRITE_SYM = 706,
     REAL = 707,
     REBUILD_SYM = 708,
     RECOVER_SYM = 709,
     RECURSIVE_SYM = 710,
     REDOFILE_SYM = 711,
     REDO_BUFFER_SIZE_SYM = 712,
     REDUNDANT_SYM = 713,
     REFERENCES = 714,
     REGEXP = 715,
     RELAY = 716,
     RELAYLOG_SYM = 717,
     RELAY_LOG_FILE_SYM = 718,
     RELAY_LOG_POS_SYM = 719,
     RELAY_THREAD = 720,
     RELEASE_SYM = 721,
     RELOAD = 722,
     REMOVE_SYM = 723,
     RENAME = 724,
     REORGANIZE_SYM = 725,
     REPAIR = 726,
     REPEATABLE_SYM = 727,
     REPEAT_SYM = 728,
     REPLACE = 729,
     REPLICATION = 730,
     REQUIRE_SYM = 731,
     RESET_SYM = 732,
     RESIGNAL_SYM = 733,
     RESOURCES = 734,
     RESTORE_SYM = 735,
     RESTRICT = 736,
     RESUME_SYM = 737,
     RETURNED_SQLSTATE_SYM = 738,
     RETURNING_SYM = 739,
     RETURNS_SYM = 740,
     RETURN_SYM = 741,
     REVERSE_SYM = 742,
     REVOKE = 743,
     RIGHT = 744,
     ROLE_SYM = 745,
     ROLLBACK_SYM = 746,
     ROLLUP_SYM = 747,
     ROUTINE_SYM = 748,
     ROW_SYM = 749,
     ROWS_SYM = 750,
     ROW_COUNT_SYM = 751,
     ROW_FORMAT_SYM = 752,
     ROW_NUMBER_SYM = 753,
     RTREE_SYM = 754,
     SAVEPOINT_SYM = 755,
     SCHEDULE_SYM = 756,
     SCHEMA_NAME_SYM = 757,
     SECOND_MICROSECOND_SYM = 758,
     SECOND_SYM = 759,
     SECURITY_SYM = 760,
     SELECT_SYM = 761,
     SENSITIVE_SYM = 762,
     SEPARATOR_SYM = 763,
     SERIALIZABLE_SYM = 764,
     SERIAL_SYM = 765,
     SESSION_SYM = 766,
     SERVER_SYM = 767,
     SERVER_OPTIONS = 768,
     SET = 769,
     SET_VAR = 770,
     SHARE_SYM = 771,
     SHIFT_LEFT = 772,
     SHIFT_RIGHT = 773,
     SHOW = 774,
     SHUTDOWN = 775,
     SIGNAL_SYM = 776,
     SIGNED_SYM = 777,
     SIMPLE_SYM = 778,
     SLAVE = 779,
     SLAVES = 780,
     SLAVE_POS_SYM = 781,
     SLOW = 782,
     SMALLINT = 783,
     SNAPSHOT_SYM = 784,
     SOCKET_SYM = 785,
     SOFT_SYM = 786,
     SONAME_SYM = 787,
     SOUNDS_SYM = 788,
     SOURCE_SYM = 789,
     SPATIAL_SYM = 790,
     SPECIFIC_SYM = 791,
     SQLEXCEPTION_SYM = 792,
     SQLSTATE_SYM = 793,
     SQLWARNING_SYM = 794,
     SQL_BIG_RESULT = 795,
     SQL_BUFFER_RESULT = 796,
     SQL_CACHE_SYM = 797,
     SQL_CALC_FOUND_ROWS = 798,
     SQL_NO_CACHE_SYM = 799,
     SQL_SMALL_RESULT = 800,
     SQL_SYM = 801,
     SQL_THREAD = 802,
     REF_SYSTEM_ID_SYM = 803,
     SSL_SYM = 804,
     STARTING = 805,
     STARTS_SYM = 806,
     START_SYM = 807,
     STATEMENT_SYM = 808,
     STATS_AUTO_RECALC_SYM = 809,
     STATS_PERSISTENT_SYM = 810,
     STATS_SAMPLE_PAGES_SYM = 811,
     STATUS_SYM = 812,
     STDDEV_SAMP_SYM = 813,
     STD_SYM = 814,
     STOP_SYM = 815,
     STORAGE_SYM = 816,
     STORED_SYM = 817,
     STRAIGHT_JOIN = 818,
     STRING_SYM = 819,
     SUBCLASS_ORIGIN_SYM = 820,
     SUBDATE_SYM = 821,
     SUBJECT_SYM = 822,
     SUBPARTITIONS_SYM = 823,
     SUBPARTITION_SYM = 824,
     SUBSTRING = 825,
     SUM_SYM = 826,
     SUPER_SYM = 827,
     SUSPEND_SYM = 828,
     SWAPS_SYM = 829,
     SWITCHES_SYM = 830,
     SYSDATE = 831,
     TABLES = 832,
     TABLESPACE = 833,
     TABLE_REF_PRIORITY = 834,
     TABLE_SYM = 835,
     TABLE_CHECKSUM_SYM = 836,
     TABLE_NAME_SYM = 837,
     TEMPORARY = 838,
     TEMPTABLE_SYM = 839,
     TERMINATED = 840,
     TEXT_STRING = 841,
     TEXT_SYM = 842,
     THAN_SYM = 843,
     THEN_SYM = 844,
     TIES_SYM = 845,
     TIMESTAMP = 846,
     TIMESTAMP_ADD = 847,
     TIMESTAMP_DIFF = 848,
     TIME_SYM = 849,
     TINYBLOB = 850,
     TINYINT = 851,
     TINYTEXT = 852,
     TO_SYM = 853,
     TRAILING = 854,
     TRANSACTION_SYM = 855,
     TRANSACTIONAL_SYM = 856,
     TRIGGERS_SYM = 857,
     TRIGGER_SYM = 858,
     TRIM = 859,
     TRUE_SYM = 860,
     TRUNCATE_SYM = 861,
     TYPES_SYM = 862,
     TYPE_SYM = 863,
     UDF_RETURNS_SYM = 864,
     ULONGLONG_NUM = 865,
     UNBOUNDED_SYM = 866,
     UNCOMMITTED_SYM = 867,
     UNDEFINED_SYM = 868,
     UNDERSCORE_CHARSET = 869,
     UNDOFILE_SYM = 870,
     UNDO_BUFFER_SIZE_SYM = 871,
     UNDO_SYM = 872,
     UNICODE_SYM = 873,
     UNINSTALL_SYM = 874,
     UNION_SYM = 875,
     UNIQUE_SYM = 876,
     UNKNOWN_SYM = 877,
     UNLOCK_SYM = 878,
     UNSIGNED = 879,
     UNTIL_SYM = 880,
     UPDATE_SYM = 881,
     UPGRADE_SYM = 882,
     USAGE = 883,
     USER_SYM = 884,
     USE_FRM = 885,
     USE_SYM = 886,
     USING = 887,
     UTC_DATE_SYM = 888,
     UTC_TIMESTAMP_SYM = 889,
     UTC_TIME_SYM = 890,
     VALUES = 891,
     VALUE_SYM = 892,
     VARBINARY = 893,
     VARCHAR = 894,
     VARIABLES = 895,
     VARIANCE_SYM = 896,
     VARYING = 897,
     VAR_SAMP_SYM = 898,
     VIA_SYM = 899,
     VIEW_SYM = 900,
     VIRTUAL_SYM = 901,
     WAIT_SYM = 902,
     WARNINGS = 903,
     WEEK_SYM = 904,
     WEIGHT_STRING_SYM = 905,
     WHEN_SYM = 906,
     WHERE = 907,
     WINDOW_SYM = 908,
     WHILE_SYM = 909,
     WITH = 910,
     WITH_CUBE_SYM = 911,
     WITH_ROLLUP_SYM = 912,
     WORK_SYM = 913,
     WRAPPER_SYM = 914,
     WRITE_SYM = 915,
     X509_SYM = 916,
     XA_SYM = 917,
     XML_SYM = 918,
     XOR = 919,
     YEAR_MONTH_SYM = 920,
     YEAR_SYM = 921,
     ZEROFILL = 922,
     IMPOSSIBLE_ACTION = 923
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define ATOMIC_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CUME_DIST_SYM 362
#define CURDATE 363
#define CURRENT_SYM 364
#define CURRENT_USER 365
#define CURRENT_ROLE 366
#define CURRENT_POS_SYM 367
#define CURSOR_SYM 368
#define CURSOR_NAME_SYM 369
#define CURTIME 370
#define DATABASE 371
#define DATABASES 372
#define DATAFILE_SYM 373
#define DATA_SYM 374
#define DATETIME 375
#define DATE_ADD_INTERVAL 376
#define DATE_SUB_INTERVAL 377
#define DATE_SYM 378
#define DAY_HOUR_SYM 379
#define DAY_MICROSECOND_SYM 380
#define DAY_MINUTE_SYM 381
#define DAY_SECOND_SYM 382
#define DAY_SYM 383
#define DEALLOCATE_SYM 384
#define DECIMAL_NUM 385
#define DECIMAL_SYM 386
#define DECLARE_SYM 387
#define DEFAULT 388
#define DEFINER_SYM 389
#define DELAYED_SYM 390
#define DELAY_KEY_WRITE_SYM 391
#define DELETE_SYM 392
#define DENSE_RANK_SYM 393
#define DESC 394
#define DESCRIBE 395
#define DES_KEY_FILE 396
#define DETERMINISTIC_SYM 397
#define DIAGNOSTICS_SYM 398
#define DIRECTORY_SYM 399
#define DISABLE_SYM 400
#define DISCARD 401
#define DISK_SYM 402
#define DISTINCT 403
#define DIV_SYM 404
#define DOUBLE_SYM 405
#define DO_DOMAIN_IDS_SYM 406
#define DO_SYM 407
#define DROP 408
#define DUAL_SYM 409
#define DUMPFILE 410
#define DUPLICATE_SYM 411
#define DYNAMIC_SYM 412
#define EACH_SYM 413
#define ELSE 414
#define ELSEIF_SYM 415
#define ENABLE_SYM 416
#define ENCLOSED 417
#define END 418
#define ENDS_SYM 419
#define END_OF_INPUT 420
#define ENGINES_SYM 421
#define ENGINE_SYM 422
#define ENUM 423
#define EQUAL_SYM 424
#define ERROR_SYM 425
#define ERRORS 426
#define ESCAPED 427
#define ESCAPE_SYM 428
#define EVENTS_SYM 429
#define EVENT_SYM 430
#define EVERY_SYM 431
#define EXCHANGE_SYM 432
#define EXAMINED_SYM 433
#define EXCLUDE_SYM 434
#define EXECUTE_SYM 435
#define EXISTS 436
#define EXIT_SYM 437
#define EXPANSION_SYM 438
#define EXPORT_SYM 439
#define EXTENDED_SYM 440
#define EXTENT_SIZE_SYM 441
#define EXTRACT_SYM 442
#define FALSE_SYM 443
#define FAST_SYM 444
#define FAULTS_SYM 445
#define FETCH_SYM 446
#define FILE_SYM 447
#define FIRST_VALUE_SYM 448
#define FIRST_SYM 449
#define FIXED_SYM 450
#define FLOAT_NUM 451
#define FLOAT_SYM 452
#define FLUSH_SYM 453
#define FOLLOWS_SYM 454
#define FOLLOWING_SYM 455
#define FORCE_SYM 456
#define FOREIGN 457
#define FOR_SYM 458
#define FORMAT_SYM 459
#define FOUND_SYM 460
#define FROM 461
#define FULL 462
#define FULLTEXT_SYM 463
#define FUNCTION_SYM 464
#define GE 465
#define GENERAL 466
#define GENERATED_SYM 467
#define GEOMETRYCOLLECTION 468
#define GEOMETRY_SYM 469
#define GET_FORMAT 470
#define GET_SYM 471
#define GLOBAL_SYM 472
#define GRANT 473
#define GRANTS 474
#define GROUP_SYM 475
#define GROUP_CONCAT_SYM 476
#define LAG_SYM 477
#define LEAD_SYM 478
#define HANDLER_SYM 479
#define HARD_SYM 480
#define HASH_SYM 481
#define HAVING 482
#define HELP_SYM 483
#define HEX_NUM 484
#define HEX_STRING 485
#define HIGH_PRIORITY 486
#define HOST_SYM 487
#define HOSTS_SYM 488
#define HOUR_MICROSECOND_SYM 489
#define HOUR_MINUTE_SYM 490
#define HOUR_SECOND_SYM 491
#define HOUR_SYM 492
#define ID_SYM 493
#define IDENT 494
#define IDENTIFIED_SYM 495
#define IDENT_QUOTED 496
#define IF_SYM 497
#define IGNORE_DOMAIN_IDS_SYM 498
#define IGNORE_SYM 499
#define IGNORE_SERVER_IDS_SYM 500
#define IMMEDIATE_SYM 501
#define IMPORT 502
#define INDEXES 503
#define INDEX_SYM 504
#define INFILE 505
#define INITIAL_SIZE_SYM 506
#define INNER_SYM 507
#define INOUT_SYM 508
#define INSENSITIVE_SYM 509
#define INSERT 510
#define INSERT_METHOD 511
#define INSTALL_SYM 512
#define INTERVAL_SYM 513
#define INTO 514
#define INT_SYM 515
#define INVOKER_SYM 516
#define IN_SYM 517
#define IO_SYM 518
#define IPC_SYM 519
#define IS 520
#define ISOLATION 521
#define ISSUER_SYM 522
#define ITERATE_SYM 523
#define JOIN_SYM 524
#define JSON_SYM 525
#define KEYS 526
#define KEY_BLOCK_SIZE 527
#define KEY_SYM 528
#define KILL_SYM 529
#define LANGUAGE_SYM 530
#define LAST_SYM 531
#define LAST_VALUE 532
#define LE 533
#define LEADING 534
#define LEAVES 535
#define LEAVE_SYM 536
#define LEFT 537
#define LESS_SYM 538
#define LEVEL_SYM 539
#define LEX_HOSTNAME 540
#define LIKE 541
#define LIMIT 542
#define LINEAR_SYM 543
#define LINES 544
#define LINESTRING 545
#define LIST_SYM 546
#define LOAD 547
#define LOCAL_SYM 548
#define LOCATOR_SYM 549
#define LOCKS_SYM 550
#define LOCK_SYM 551
#define LOGFILE_SYM 552
#define LOGS_SYM 553
#define LONGBLOB 554
#define LONGTEXT 555
#define LONG_NUM 556
#define LONG_SYM 557
#define LOOP_SYM 558
#define LOW_PRIORITY 559
#define MASTER_CONNECT_RETRY_SYM 560
#define MASTER_DELAY_SYM 561
#define MASTER_GTID_POS_SYM 562
#define MASTER_HOST_SYM 563
#define MASTER_LOG_FILE_SYM 564
#define MASTER_LOG_POS_SYM 565
#define MASTER_PASSWORD_SYM 566
#define MASTER_PORT_SYM 567
#define MASTER_SERVER_ID_SYM 568
#define MASTER_SSL_CAPATH_SYM 569
#define MASTER_SSL_CA_SYM 570
#define MASTER_SSL_CERT_SYM 571
#define MASTER_SSL_CIPHER_SYM 572
#define MASTER_SSL_CRL_SYM 573
#define MASTER_SSL_CRLPATH_SYM 574
#define MASTER_SSL_KEY_SYM 575
#define MASTER_SSL_SYM 576
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 577
#define MASTER_SYM 578
#define MASTER_USER_SYM 579
#define MASTER_USE_GTID_SYM 580
#define MASTER_HEARTBEAT_PERIOD_SYM 581
#define MATCH 582
#define MAX_CONNECTIONS_PER_HOUR 583
#define MAX_QUERIES_PER_HOUR 584
#define MAX_ROWS 585
#define MAX_SIZE_SYM 586
#define MAX_SYM 587
#define MAX_UPDATES_PER_HOUR 588
#define MAX_STATEMENT_TIME_SYM 589
#define MAX_USER_CONNECTIONS_SYM 590
#define MAX_VALUE_SYM 591
#define MEDIUMBLOB 592
#define MEDIUMINT 593
#define MEDIUMTEXT 594
#define MEDIUM_SYM 595
#define MEMORY_SYM 596
#define MERGE_SYM 597
#define MESSAGE_TEXT_SYM 598
#define MICROSECOND_SYM 599
#define MIGRATE_SYM 600
#define MINUTE_MICROSECOND_SYM 601
#define MINUTE_SECOND_SYM 602
#define MINUTE_SYM 603
#define MIN_ROWS 604
#define MIN_SYM 605
#define MODE_SYM 606
#define MODIFIES_SYM 607
#define MODIFY_SYM 608
#define MOD_SYM 609
#define MONTH_SYM 610
#define MULTILINESTRING 611
#define MULTIPOINT 612
#define MULTIPOLYGON 613
#define MUTEX_SYM 614
#define MYSQL_SYM 615
#define MYSQL_ERRNO_SYM 616
#define NAMES_SYM 617
#define NAME_SYM 618
#define NATIONAL_SYM 619
#define NATURAL 620
#define NCHAR_STRING 621
#define NCHAR_SYM 622
#define NE 623
#define NEG 624
#define NEW_SYM 625
#define NEXT_SYM 626
#define NODEGROUP_SYM 627
#define NONE_SYM 628
#define NOT2_SYM 629
#define NOT_SYM 630
#define NOW_SYM 631
#define NO_SYM 632
#define NO_WAIT_SYM 633
#define NO_WRITE_TO_BINLOG 634
#define NTILE_SYM 635
#define NULL_SYM 636
#define NUM 637
#define NUMBER_SYM 638
#define NUMERIC_SYM 639
#define NTH_VALUE_SYM 640
#define NVARCHAR_SYM 641
#define OFFSET_SYM 642
#define OLD_PASSWORD_SYM 643
#define ON 644
#define ONE_SYM 645
#define ONLY_SYM 646
#define ONLINE_SYM 647
#define OPEN_SYM 648
#define OPTIMIZE 649
#define OPTIONS_SYM 650
#define OPTION 651
#define OPTIONALLY 652
#define OR2_SYM 653
#define ORDER_SYM 654
#define OR_OR_SYM 655
#define OR_SYM 656
#define OTHERS_SYM 657
#define OUTER 658
#define OUTFILE 659
#define OUT_SYM 660
#define OVER_SYM 661
#define OWNER_SYM 662
#define PACK_KEYS_SYM 663
#define PAGE_SYM 664
#define PAGE_CHECKSUM_SYM 665
#define PARAM_MARKER 666
#define PARSER_SYM 667
#define PARSE_VCOL_EXPR_SYM 668
#define PARTIAL 669
#define PARTITION_SYM 670
#define PARTITIONS_SYM 671
#define PARTITIONING_SYM 672
#define PASSWORD_SYM 673
#define PERCENT_RANK_SYM 674
#define PERSISTENT_SYM 675
#define PHASE_SYM 676
#define PLUGINS_SYM 677
#define PLUGIN_SYM 678
#define POINT_SYM 679
#define POLYGON 680
#define PORT_SYM 681
#define POSITION_SYM 682
#define PRECEDES_SYM 683
#define PRECEDING_SYM 684
#define PRECISION 685
#define PREPARE_SYM 686
#define PRESERVE_SYM 687
#define PREV_SYM 688
#define PRIMARY_SYM 689
#define PRIVILEGES 690
#define PROCEDURE_SYM 691
#define PROCESS 692
#define PROCESSLIST_SYM 693
#define PROFILE_SYM 694
#define PROFILES_SYM 695
#define PROXY_SYM 696
#define PURGE 697
#define QUARTER_SYM 698
#define QUERY_SYM 699
#define QUICK 700
#define RANGE_SYM 701
#define RANK_SYM 702
#define READS_SYM 703
#define READ_ONLY_SYM 704
#define READ_SYM 705
#define READ_WRITE_SYM 706
#define REAL 707
#define REBUILD_SYM 708
#define RECOVER_SYM 709
#define RECURSIVE_SYM 710
#define REDOFILE_SYM 711
#define REDO_BUFFER_SIZE_SYM 712
#define REDUNDANT_SYM 713
#define REFERENCES 714
#define REGEXP 715
#define RELAY 716
#define RELAYLOG_SYM 717
#define RELAY_LOG_FILE_SYM 718
#define RELAY_LOG_POS_SYM 719
#define RELAY_THREAD 720
#define RELEASE_SYM 721
#define RELOAD 722
#define REMOVE_SYM 723
#define RENAME 724
#define REORGANIZE_SYM 725
#define REPAIR 726
#define REPEATABLE_SYM 727
#define REPEAT_SYM 728
#define REPLACE 729
#define REPLICATION 730
#define REQUIRE_SYM 731
#define RESET_SYM 732
#define RESIGNAL_SYM 733
#define RESOURCES 734
#define RESTORE_SYM 735
#define RESTRICT 736
#define RESUME_SYM 737
#define RETURNED_SQLSTATE_SYM 738
#define RETURNING_SYM 739
#define RETURNS_SYM 740
#define RETURN_SYM 741
#define REVERSE_SYM 742
#define REVOKE 743
#define RIGHT 744
#define ROLE_SYM 745
#define ROLLBACK_SYM 746
#define ROLLUP_SYM 747
#define ROUTINE_SYM 748
#define ROW_SYM 749
#define ROWS_SYM 750
#define ROW_COUNT_SYM 751
#define ROW_FORMAT_SYM 752
#define ROW_NUMBER_SYM 753
#define RTREE_SYM 754
#define SAVEPOINT_SYM 755
#define SCHEDULE_SYM 756
#define SCHEMA_NAME_SYM 757
#define SECOND_MICROSECOND_SYM 758
#define SECOND_SYM 759
#define SECURITY_SYM 760
#define SELECT_SYM 761
#define SENSITIVE_SYM 762
#define SEPARATOR_SYM 763
#define SERIALIZABLE_SYM 764
#define SERIAL_SYM 765
#define SESSION_SYM 766
#define SERVER_SYM 767
#define SERVER_OPTIONS 768
#define SET 769
#define SET_VAR 770
#define SHARE_SYM 771
#define SHIFT_LEFT 772
#define SHIFT_RIGHT 773
#define SHOW 774
#define SHUTDOWN 775
#define SIGNAL_SYM 776
#define SIGNED_SYM 777
#define SIMPLE_SYM 778
#define SLAVE 779
#define SLAVES 780
#define SLAVE_POS_SYM 781
#define SLOW 782
#define SMALLINT 783
#define SNAPSHOT_SYM 784
#define SOCKET_SYM 785
#define SOFT_SYM 786
#define SONAME_SYM 787
#define SOUNDS_SYM 788
#define SOURCE_SYM 789
#define SPATIAL_SYM 790
#define SPECIFIC_SYM 791
#define SQLEXCEPTION_SYM 792
#define SQLSTATE_SYM 793
#define SQLWARNING_SYM 794
#define SQL_BIG_RESULT 795
#define SQL_BUFFER_RESULT 796
#define SQL_CACHE_SYM 797
#define SQL_CALC_FOUND_ROWS 798
#define SQL_NO_CACHE_SYM 799
#define SQL_SMALL_RESULT 800
#define SQL_SYM 801
#define SQL_THREAD 802
#define REF_SYSTEM_ID_SYM 803
#define SSL_SYM 804
#define STARTING 805
#define STARTS_SYM 806
#define START_SYM 807
#define STATEMENT_SYM 808
#define STATS_AUTO_RECALC_SYM 809
#define STATS_PERSISTENT_SYM 810
#define STATS_SAMPLE_PAGES_SYM 811
#define STATUS_SYM 812
#define STDDEV_SAMP_SYM 813
#define STD_SYM 814
#define STOP_SYM 815
#define STORAGE_SYM 816
#define STORED_SYM 817
#define STRAIGHT_JOIN 818
#define STRING_SYM 819
#define SUBCLASS_ORIGIN_SYM 820
#define SUBDATE_SYM 821
#define SUBJECT_SYM 822
#define SUBPARTITIONS_SYM 823
#define SUBPARTITION_SYM 824
#define SUBSTRING 825
#define SUM_SYM 826
#define SUPER_SYM 827
#define SUSPEND_SYM 828
#define SWAPS_SYM 829
#define SWITCHES_SYM 830
#define SYSDATE 831
#define TABLES 832
#define TABLESPACE 833
#define TABLE_REF_PRIORITY 834
#define TABLE_SYM 835
#define TABLE_CHECKSUM_SYM 836
#define TABLE_NAME_SYM 837
#define TEMPORARY 838
#define TEMPTABLE_SYM 839
#define TERMINATED 840
#define TEXT_STRING 841
#define TEXT_SYM 842
#define THAN_SYM 843
#define THEN_SYM 844
#define TIES_SYM 845
#define TIMESTAMP 846
#define TIMESTAMP_ADD 847
#define TIMESTAMP_DIFF 848
#define TIME_SYM 849
#define TINYBLOB 850
#define TINYINT 851
#define TINYTEXT 852
#define TO_SYM 853
#define TRAILING 854
#define TRANSACTION_SYM 855
#define TRANSACTIONAL_SYM 856
#define TRIGGERS_SYM 857
#define TRIGGER_SYM 858
#define TRIM 859
#define TRUE_SYM 860
#define TRUNCATE_SYM 861
#define TYPES_SYM 862
#define TYPE_SYM 863
#define UDF_RETURNS_SYM 864
#define ULONGLONG_NUM 865
#define UNBOUNDED_SYM 866
#define UNCOMMITTED_SYM 867
#define UNDEFINED_SYM 868
#define UNDERSCORE_CHARSET 869
#define UNDOFILE_SYM 870
#define UNDO_BUFFER_SIZE_SYM 871
#define UNDO_SYM 872
#define UNICODE_SYM 873
#define UNINSTALL_SYM 874
#define UNION_SYM 875
#define UNIQUE_SYM 876
#define UNKNOWN_SYM 877
#define UNLOCK_SYM 878
#define UNSIGNED 879
#define UNTIL_SYM 880
#define UPDATE_SYM 881
#define UPGRADE_SYM 882
#define USAGE 883
#define USER_SYM 884
#define USE_FRM 885
#define USE_SYM 886
#define USING 887
#define UTC_DATE_SYM 888
#define UTC_TIMESTAMP_SYM 889
#define UTC_TIME_SYM 890
#define VALUES 891
#define VALUE_SYM 892
#define VARBINARY 893
#define VARCHAR 894
#define VARIABLES 895
#define VARIANCE_SYM 896
#define VARYING 897
#define VAR_SAMP_SYM 898
#define VIA_SYM 899
#define VIEW_SYM 900
#define VIRTUAL_SYM 901
#define WAIT_SYM 902
#define WARNINGS 903
#define WEEK_SYM 904
#define WEIGHT_STRING_SYM 905
#define WHEN_SYM 906
#define WHERE 907
#define WINDOW_SYM 908
#define WHILE_SYM 909
#define WITH 910
#define WITH_CUBE_SYM 911
#define WITH_ROLLUP_SYM 912
#define WORK_SYM 913
#define WRAPPER_SYM 914
#define WRITE_SYM 915
#define X509_SYM 916
#define XA_SYM 917
#define XML_SYM 918
#define XOR 919
#define YEAR_MONTH_SYM 920
#define YEAR_SYM 921
#define ZEROFILL 922
#define IMPOSSIBLE_ACTION 923




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 927 "/home/buildbot/git/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;

  /* structs */
  LEX_STRING lex_str;
  LEX_SYMBOL symbol;
  struct sys_var_with_base variable;
  struct { int vars, conds, hndlrs, curs; } spblock;
  Lex_length_and_dec_st Lex_length_and_dec;
  Lex_cast_type_st Lex_cast_type;
  Lex_field_type_st Lex_field_type;
  Lex_dyncol_type_st Lex_dyncol_type;

  /* pointers */
  Create_field *create_field;
  CHARSET_INFO *charset;
  Condition_information_item *cond_info_item;
  DYNCALL_CREATE_DEF *dyncol_def;
  Diagnostics_information *diag_info;
  Item *item;
  Item_num *item_num;
  Item_param *item_param;
  Key_part_spec *key_part;
  LEX *lex;
  LEX_STRING *lex_str_ptr;
  LEX_USER *lex_user;
  List<Condition_information_item> *cond_info_list;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  List<Item> *item_list;
  List<Statement_information_item> *stmt_info_list;
  List<String> *string_list;
  List<LEX_STRING> *lex_str_list;
  Statement_information_item *stmt_info_item;
  String *string;
  TABLE_LIST *table_list;
  Table_ident *table;
  char *simple_string;
  const char *const_simple_string;
  chooser_compare_func_creator boolfunc2creator;
  class my_var *myvar;
  class sp_condition_value *spcondvalue;
  class sp_head *sphead;
  class sp_label *splabel;
  class sp_name *spname;
  class sp_variable *spvar;
  class With_clause *with_clause;
  class Virtual_column_info *virtual_column;

  handlerton *db_type;
  st_select_lex *select_lex;
  struct p_elem_val *p_elem_value;
  class Window_frame *window_frame;
  class Window_frame_bound *window_frame_bound;
  udf_func *udf;
  st_trg_execution_order trg_execution_order;

  /* enums */
  enum Condition_information_item::Name cond_info_item_name;
  enum enum_diag_condition_item_name diag_condition_item_name;
  enum Diagnostics_information::Which_area diag_area;
  enum Field::geometry_type geom_type;
  enum enum_fk_option m_fk_option;
  enum Item_udftype udf_type;
  enum Key::Keytype key_type;
  enum Statement_information_item::Name stmt_info_item_name;
  enum enum_field_types field_type;
  enum enum_filetype filetype;
  enum enum_tx_isolation tx_isolation;
  enum enum_var_type var_type;
  enum enum_yes_no_unknown m_yes_no_unk;
  enum ha_choice choice;
  enum ha_key_alg key_alg;
  enum ha_rkey_function ha_rkey_mode;
  enum index_hint_type index_hint;
  enum interval_type interval, interval_time_st;
  enum row_type row_type;
  enum sp_variable::enum_mode spvar_mode;
  enum thr_lock_type lock_type;
  enum enum_mysql_timestamp_type date_time_type;
  enum Window_frame_bound::Bound_precedence_type bound_precedence_type;
  enum Window_frame::Frame_units frame_units;
  enum Window_frame::Frame_exclusion frame_exclusion;
  enum trigger_order_type trigger_action_order_type;
  DDL_options_st object_ddl_options;



/* Line 214 of yacc.c  */
#line 2448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 1016 "/home/buildbot/git/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  644
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   71785

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  691
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1105
/* YYNRULES -- Number of rules.  */
#define YYNRULES  3024
/* YYNRULES -- Number of states.  */
#define YYNSTATES  5175

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   923

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   684,     2,     2,     2,   678,   673,     2,
     681,   682,   676,   675,   683,   674,   688,   677,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   690,   687,
     671,   669,   670,     2,   689,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   679,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   685,   672,   686,   680,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   133,   135,   139,   141,
     143,   148,   149,   152,   153,   158,   159,   165,   166,   167,
     171,   175,   177,   179,   180,   184,   185,   192,   194,   198,
     202,   206,   210,   214,   218,   222,   226,   230,   234,   238,
     242,   246,   250,   254,   258,   262,   268,   274,   280,   282,
     283,   285,   289,   291,   292,   294,   298,   300,   301,   303,
     307,   309,   313,   317,   321,   325,   329,   333,   337,   338,
     340,   342,   343,   351,   352,   367,   368,   382,   383,   397,
     398,   405,   406,   410,   418,   425,   430,   434,   435,   439,
     440,   453,   455,   459,   462,   465,   468,   471,   474,   477,
     480,   481,   495,   496,   503,   506,   507,   509,   513,   515,
     516,   519,   520,   523,   524,   526,   531,   532,   535,   536,
     539,   540,   544,   546,   547,   550,   551,   554,   557,   560,
     563,   566,   570,   574,   576,   578,   581,   585,   589,   590,
     595,   596,   600,   601,   603,   607,   609,   610,   612,   616,
     618,   619,   623,   624,   626,   630,   632,   635,   636,   638,
     640,   642,   643,   647,   650,   654,   655,   659,   660,   666,
     672,   673,   681,   687,   688,   691,   693,   695,   697,   701,
     703,   705,   707,   711,   712,   714,   716,   718,   720,   723,
     725,   729,   731,   733,   734,   736,   737,   740,   744,   750,
     752,   754,   756,   758,   760,   762,   764,   766,   768,   770,
     772,   774,   776,   778,   780,   784,   789,   790,   792,   794,
     798,   800,   804,   808,   810,   813,   815,   817,   819,   821,
     825,   829,   831,   833,   835,   837,   839,   841,   843,   845,
     847,   849,   851,   853,   855,   857,   861,   862,   865,   867,
     869,   871,   873,   875,   877,   879,   881,   883,   885,   887,
     889,   891,   893,   895,   897,   898,   904,   905,   908,   909,
     913,   916,   919,   922,   923,   930,   933,   934,   937,   939,
     941,   945,   946,   947,   948,   956,   957,   960,   963,   964,
     971,   972,   973,   978,   980,   982,   985,   987,   990,   991,
     992,   999,  1000,  1001,  1008,  1009,  1012,  1013,  1015,  1016,
    1023,  1024,  1028,  1029,  1035,  1036,  1041,  1045,  1046,  1053,
    1054,  1061,  1063,  1064,  1065,  1072,  1073,  1080,  1081,  1088,
    1089,  1094,  1095,  1100,  1101,  1106,  1108,  1110,  1112,  1114,
    1116,  1119,  1124,  1130,  1131,  1136,  1141,  1146,  1150,  1154,
    1157,  1160,  1161,  1164,  1166,  1169,  1173,  1175,  1177,  1179,
    1181,  1183,  1186,  1190,  1192,  1194,  1196,  1198,  1200,  1202,
    1204,  1206,  1208,  1210,  1213,  1217,  1219,  1221,  1223,  1225,
    1227,  1229,  1231,  1234,  1238,  1240,  1242,  1244,  1246,  1248,
    1250,  1252,  1254,  1256,  1259,  1263,  1265,  1267,  1269,  1272,
    1275,  1278,  1280,  1282,  1284,  1286,  1289,  1293,  1297,  1301,
    1305,  1309,  1313,  1317,  1321,  1326,  1327,  1329,  1331,  1333,
    1335,  1337,  1338,  1346,  1350,  1354,  1355,  1361,  1362,  1368,
    1370,  1373,  1378,  1379,  1383,  1384,  1392,  1398,  1402,  1403,
    1409,  1410,  1416,  1418,  1419,  1421,  1422,  1427,  1428,  1429,
    1433,  1434,  1441,  1448,  1449,  1454,  1457,  1460,  1463,  1466,
    1467,  1469,  1470,  1474,  1475,  1477,  1479,  1483,  1485,  1490,
    1496,  1502,  1503,  1506,  1507,  1508,  1516,  1517,  1528,  1530,
    1534,  1536,  1538,  1539,  1542,  1543,  1547,  1549,  1553,  1554,
    1561,  1563,  1564,  1565,  1571,  1572,  1577,  1579,  1581,  1583,
    1585,  1589,  1591,  1595,  1596,  1597,  1603,  1605,  1609,  1611,
    1613,  1614,  1618,  1620,  1624,  1625,  1630,  1632,  1633,  1635,
    1638,  1640,  1644,  1649,  1653,  1657,  1661,  1665,  1670,  1675,
    1679,  1685,  1686,  1690,  1692,  1694,  1697,  1699,  1701,  1702,
    1704,  1705,  1707,  1709,  1712,  1714,  1716,  1717,  1721,  1722,
    1726,  1728,  1732,  1733,  1735,  1737,  1740,  1742,  1745,  1749,
    1753,  1757,  1761,  1765,  1769,  1773,  1777,  1781,  1785,  1789,
    1793,  1797,  1801,  1805,  1809,  1813,  1817,  1821,  1825,  1829,
    1830,  1837,  1839,  1841,  1845,  1850,  1855,  1858,  1861,  1864,
    1868,  1872,  1876,  1880,  1884,  1888,  1892,  1897,  1902,  1904,
    1906,  1908,  1910,  1912,  1914,  1916,  1918,  1920,  1922,  1924,
    1926,  1928,  1930,  1932,  1934,  1936,  1938,  1942,  1944,  1946,
    1948,  1951,  1954,  1955,  1965,  1966,  1977,  1978,  1988,  1989,
    1999,  2000,  2011,  2012,  2024,  2025,  2036,  2039,  2040,  2042,
    2047,  2048,  2050,  2053,  2054,  2058,  2059,  2063,  2064,  2068,
    2069,  2071,  2074,  2076,  2078,  2079,  2086,  2087,  2090,  2091,
    2093,  2095,  2097,  2098,  2100,  2103,  2105,  2107,  2110,  2113,
    2114,  2118,  2120,  2122,  2126,  2130,  2132,  2134,  2136,  2138,
    2142,  2146,  2150,  2153,  2155,  2157,  2161,  2165,  2168,  2172,
    2176,  2179,  2183,  2185,  2188,  2191,  2194,  2196,  2199,  2203,
    2205,  2207,  2210,  2214,  2217,  2221,  2224,  2227,  2231,  2235,
    2239,  2245,  2251,  2254,  2256,  2258,  2260,  2262,  2264,  2266,
    2268,  2270,  2272,  2274,  2277,  2280,  2282,  2285,  2287,  2290,
    2294,  2297,  2299,  2301,  2303,  2305,  2307,  2309,  2311,  2314,
    2315,  2319,  2320,  2322,  2324,  2330,  2331,  2333,  2336,  2338,
    2340,  2342,  2344,  2348,  2352,  2356,  2360,  2361,  2363,  2364,
    2366,  2367,  2369,  2370,  2372,  2375,  2377,  2379,  2382,  2387,
    2389,  2393,  2396,  2398,  2401,  2404,  2406,  2409,  2412,  2416,
    2420,  2424,  2428,  2431,  2434,  2436,  2438,  2440,  2442,  2444,
    2445,  2448,  2450,  2452,  2454,  2456,  2458,  2459,  2462,  2464,
    2466,  2467,  2469,  2472,  2474,  2476,  2477,  2479,  2482,  2484,
    2487,  2488,  2490,  2491,  2496,  2498,  2500,  2502,  2503,  2505,
    2508,  2510,  2512,  2515,  2517,  2521,  2525,  2527,  2529,  2530,
    2533,  2534,  2536,  2542,  2543,  2547,  2551,  2553,  2554,  2557,
    2560,  2563,  2564,  2568,  2572,  2579,  2586,  2588,  2590,  2593,
    2596,  2599,  2602,  2605,  2607,  2609,  2610,  2612,  2614,  2616,
    2618,  2619,  2621,  2623,  2625,  2626,  2628,  2629,  2631,  2632,
    2634,  2636,  2639,  2641,  2644,  2646,  2649,  2650,  2653,  2654,
    2657,  2660,  2663,  2666,  2670,  2673,  2677,  2681,  2685,  2689,
    2691,  2693,  2695,  2697,  2701,  2703,  2705,  2707,  2712,  2715,
    2717,  2722,  2723,  2725,  2726,  2729,  2731,  2735,  2736,  2737,
    2745,  2746,  2752,  2760,  2761,  2767,  2768,  2774,  2775,  2781,
    2782,  2787,  2788,  2800,  2804,  2809,  2813,  2817,  2818,  2827,
    2835,  2836,  2840,  2842,  2847,  2848,  2852,  2853,  2856,  2857,
    2859,  2860,  2863,  2866,  2869,  2872,  2874,  2876,  2878,  2883,
    2888,  2889,  2896,  2901,  2902,  2908,  2909,  2916,  2921,  2925,
    2927,  2935,  2938,  2940,  2942,  2943,  2950,  2951,  2955,  2958,
    2959,  2965,  2966,  2967,  2974,  2976,  2980,  2982,  2984,  2988,
    2992,  2996,  2999,  3004,  3007,  3015,  3022,  3028,  3034,  3039,
    3045,  3049,  3054,  3057,  3060,  3067,  3073,  3077,  3083,  3085,
    3087,  3089,  3091,  3093,  3094,  3096,  3098,  3101,  3104,  3108,
    3112,  3116,  3120,  3121,  3123,  3124,  3126,  3127,  3130,  3131,
    3133,  3136,  3138,  3140,  3142,  3143,  3145,  3147,  3148,  3151,
    3153,  3154,  3156,  3158,  3160,  3161,  3168,  3169,  3175,  3180,
    3185,  3189,  3190,  3192,  3194,  3198,  3202,  3205,  3208,  3209,
    3212,  3214,  3218,  3219,  3221,  3223,  3224,  3227,  3232,  3234,
    3238,  3239,  3245,  3246,  3248,  3250,  3254,  3255,  3260,  3261,
    3266,  3267,  3269,  3271,  3274,  3276,  3278,  3280,  3281,  3284,
    3285,  3291,  3293,  3297,  3300,  3301,  3305,  3307,  3312,  3314,
    3315,  3320,  3322,  3323,  3328,  3329,  3331,  3335,  3336,  3338,
    3342,  3344,  3346,  3349,  3353,  3354,  3359,  3360,  3364,  3365,
    3367,  3369,  3372,  3374,  3376,  3378,  3380,  3382,  3385,  3386,
    3389,  3390,  3396,  3397,  3399,  3401,  3402,  3407,  3412,  3416,
    3422,  3424,  3428,  3432,  3433,  3440,  3442,  3444,  3446,  3450,
    3453,  3457,  3459,  3461,  3462,  3469,  3471,  3473,  3475,  3479,
    3483,  3488,  3489,  3496,  3497,  3500,  3501,  3506,  3507,  3510,
    3513,  3517,  3521,  3526,  3531,  3535,  3539,  3544,  3549,  3550,
    3556,  3560,  3561,  3567,  3571,  3572,  3578,  3582,  3583,  3591,
    3595,  3596,  3601,  3604,  3605,  3610,  3613,  3616,  3617,  3622,
    3625,  3629,  3631,  3633,  3635,  3637,  3639,  3641,  3644,  3646,
    3649,  3653,  3655,  3660,  3663,  3666,  3670,  3671,  3675,  3681,
    3682,  3684,  3687,  3689,  3691,  3692,  3694,  3697,  3699,  3701,
    3703,  3705,  3706,  3709,  3714,  3718,  3720,  3722,  3726,  3731,
    3732,  3733,  3734,  3735,  3738,  3741,  3743,  3745,  3746,  3749,
    3753,  3754,  3757,  3761,  3762,  3765,  3769,  3773,  3777,  3780,
    3784,  3789,  3793,  3798,  3802,  3807,  3809,  3813,  3818,  3822,
    3826,  3833,  3835,  3841,  3848,  3854,  3862,  3869,  3878,  3884,
    3891,  3896,  3901,  3907,  3911,  3916,  3918,  3922,  3926,  3930,
    3934,  3938,  3942,  3948,  3954,  3958,  3962,  3966,  3970,  3974,
    3978,  3980,  3982,  3984,  3986,  3988,  3990,  3992,  3994,  3996,
    3998,  4000,  4002,  4004,  4006,  4008,  4010,  4012,  4013,  4016,
    4018,  4020,  4022,  4024,  4027,  4029,  4031,  4033,  4036,  4038,
    4041,  4044,  4045,  4049,  4051,  4056,  4058,  4062,  4064,  4066,
    4068,  4070,  4072,  4074,  4076,  4078,  4080,  4082,  4089,  4094,
    4099,  4107,  4114,  4120,  4127,  4134,  4139,  4144,  4146,  4150,
    4154,  4157,  4161,  4164,  4167,  4170,  4173,  4179,  4184,  4191,
    4194,  4197,  4202,  4207,  4212,  4223,  4230,  4239,  4246,  4251,
    4256,  4263,  4268,  4273,  4278,  4285,  4290,  4298,  4306,  4314,
    4321,  4328,  4335,  4342,  4346,  4351,  4358,  4367,  4370,  4373,
    4382,  4391,  4398,  4405,  4408,  4415,  4422,  4431,  4440,  4447,
    4456,  4463,  4466,  4475,  4484,  4487,  4490,  4493,  4500,  4507,
    4512,  4517,  4526,  4531,  4536,  4541,  4546,  4550,  4559,  4566,
    4575,  4580,  4587,  4592,  4599,  4604,  4609,  4614,  4621,  4630,
    4635,  4639,  4646,  4651,  4658,  4664,  4673,  4681,  4692,  4694,
    4701,  4706,  4711,  4716,  4721,  4726,  4733,  4738,  4739,  4745,
    4752,  4755,  4759,  4760,  4765,  4766,  4770,  4771,  4773,  4775,
    4779,  4784,  4789,  4795,  4800,  4805,  4810,  4816,  4821,  4822,
    4823,  4831,  4836,  4842,  4847,  4853,  4858,  4863,  4868,  4873,
    4878,  4884,  4885,  4894,  4898,  4902,  4904,  4906,  4910,  4914,
    4918,  4922,  4926,  4931,  4936,  4941,  4948,  4953,  4960,  4965,
    4972,  4974,  4975,  4979,  4983,  4985,  4990,  4991,  4993,  4994,
    4997,  4998,  5002,  5007,  5010,  5011,  5015,  5018,  5019,  5024,
    5027,  5029,  5031,  5033,  5035,  5038,  5040,  5043,  5046,  5049,
    5051,  5054,  5057,  5058,  5060,  5062,  5066,  5068,  5072,  5074,
    5078,  5079,  5081,  5082,  5085,  5090,  5096,  5098,  5100,  5102,
    5104,  5109,  5111,  5115,  5119,  5120,  5127,  5128,  5137,  5142,
    5143,  5152,  5153,  5164,  5171,  5172,  5181,  5182,  5193,  5200,
    5202,  5205,  5207,  5209,  5212,  5213,  5215,  5221,  5223,  5225,
    5226,  5232,  5238,  5247,  5249,  5252,  5253,  5258,  5261,  5265,
    5269,  5271,  5273,  5274,  5278,  5281,  5283,  5284,  5288,  5291,
    5295,  5296,  5297,  5303,  5304,  5306,  5307,  5308,  5310,  5311,
    5314,  5318,  5322,  5324,  5326,  5327,  5335,  5336,  5344,  5346,
    5349,  5350,  5351,  5354,  5355,  5358,  5359,  5361,  5363,  5365,
    5367,  5371,  5373,  5377,  5379,  5381,  5383,  5385,  5387,  5389,
    5391,  5393,  5395,  5397,  5399,  5401,  5403,  5405,  5407,  5409,
    5411,  5413,  5415,  5417,  5419,  5421,  5423,  5425,  5427,  5428,
    5430,  5432,  5433,  5436,  5437,  5439,  5440,  5441,  5445,  5446,
    5447,  5451,  5454,  5455,  5456,  5461,  5466,  5469,  5470,  5472,
    5474,  5475,  5478,  5482,  5484,  5488,  5489,  5497,  5498,  5500,
    5501,  5505,  5506,  5510,  5511,  5515,  5517,  5519,  5521,  5526,
    5529,  5532,  5535,  5537,  5540,  5543,  5544,  5548,  5551,  5554,
    5558,  5562,  5566,  5568,  5571,  5572,  5574,  5575,  5580,  5585,
    5588,  5589,  5591,  5593,  5594,  5596,  5598,  5601,  5607,  5612,
    5614,  5618,  5622,  5624,  5626,  5628,  5630,  5632,  5634,  5635,
    5638,  5642,  5647,  5649,  5652,  5655,  5657,  5659,  5661,  5663,
    5665,  5667,  5669,  5671,  5673,  5675,  5677,  5679,  5681,  5683,
    5685,  5687,  5689,  5691,  5693,  5695,  5697,  5699,  5701,  5703,
    5705,  5707,  5708,  5715,  5716,  5718,  5722,  5724,  5728,  5729,
    5732,  5736,  5738,  5740,  5743,  5745,  5748,  5749,  5750,  5758,
    5761,  5763,  5764,  5768,  5769,  5777,  5778,  5786,  5791,  5798,
    5803,  5808,  5814,  5820,  5821,  5828,  5833,  5838,  5844,  5851,
    5856,  5858,  5862,  5864,  5867,  5869,  5873,  5875,  5876,  5879,
    5880,  5883,  5884,  5886,  5887,  5888,  5897,  5898,  5899,  5906,
    5907,  5909,  5911,  5913,  5915,  5917,  5920,  5922,  5924,  5926,
    5930,  5935,  5936,  5940,  5944,  5946,  5949,  5952,  5954,  5958,
    5960,  5964,  5966,  5970,  5972,  5974,  5975,  5977,  5978,  5983,
    5984,  5986,  5990,  5992,  5994,  5996,  5998,  5999,  6000,  6007,
    6008,  6009,  6021,  6025,  6027,  6031,  6035,  6037,  6041,  6042,
    6044,  6045,  6050,  6051,  6052,  6062,  6063,  6069,  6070,  6077,
    6078,  6081,  6083,  6087,  6090,  6095,  6096,  6099,  6100,  6103,
    6105,  6107,  6109,  6110,  6115,  6116,  6118,  6119,  6121,  6123,
    6127,  6129,  6131,  6134,  6137,  6140,  6142,  6144,  6146,  6148,
    6149,  6153,  6154,  6158,  6161,  6166,  6171,  6175,  6180,  6185,
    6187,  6191,  6195,  6199,  6203,  6210,  6213,  6216,  6217,  6224,
    6225,  6233,  6239,  6242,  6244,  6246,  6248,  6254,  6260,  6263,
    6266,  6268,  6273,  6277,  6280,  6284,  6287,  6290,  6292,  6297,
    6302,  6306,  6310,  6313,  6317,  6320,  6324,  6328,  6332,  6336,
    6339,  6343,  6347,  6351,  6355,  6359,  6363,  6367,  6371,  6373,
    6375,  6377,  6379,  6381,  6382,  6384,  6385,  6388,  6389,  6391,
    6393,  6395,  6396,  6399,  6400,  6403,  6404,  6408,  6412,  6413,
    6418,  6419,  6424,  6426,  6428,  6430,  6432,  6434,  6436,  6438,
    6442,  6444,  6446,  6448,  6449,  6453,  6454,  6456,  6458,  6459,
    6464,  6465,  6470,  6472,  6473,  6475,  6480,  6481,  6485,  6489,
    6491,  6494,  6497,  6500,  6503,  6506,  6510,  6513,  6515,  6517,
    6519,  6521,  6524,  6526,  6528,  6530,  6533,  6534,  6536,  6537,
    6541,  6542,  6546,  6550,  6552,  6553,  6558,  6559,  6563,  6566,
    6567,  6569,  6570,  6573,  6574,  6578,  6582,  6585,  6588,  6589,
    6595,  6596,  6598,  6600,  6601,  6603,  6605,  6608,  6610,  6613,
    6615,  6618,  6619,  6620,  6621,  6622,  6645,  6647,  6649,  6650,
    6652,  6653,  6655,  6657,  6658,  6660,  6662,  6663,  6666,  6669,
    6671,  6675,  6680,  6684,  6688,  6689,  6692,  6695,  6697,  6701,
    6705,  6706,  6711,  6712,  6716,  6718,  6720,  6721,  6725,  6728,
    6732,  6734,  6736,  6739,  6740,  6743,  6747,  6749,  6755,  6757,
    6759,  6762,  6765,  6767,  6769,  6771,  6773,  6775,  6777,  6780,
    6783,  6785,  6787,  6789,  6791,  6793,  6795,  6797,  6799,  6801,
    6804,  6806,  6808,  6810,  6812,  6814,  6817,  6820,  6823,  6824,
    6826,  6827,  6832,  6833,  6835,  6837,  6841,  6842,  6852,  6853,
    6857,  6859,  6863,  6865,  6867,  6869,  6873,  6879,  6881,  6883,
    6885,  6887,  6889,  6893,  6898,  6904,  6906,  6912,  6916,  6919,
    6921,  6925,  6928,  6931,  6936,  6938,  6940,  6942,  6944,  6946,
    6948,  6950,  6952,  6954,  6956,  6958,  6960,  6962,  6964,  6968,
    6971,  6973,  6975,  6977,  6979,  6981,  6983,  6985,  6987,  6989,
    6991,  6993,  6995,  6997,  6999,  7001,  7003,  7005,  7007,  7009,
    7011,  7013,  7015,  7017,  7019,  7021,  7023,  7025,  7027,  7029,
    7031,  7033,  7035,  7037,  7039,  7041,  7043,  7045,  7047,  7049,
    7051,  7053,  7055,  7057,  7059,  7061,  7063,  7065,  7067,  7069,
    7071,  7073,  7075,  7077,  7079,  7081,  7083,  7085,  7087,  7089,
    7091,  7093,  7095,  7097,  7099,  7101,  7103,  7105,  7107,  7109,
    7111,  7113,  7115,  7117,  7119,  7121,  7123,  7125,  7127,  7129,
    7131,  7133,  7135,  7137,  7139,  7141,  7143,  7145,  7147,  7149,
    7151,  7153,  7155,  7157,  7159,  7161,  7163,  7165,  7167,  7169,
    7171,  7173,  7175,  7177,  7179,  7181,  7183,  7185,  7187,  7189,
    7191,  7193,  7195,  7197,  7199,  7201,  7203,  7205,  7207,  7209,
    7211,  7213,  7215,  7217,  7219,  7221,  7223,  7225,  7227,  7229,
    7231,  7233,  7235,  7237,  7239,  7241,  7243,  7245,  7247,  7249,
    7251,  7253,  7255,  7257,  7259,  7261,  7263,  7265,  7267,  7269,
    7271,  7273,  7275,  7277,  7279,  7281,  7283,  7285,  7287,  7289,
    7291,  7293,  7295,  7297,  7299,  7301,  7303,  7305,  7307,  7309,
    7311,  7313,  7315,  7317,  7319,  7321,  7323,  7325,  7327,  7329,
    7331,  7333,  7335,  7337,  7339,  7341,  7343,  7345,  7347,  7349,
    7351,  7353,  7355,  7357,  7359,  7361,  7363,  7365,  7367,  7369,
    7371,  7373,  7375,  7377,  7379,  7381,  7383,  7385,  7387,  7389,
    7391,  7393,  7395,  7397,  7399,  7401,  7403,  7405,  7407,  7409,
    7411,  7413,  7415,  7417,  7419,  7421,  7423,  7425,  7427,  7429,
    7431,  7433,  7435,  7437,  7439,  7441,  7443,  7445,  7447,  7449,
    7451,  7453,  7455,  7457,  7459,  7461,  7463,  7465,  7467,  7469,
    7471,  7473,  7475,  7477,  7479,  7481,  7483,  7485,  7487,  7489,
    7491,  7493,  7495,  7497,  7499,  7501,  7503,  7505,  7507,  7509,
    7511,  7513,  7515,  7517,  7519,  7521,  7523,  7525,  7527,  7529,
    7531,  7533,  7535,  7537,  7539,  7541,  7543,  7545,  7547,  7549,
    7551,  7553,  7555,  7557,  7559,  7561,  7563,  7565,  7567,  7569,
    7571,  7573,  7575,  7577,  7579,  7581,  7583,  7585,  7587,  7589,
    7591,  7593,  7595,  7597,  7599,  7601,  7603,  7605,  7607,  7609,
    7611,  7613,  7615,  7617,  7619,  7621,  7623,  7625,  7627,  7629,
    7631,  7633,  7635,  7637,  7639,  7641,  7643,  7645,  7647,  7649,
    7651,  7653,  7655,  7657,  7659,  7661,  7663,  7665,  7667,  7669,
    7671,  7673,  7675,  7677,  7679,  7681,  7683,  7685,  7687,  7689,
    7691,  7693,  7695,  7697,  7699,  7701,  7703,  7705,  7707,  7709,
    7711,  7713,  7715,  7717,  7719,  7721,  7723,  7725,  7727,  7729,
    7731,  7733,  7735,  7737,  7739,  7740,  7744,  7745,  7746,  7754,
    7756,  7760,  7761,  7765,  7766,  7770,  7771,  7775,  7776,  7780,
    7783,  7784,  7787,  7788,  7791,  7792,  7797,  7798,  7802,  7804,
    7806,  7808,  7810,  7811,  7813,  7815,  7817,  7818,  7821,  7824,
    7827,  7831,  7835,  7840,  7847,  7850,  7854,  7858,  7862,  7868,
    7871,  7875,  7877,  7881,  7885,  7887,  7889,  7893,  7897,  7899,
    7903,  7906,  7909,  7912,  7915,  7918,  7920,  7922,  7926,  7928,
    7933,  7938,  7940,  7942,  7944,  7946,  7948,  7949,  7954,  7956,
    7958,  7960,  7964,  7968,  7970,  7972,  7975,  7978,  7981,  7982,
    7986,  7991,  7995,  7996,  8004,  8006,  8009,  8011,  8013,  8015,
    8017,  8019,  8021,  8022,  8028,  8030,  8032,  8034,  8036,  8038,
    8042,  8049,  8056,  8063,  8071,  8077,  8081,  8086,  8088,  8092,
    8101,  8110,  8119,  8126,  8131,  8132,  8136,  8137,  8141,  8143,
    8147,  8150,  8152,  8154,  8155,  8157,  8159,  8162,  8163,  8165,
    8167,  8171,  8172,  8176,  8177,  8181,  8182,  8186,  8187,  8191,
    8193,  8195,  8197,  8199,  8201,  8203,  8205,  8207,  8209,  8211,
    8213,  8216,  8219,  8221,  8225,  8228,  8231,  8234,  8237,  8240,
    8243,  8246,  8249,  8251,  8253,  8256,  8257,  8259,  8263,  8265,
    8268,  8271,  8274,  8276,  8280,  8284,  8286,  8288,  8292,  8294,
    8298,  8300,  8304,  8306,  8308,  8310,  8312,  8317,  8323,  8328,
    8335,  8337,  8338,  8342,  8346,  8348,  8350,  8351,  8354,  8357,
    8360,  8363,  8366,  8369,  8372,  8375,  8378,  8381,  8383,  8384,
    8387,  8388,  8391,  8392,  8396,  8399,  8401,  8404,  8406,  8407,
    8411,  8413,  8414,  8416,  8417,  8419,  8420,  8424,  8427,  8428,
    8430,  8433,  8434,  8436,  8441,  8446,  8452,  8455,  8459,  8460,
    8462,  8463,  8468,  8469,  8474,  8475,  8478,  8481,  8483,  8486,
    8487,  8489,  8491,  8495,  8499,  8504,  8507,  8511,  8513,  8515,
    8518,  8523,  8524,  8525,  8526,  8528,  8531,  8533,  8535,  8537,
    8539,  8541,  8543,  8545,  8547,  8549,  8552,  8555,  8559,  8561,
    8563,  8565,  8567,  8569,  8571,  8573,  8575,  8577,  8579,  8581,
    8583,  8585,  8586,  8590,  8594,  8598,  8602,  8603,  8607,  8611,
    8612,  8621,  8622,  8626,  8628,  8632,  8633,  8638,  8642,  8646,
    8651,  8656,  8657,  8661,  8666,  8671,  8673,  8675,  8676,  8679,
    8680,  8681,  8682,  8683,  8684,  8705,  8708,  8710,  8718,  8719,
    8720,  8721,  8722,  8723,  8739,  8740,  8741,  8742,  8743,  8756,
    8761,  8766,  8770,  8775,  8779,  8782,  8784,  8788,  8794,  8796,
    8798,  8799,  8801,  8803,  8804,  8807,  8808,  8809,  8813,  8814,
    8817,  8823,  8827,  8831,  8835
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     692,     0,    -1,   165,    -1,    -1,   695,   693,   687,   694,
      -1,   695,   165,    -1,    -1,   165,    -1,   696,    -1,  1716,
      -1,  1718,    -1,  1111,    -1,  1180,    -1,  1532,    -1,  1193,
      -1,   755,    -1,   711,    -1,  1196,    -1,  1169,    -1,  1724,
      -1,   724,    -1,   697,    -1,  1493,    -1,  1527,    -1,  1445,
      -1,  1447,    -1,   702,    -1,  1536,    -1,   791,    -1,  1679,
      -1,  1669,    -1,   709,    -1,  1459,    -1,  1793,    -1,  1795,
      -1,  1210,    -1,  1559,    -1,  1566,    -1,  1661,    -1,  1202,
      -1,  1025,    -1,   923,    -1,  1217,    -1,   699,    -1,  1555,
      -1,  1727,    -1,  1205,    -1,  1174,    -1,  1462,    -1,  1547,
      -1,   790,    -1,  1676,    -1,  1725,    -1,  1726,    -1,  1229,
      -1,  1630,    -1,   783,    -1,  1513,    -1,  1564,    -1,  1156,
      -1,  1159,    -1,  1506,    -1,  1794,    -1,  1667,    -1,  1485,
      -1,  1565,    -1,  1785,    -1,   698,   431,  1622,    -1,   129,
      -1,   153,    -1,   431,  1622,   206,   700,    -1,    -1,   701,
    1270,    -1,    -1,   180,  1622,   703,   705,    -1,    -1,   180,
     246,   700,   704,   705,    -1,    -1,    -1,   632,   706,   707,
      -1,   707,   683,   708,    -1,   708,    -1,  1482,    -1,    -1,
     228,   710,  1624,    -1,    -1,    60,   323,   722,   598,   712,
     713,    -1,   714,    -1,   713,   683,   714,    -1,   308,   669,
    1619,    -1,   324,   669,  1619,    -1,   311,   669,  1619,    -1,
     312,   669,  1424,    -1,   305,   669,  1424,    -1,   306,   669,
    1424,    -1,   321,   669,  1424,    -1,   315,   669,  1619,    -1,
     314,   669,  1619,    -1,   316,   669,  1619,    -1,   317,   669,
    1619,    -1,   320,   669,  1619,    -1,   322,   669,  1424,    -1,
     318,   669,  1619,    -1,   319,   669,  1619,    -1,   326,   669,
    1596,    -1,   245,   669,   681,   715,   682,    -1,   151,   669,
     681,   717,   682,    -1,   243,   669,   681,   719,   682,    -1,
     721,    -1,    -1,   716,    -1,   715,   683,   716,    -1,  1424,
      -1,    -1,   718,    -1,   717,   683,   718,    -1,  1424,    -1,
      -1,   720,    -1,   719,   683,   720,    -1,  1424,    -1,   309,
     669,  1619,    -1,   310,   669,  1426,    -1,   463,   669,  1619,
      -1,   464,   669,  1424,    -1,   325,   669,   112,    -1,   325,
     669,   526,    -1,   325,   669,   377,    -1,    -1,   723,    -1,
    1619,    -1,    -1,   981,  1458,   580,   980,  1615,   725,   908,
      -1,    -1,   981,  1089,   249,   980,  1622,  1099,   389,  1615,
     726,   681,  1106,   682,  1092,  1143,    -1,    -1,   981,  1090,
     249,   980,  1622,   389,  1615,   727,   681,  1106,   682,  1093,
    1143,    -1,    -1,   981,  1091,   249,   980,  1622,   389,  1615,
     728,   681,  1106,   682,  1094,  1143,    -1,    -1,   981,   116,
     980,  1622,   729,   976,    -1,    -1,   981,   730,  1748,    -1,
     981,   629,   980,   748,  1700,  1708,  1711,    -1,   981,   490,
     980,   748,  1683,  1681,    -1,   104,   297,   220,   871,    -1,
     104,   578,   868,    -1,    -1,   981,   731,   732,    -1,    -1,
     512,   980,  1624,   733,   202,   119,   659,  1624,   395,   681,
     734,   682,    -1,   735,    -1,   734,   683,   735,    -1,   629,
    1619,    -1,   232,  1619,    -1,   116,  1619,    -1,   407,  1619,
      -1,   418,  1619,    -1,   530,  1619,    -1,   426,  1424,    -1,
      -1,  1264,   175,   980,   749,   737,   389,   501,   738,   743,
     740,   745,   152,   746,    -1,    -1,   176,  1270,  1380,   739,
     741,   742,    -1,    24,  1270,    -1,    -1,   161,    -1,   145,
     389,   524,    -1,   145,    -1,    -1,   551,  1270,    -1,    -1,
     164,  1270,    -1,    -1,   744,    -1,   389,    87,  1719,   432,
      -1,    -1,    83,  1619,    -1,    -1,   747,   805,    -1,    -1,
    1622,   688,  1622,    -1,  1622,    -1,    -1,   750,   752,    -1,
      -1,   751,   753,    -1,    83,  1619,    -1,   275,   546,    -1,
     377,   546,    -1,    97,   546,    -1,   448,   546,   119,    -1,
     352,   546,   119,    -1,   754,    -1,   752,    -1,  1719,   142,
      -1,   546,   505,   134,    -1,   546,   505,   261,    -1,    -1,
      53,   749,   756,   757,    -1,    -1,   681,   758,   682,    -1,
      -1,   759,    -1,   759,   683,  1270,    -1,  1270,    -1,    -1,
     761,    -1,   761,   683,   762,    -1,   762,    -1,    -1,  1622,
     763,  1053,    -1,    -1,   765,    -1,   765,   683,   766,    -1,
     766,    -1,   767,   762,    -1,    -1,   262,    -1,   405,    -1,
     253,    -1,    -1,   768,   805,   687,    -1,   805,   687,    -1,
     769,   805,   687,    -1,    -1,   770,   771,   687,    -1,    -1,
     132,   802,   772,  1053,   803,    -1,   132,  1622,    90,   203,
     779,    -1,    -1,   132,   776,   224,   203,   773,   777,   805,
      -1,   132,  1622,   113,   203,   774,    -1,    -1,   775,  1229,
      -1,   182,    -1,    99,    -1,   778,    -1,   777,   683,   778,
      -1,   782,    -1,  1424,    -1,   780,    -1,   538,   781,  1620,
      -1,    -1,   637,    -1,   779,    -1,  1622,    -1,   539,    -1,
    1276,   205,    -1,   537,    -1,   521,   784,   786,    -1,  1622,
      -1,   780,    -1,    -1,   784,    -1,    -1,   514,   787,    -1,
     789,   669,   788,    -1,   787,   683,   789,   669,   788,    -1,
    1595,    -1,  1310,    -1,  1611,    -1,    68,    -1,   565,    -1,
      94,    -1,    96,    -1,    95,    -1,    58,    -1,   502,    -1,
     582,    -1,    82,    -1,   114,    -1,   343,    -1,   361,    -1,
     478,   785,   786,    -1,   216,   792,   143,   793,    -1,    -1,
     109,    -1,   794,    -1,    90,   798,   799,    -1,   795,    -1,
     794,   683,   795,    -1,   796,   669,   797,    -1,  1622,    -1,
     689,  1624,    -1,   383,    -1,   496,    -1,   788,    -1,   800,
      -1,   799,   683,   800,    -1,   796,   669,   801,    -1,    68,
      -1,   565,    -1,    94,    -1,    96,    -1,    95,    -1,    58,
      -1,   502,    -1,   582,    -1,    82,    -1,   114,    -1,   343,
      -1,   361,    -1,   483,    -1,  1622,    -1,   802,   683,  1622,
      -1,    -1,   133,  1270,    -1,   811,    -1,   841,    -1,   843,
      -1,   856,    -1,   806,    -1,   804,    -1,   809,    -1,   813,
      -1,   814,    -1,   815,    -1,   816,    -1,   818,    -1,   807,
      -1,   826,    -1,   845,    -1,   860,    -1,    -1,   242,   808,
     821,   163,   242,    -1,    -1,   810,   696,    -1,    -1,   486,
     812,  1270,    -1,   281,  1623,    -1,   268,  1623,    -1,   393,
    1622,    -1,    -1,   191,   819,  1622,   259,   817,   820,    -1,
      70,  1622,    -1,    -1,   371,   206,    -1,   206,    -1,  1622,
      -1,   820,   683,  1622,    -1,    -1,    -1,    -1,   822,  1270,
     589,   823,   769,   824,   825,    -1,    -1,   160,   821,    -1,
     159,   769,    -1,    -1,    56,   827,   828,   839,   163,    56,
      -1,    -1,    -1,   829,  1270,   830,   831,    -1,   832,    -1,
     833,    -1,   831,   833,    -1,   836,    -1,   832,   836,    -1,
      -1,    -1,   651,   834,  1270,   835,   589,   769,    -1,    -1,
      -1,   651,   837,  1270,   838,   589,   769,    -1,    -1,   159,
     769,    -1,    -1,  1623,    -1,    -1,  1623,   690,    34,   842,
     847,   840,    -1,    -1,    34,   844,   847,    -1,    -1,    34,
    1276,    25,   846,   847,    -1,    -1,   848,   770,   768,   163,
      -1,   769,   163,   303,    -1,    -1,  1270,   152,   851,   769,
     163,   654,    -1,    -1,   769,   625,   853,  1270,   163,   473,
      -1,   840,    -1,    -1,    -1,  1623,   690,   303,   857,   849,
     854,    -1,    -1,  1623,   690,   654,   858,   850,   854,    -1,
      -1,  1623,   690,   473,   859,   852,   854,    -1,    -1,   303,
     861,   849,   855,    -1,    -1,   654,   862,   850,   855,    -1,
      -1,   473,   863,   852,   855,    -1,    33,    -1,     9,    -1,
     255,    -1,   626,    -1,   137,    -1,   893,   895,    -1,   893,
      60,   890,   874,    -1,   893,     6,   890,   869,   878,    -1,
      -1,   631,   297,   220,  1622,    -1,   893,     6,   890,   881,
      -1,   893,   153,   890,   881,    -1,   894,   873,   884,    -1,
     894,   873,   887,    -1,     6,   891,    -1,     6,   892,    -1,
      -1,   875,   876,    -1,   877,    -1,   876,   877,    -1,   876,
     683,   877,    -1,   896,    -1,   897,    -1,   898,    -1,   879,
      -1,   880,    -1,   879,   880,    -1,   879,   683,   880,    -1,
     896,    -1,   897,    -1,   898,    -1,   899,    -1,   902,    -1,
     904,    -1,   906,    -1,   903,    -1,   882,    -1,   883,    -1,
     882,   883,    -1,   882,   683,   883,    -1,   896,    -1,   897,
      -1,   898,    -1,   904,    -1,   906,    -1,   885,    -1,   886,
      -1,   885,   886,    -1,   885,   683,   886,    -1,   896,    -1,
     900,    -1,   901,    -1,   902,    -1,   904,    -1,   906,    -1,
     903,    -1,   888,    -1,   889,    -1,   888,   889,    -1,   888,
     683,   889,    -1,   896,    -1,   904,    -1,   906,    -1,   118,
    1619,    -1,   615,  1619,    -1,   456,  1619,    -1,  1622,    -1,
    1622,    -1,   449,    -1,   451,    -1,   375,     4,    -1,   251,
    1477,   907,    -1,    27,  1477,   907,    -1,   331,  1477,   907,
      -1,   186,  1477,   907,    -1,   616,  1477,   907,    -1,   457,
    1477,   907,    -1,   372,  1477,  1425,    -1,    83,  1477,  1619,
      -1,  1520,   167,  1477,   989,    -1,    -1,   906,    -1,   647,
      -1,   378,    -1,  1427,    -1,  1618,    -1,    -1,   681,   994,
     682,   909,   982,   918,   913,    -1,   982,   918,   913,    -1,
     681,   969,   682,    -1,    -1,   681,   969,   682,   910,  1729,
      -1,    -1,   681,   969,   682,   911,  1733,    -1,   912,    -1,
     286,  1615,    -1,   681,   286,  1615,   682,    -1,    -1,  1574,
     975,   914,    -1,    -1,  1598,   506,   970,  1254,   974,   915,
    1728,    -1,  1598,   506,   970,   973,   974,    -1,   681,   969,
     682,    -1,    -1,   681,   969,   682,   916,  1729,    -1,    -1,
     681,   969,   682,   917,  1733,    -1,   919,    -1,    -1,   920,
      -1,    -1,   415,   922,   921,   925,    -1,    -1,    -1,   415,
     924,   925,    -1,    -1,    50,   926,   927,   937,   938,   945,
      -1,   929,   273,   930,   681,   931,   682,    -1,    -1,   929,
     226,   928,   935,    -1,   446,   935,    -1,   446,   934,    -1,
     291,   935,    -1,   291,   934,    -1,    -1,   288,    -1,    -1,
      12,   669,  1425,    -1,    -1,   932,    -1,   933,    -1,   932,
     683,   933,    -1,  1622,    -1,    75,   681,   931,   682,    -1,
     681,  1264,   943,  1265,   682,    -1,   681,  1264,   943,  1265,
     682,    -1,    -1,   416,  1425,    -1,    -1,    -1,   569,    50,
     929,   226,   936,   939,   944,    -1,    -1,   569,    50,   929,
     273,   930,   681,   941,   682,   940,   944,    -1,   942,    -1,
     941,   683,   942,    -1,  1622,    -1,  1273,    -1,    -1,   568,
    1425,    -1,    -1,   681,   946,   682,    -1,   947,    -1,   946,
     683,   947,    -1,    -1,   415,   948,   949,   950,   966,   961,
      -1,  1622,    -1,    -1,    -1,   636,   283,   588,   951,   953,
      -1,    -1,   636,   262,   952,   954,    -1,   133,    -1,   336,
      -1,   956,    -1,   956,    -1,   681,   955,   682,    -1,   956,
      -1,   955,   683,   956,    -1,    -1,    -1,   681,   957,   959,
     958,   682,    -1,   960,    -1,   959,   683,   960,    -1,   336,
      -1,  1273,    -1,    -1,   681,   962,   682,    -1,   963,    -1,
     962,   683,   963,    -1,    -1,   569,   964,   965,   966,    -1,
    1624,    -1,    -1,   967,    -1,   967,   968,    -1,   968,    -1,
     578,  1477,  1624,    -1,  1520,   167,  1477,   989,    -1,    91,
    1477,  1619,    -1,   372,  1477,  1425,    -1,   330,  1477,  1427,
      -1,   349,  1477,  1427,    -1,   119,   144,  1477,  1619,    -1,
     249,   144,  1477,  1619,    -1,    83,  1477,  1619,    -1,  1598,
     506,   970,   972,   974,    -1,    -1,   971,  1257,  1261,    -1,
    1254,    -1,   973,    -1,  1253,  1735,    -1,  1735,    -1,  1260,
      -1,    -1,    20,    -1,    -1,   977,    -1,   978,    -1,   977,
     978,    -1,   988,    -1,   987,    -1,    -1,   242,  1276,   181,
      -1,    -1,   242,  1276,   181,    -1,   104,    -1,   104,   401,
     474,    -1,    -1,   984,    -1,   985,    -1,   985,   983,    -1,
     985,    -1,   985,   984,    -1,   985,   683,   984,    -1,   167,
    1477,   989,    -1,   330,  1477,  1426,    -1,   349,  1477,  1426,
      -1,    30,  1477,  1424,    -1,   418,  1477,  1619,    -1,    83,
    1477,  1619,    -1,    28,  1477,  1426,    -1,   408,  1477,  1424,
      -1,   408,  1477,   133,    -1,   554,  1477,  1424,    -1,   554,
    1477,   133,    -1,   555,  1477,  1424,    -1,   555,  1477,   133,
      -1,   556,  1477,  1424,    -1,   556,  1477,   133,    -1,    65,
    1477,  1424,    -1,   581,  1477,  1424,    -1,   410,  1477,  1430,
      -1,   136,  1477,  1424,    -1,   497,  1477,   991,    -1,    -1,
     620,  1477,   986,   681,  1545,   682,    -1,   987,    -1,   988,
      -1,   256,  1477,   992,    -1,   119,   144,  1477,  1619,    -1,
     249,   144,  1477,  1619,    -1,   578,  1622,    -1,   561,   147,
      -1,   561,   341,    -1,    91,  1477,  1619,    -1,   272,  1477,
    1424,    -1,   601,  1477,  1430,    -1,  1618,  1476,  1619,    -1,
    1618,  1476,  1622,    -1,  1618,  1476,  1427,    -1,  1618,  1476,
     133,    -1,  1063,  1054,  1477,  1056,    -1,  1063,    73,  1477,
    1062,    -1,  1624,    -1,  1624,    -1,   133,    -1,   195,    -1,
     157,    -1,    88,    -1,   458,    -1,    86,    -1,   409,    -1,
     377,    -1,   194,    -1,   276,    -1,   564,    -1,   452,    -1,
     131,    -1,   260,    -1,   995,    -1,   996,    -1,   995,   683,
     996,    -1,   997,    -1,   998,    -1,  1006,    -1,  1011,  1007,
      -1,  1011,  1079,    -1,    -1,  1086,   980,  1108,  1098,   999,
     681,  1106,   682,  1092,    -1,    -1,  1086,   980,  1622,   608,
    1105,  1000,   681,  1106,   682,  1092,    -1,    -1,  1090,  1087,
     980,  1108,  1001,   681,  1106,   682,  1093,    -1,    -1,  1091,
    1087,   980,  1108,  1002,   681,  1106,   682,  1094,    -1,    -1,
    1009,  1085,   980,  1108,  1098,  1003,   681,  1106,   682,  1092,
      -1,    -1,  1009,  1085,   980,  1622,   608,  1105,  1004,   681,
    1106,   682,  1092,    -1,    -1,  1009,   202,   273,   980,  1108,
    1005,   681,  1106,   682,  1079,    -1,  1009,  1008,    -1,    -1,
    1008,    -1,    66,   681,  1270,   682,    -1,    -1,  1010,    -1,
      93,  1108,    -1,    -1,  1614,  1012,  1013,    -1,    -1,  1031,
    1014,  1018,    -1,    -1,   510,  1015,  1016,    -1,    -1,  1017,
      -1,  1017,  1052,    -1,  1052,    -1,  1049,    -1,    -1,  1020,
      20,  1028,  1019,  1021,  1022,    -1,    -1,   212,    15,    -1,
      -1,   646,    -1,   420,    -1,   562,    -1,    -1,  1023,    -1,
    1023,  1024,    -1,  1024,    -1,   621,    -1,   621,   273,    -1,
      83,  1619,    -1,    -1,   413,  1026,  1270,    -1,  1742,    -1,
    1270,    -1,  1270,   683,  1324,    -1,   681,  1027,   682,    -1,
    1288,    -1,  1594,    -1,  1028,    -1,  1029,    -1,  1037,  1046,
    1042,    -1,  1038,  1048,  1042,    -1,   197,  1040,  1042,    -1,
      42,  1047,    -1,    47,    -1,    46,    -1,  1033,  1047,  1065,
      -1,  1034,  1047,  1066,    -1,    37,  1047,    -1,  1035,  1045,
    1065,    -1,  1036,  1045,  1066,    -1,   638,  1045,    -1,   666,
    1046,  1042,    -1,   123,    -1,   594,  1046,    -1,   591,  1046,
      -1,   120,  1046,    -1,   595,    -1,    44,  1046,    -1,  1032,
    1040,  1039,    -1,   337,    -1,   299,    -1,   302,   638,    -1,
     302,  1035,  1065,    -1,   597,  1065,    -1,   587,  1046,  1065,
      -1,   339,  1065,    -1,   300,  1065,    -1,   131,  1040,  1042,
      -1,   384,  1040,  1042,    -1,   195,  1040,  1042,    -1,   168,
     681,  1110,   682,  1065,    -1,   514,   681,  1110,   682,  1065,
      -1,   302,  1065,    -1,   214,    -1,   213,    -1,   424,    -1,
     357,    -1,   290,    -1,   356,    -1,   425,    -1,   358,    -1,
      63,    -1,   367,    -1,   364,    63,    -1,  1033,   642,    -1,
     639,    -1,   364,   639,    -1,   386,    -1,   367,   639,    -1,
     364,    63,   642,    -1,   367,   642,    -1,   260,    -1,   596,
      -1,   528,    -1,   338,    -1,    36,    -1,   452,    -1,   150,
      -1,   150,   430,    -1,    -1,   548,   669,   382,    -1,    -1,
    1045,    -1,  1041,    -1,   681,   382,   683,   382,   682,    -1,
      -1,  1043,    -1,  1043,  1044,    -1,  1044,    -1,   522,    -1,
     624,    -1,   667,    -1,   681,   301,   682,    -1,   681,   610,
     682,    -1,   681,   130,   682,    -1,   681,   382,   682,    -1,
      -1,  1045,    -1,    -1,  1045,    -1,    -1,  1041,    -1,    -1,
    1050,    -1,  1050,  1051,    -1,  1051,    -1,   381,    -1,   133,
    1030,    -1,   389,   626,   376,  1267,    -1,    28,    -1,   510,
     133,   637,    -1,    73,  1060,    -1,  1052,    -1,  1276,   381,
      -1,  1078,   273,    -1,   621,    -1,   621,   273,    -1,    83,
    1619,    -1,  1618,  1476,  1619,    -1,  1618,  1476,  1622,    -1,
    1618,  1476,  1427,    -1,  1618,  1476,   133,    -1,  1031,  1061,
      -1,    63,   514,    -1,    62,    -1,  1624,    -1,    37,    -1,
    1055,    -1,   133,    -1,    -1,  1054,  1056,    -1,  1624,    -1,
      37,    -1,  1058,    -1,   133,    -1,  1624,    -1,    -1,    73,
    1062,    -1,  1060,    -1,   133,    -1,    -1,   133,    -1,  1054,
    1055,    -1,    22,    -1,   618,    -1,    -1,    51,    -1,  1064,
    1066,    -1,    37,    -1,    37,  1064,    -1,    -1,    37,    -1,
      -1,   681,  1425,  1068,   682,    -1,    21,    -1,   139,    -1,
     487,    -1,    -1,  1069,    -1,  1069,  1070,    -1,  1070,    -1,
    1425,    -1,  1072,  1071,    -1,  1073,    -1,  1074,   683,  1073,
      -1,  1072,   674,  1072,    -1,  1074,    -1,  1075,    -1,    -1,
     284,  1076,    -1,    -1,   434,    -1,   459,  1615,  1080,  1082,
    1083,    -1,    -1,   681,  1081,   682,    -1,  1081,   683,  1622,
      -1,  1622,    -1,    -1,   327,   207,    -1,   327,   414,    -1,
     327,   523,    -1,    -1,   389,   626,  1084,    -1,   389,   137,
    1084,    -1,   389,   626,  1084,   389,   137,  1084,    -1,   389,
     137,  1084,   389,   626,  1084,    -1,   481,    -1,    54,    -1,
     514,   381,    -1,   377,     5,    -1,   514,   133,    -1,   434,
     273,    -1,   621,  1087,    -1,   273,    -1,   249,    -1,    -1,
    1086,    -1,   271,    -1,   249,    -1,   248,    -1,    -1,   621,
      -1,   208,    -1,   535,    -1,    -1,  1095,    -1,    -1,  1097,
      -1,    -1,  1096,    -1,  1102,    -1,  1095,  1102,    -1,  1103,
      -1,  1096,  1103,    -1,  1104,    -1,  1097,  1104,    -1,    -1,
     632,  1105,    -1,    -1,   632,  1105,    -1,   608,  1105,    -1,
     632,  1105,    -1,   608,  1105,    -1,   272,  1477,  1424,    -1,
      83,  1619,    -1,  1618,  1476,  1619,    -1,  1618,  1476,  1622,
      -1,  1618,  1476,  1427,    -1,  1618,  1476,   133,    -1,  1101,
      -1,  1100,    -1,  1101,    -1,  1101,    -1,   655,   412,  1618,
      -1,    49,    -1,   499,    -1,   226,    -1,  1106,   683,  1107,
    1415,    -1,  1107,  1415,    -1,  1622,    -1,  1622,   681,   382,
     682,    -1,    -1,  1614,    -1,    -1,   688,  1622,    -1,  1591,
      -1,  1110,   683,  1591,    -1,    -1,    -1,    14,  1112,  1148,
     580,  1615,  1113,  1125,    -1,    -1,    14,   116,  1124,  1114,
     977,    -1,    14,   116,  1622,   627,   119,   144,   363,    -1,
      -1,    14,   436,   749,  1115,   750,    -1,    -1,    14,   209,
     749,  1116,   750,    -1,    -1,    14,  1754,  1751,  1117,  1756,
      -1,    -1,    14,  1751,  1118,  1756,    -1,    -1,    14,  1751,
    1264,   175,   749,  1119,  1121,  1122,   740,   745,  1123,    -1,
      14,   578,   870,    -1,    14,   297,   220,   872,    -1,    14,
     578,   867,    -1,    14,   578,   866,    -1,    -1,    14,   512,
    1624,  1120,   395,   681,   734,   682,    -1,    14,  1457,   629,
     748,  1700,  1708,  1711,    -1,    -1,   389,   501,   738,    -1,
     744,    -1,   389,   501,   738,   744,    -1,    -1,   469,   598,
     749,    -1,    -1,   152,   746,    -1,    -1,  1622,    -1,    -1,
     146,   578,    -1,   247,   578,    -1,  1140,   919,    -1,  1140,
    1129,    -1,  1129,    -1,   920,    -1,  1131,    -1,   153,   415,
    1457,  1138,    -1,   453,   415,  1204,  1130,    -1,    -1,   394,
     415,  1204,  1130,  1126,  1204,    -1,    16,   415,  1204,  1130,
      -1,    -1,    66,   415,  1130,  1127,  1198,    -1,    -1,   471,
     415,  1204,  1130,  1128,  1176,    -1,    71,   415,  1204,  1425,
      -1,   606,   415,  1130,    -1,  1134,    -1,   177,   415,  1139,
     655,   580,  1615,   922,    -1,   468,   417,    -1,    13,    -1,
    1138,    -1,    -1,     6,   415,   980,  1204,  1132,  1133,    -1,
      -1,   681,   946,   682,    -1,   416,  1425,    -1,    -1,   470,
     415,  1204,  1135,  1136,    -1,    -1,    -1,  1138,  1137,   259,
     681,   946,   682,    -1,  1139,    -1,  1138,   683,  1139,    -1,
    1622,    -1,  1142,    -1,  1140,   683,  1142,    -1,     6,  1146,
     979,    -1,  1141,   997,  1154,    -1,     6,   998,    -1,  1141,
     681,   994,   682,    -1,     6,  1006,    -1,     6,    93,   242,
    1276,   181,  1614,  1008,    -1,    60,  1146,  1456,  1614,  1011,
    1154,    -1,   353,  1146,  1456,  1011,  1154,    -1,   153,  1146,
    1456,  1614,  1153,    -1,   153,    93,  1456,  1614,    -1,   153,
     202,   273,  1456,  1614,    -1,   153,   434,   273,    -1,   153,
    1086,  1456,  1614,    -1,   145,   271,    -1,   161,   271,    -1,
      14,  1146,  1614,   514,   133,  1030,    -1,    14,  1146,  1614,
     153,   133,    -1,   469,  1155,  1615,    -1,   101,   598,  1054,
    1056,  1061,    -1,   983,    -1,   201,    -1,  1408,    -1,  1144,
      -1,  1145,    -1,    -1,  1145,    -1,  1144,    -1,  1145,  1144,
      -1,  1144,  1145,    -1,    12,  1477,   133,    -1,    12,  1477,
    1622,    -1,   296,  1477,   133,    -1,   296,  1477,  1622,    -1,
      -1,    81,    -1,    -1,   244,    -1,    -1,  1149,  1150,    -1,
      -1,  1151,    -1,  1151,  1152,    -1,  1152,    -1,   244,    -1,
     392,    -1,    -1,   481,    -1,    54,    -1,    -1,     9,  1622,
      -1,   194,    -1,    -1,   598,    -1,   669,    -1,    20,    -1,
      -1,   552,   524,   722,  1163,  1157,  1167,    -1,    -1,   552,
      13,   525,  1163,  1158,    -1,   560,   524,   722,  1163,    -1,
     560,    13,   525,  1163,    -1,   552,   600,  1160,    -1,    -1,
    1161,    -1,  1162,    -1,  1161,   683,  1162,    -1,   655,    92,
     529,    -1,   450,   391,    -1,   450,   660,    -1,    -1,  1164,
    1165,    -1,  1166,    -1,  1165,   683,  1166,    -1,    -1,   547,
      -1,   465,    -1,    -1,   625,  1168,    -1,   625,   307,   669,
    1619,    -1,   721,    -1,  1168,   683,   721,    -1,    -1,    65,
    1663,  1170,  1451,  1171,    -1,    -1,   445,    -1,   185,    -1,
    1663,  1451,  1176,    -1,    -1,   645,  1173,  1451,  1179,    -1,
      -1,   471,  1204,  1175,  1172,    -1,    -1,  1177,    -1,  1178,
      -1,  1178,  1177,    -1,   445,    -1,   185,    -1,   630,    -1,
      -1,   206,   360,    -1,    -1,    16,  1204,  1663,  1181,  1182,
      -1,  1183,    -1,  1182,   683,  1183,    -1,  1452,  1184,    -1,
      -1,   420,   203,  1185,    -1,    13,    -1,    75,  1186,   248,
    1188,    -1,    13,    -1,    -1,   681,  1187,  1190,   682,    -1,
      13,    -1,    -1,   681,  1189,  1191,   682,    -1,    -1,  1622,
      -1,  1190,   683,  1622,    -1,    -1,  1192,    -1,  1191,   683,
    1192,    -1,  1622,    -1,   434,    -1,    38,  1619,    -1,  1663,
    1451,  1198,    -1,    -1,   645,  1195,  1451,  1201,    -1,    -1,
      66,  1197,  1194,    -1,    -1,  1199,    -1,  1200,    -1,  1200,
    1199,    -1,   445,    -1,   189,    -1,   340,    -1,   185,    -1,
      61,    -1,   203,   627,    -1,    -1,   203,   627,    -1,    -1,
     394,  1204,  1663,  1203,  1451,    -1,    -1,   379,    -1,   293,
      -1,    -1,   469,  1663,  1206,  1208,    -1,   469,   629,   748,
    1207,    -1,  1627,   598,  1627,    -1,  1207,   683,  1627,   598,
    1627,    -1,  1209,    -1,  1208,   683,  1209,    -1,  1615,   598,
    1615,    -1,    -1,    52,   249,  1211,  1212,   262,  1216,    -1,
    1213,    -1,  1215,    -1,  1214,    -1,  1213,   683,  1214,    -1,
    1615,  1225,    -1,  1615,  1223,  1225,    -1,  1622,    -1,   133,
      -1,    -1,   292,   249,   259,    52,  1218,  1219,    -1,  1222,
      -1,  1220,    -1,  1221,    -1,  1220,   683,  1221,    -1,  1615,
    1225,  1228,    -1,  1615,  1223,  1225,  1228,    -1,    -1,   415,
     922,  1224,   681,  1130,   682,    -1,    -1,  1226,  1227,    -1,
      -1,  1086,   681,  1376,   682,    -1,    -1,   244,   280,    -1,
    1598,  1230,    -1,   506,  1251,  1240,    -1,   681,  1232,   682,
      -1,   681,  1232,   682,  1729,    -1,   681,  1232,   682,  1733,
      -1,   506,  1251,  1242,    -1,   681,  1234,   682,    -1,   681,
    1234,   682,  1729,    -1,   681,  1234,   682,  1733,    -1,    -1,
    1233,   506,  1251,  1246,  1260,    -1,   681,  1232,   682,    -1,
      -1,  1235,   506,  1251,  1247,  1260,    -1,   681,  1234,   682,
      -1,    -1,  1237,   506,  1251,  1248,  1260,    -1,   681,  1236,
     682,    -1,    -1,  1239,   506,  1355,  1254,  1411,  1416,  1260,
      -1,   681,  1238,   682,    -1,    -1,  1254,  1260,  1241,  1728,
      -1,  1249,  1260,    -1,    -1,  1254,  1260,  1243,  1728,    -1,
    1250,  1260,    -1,  1254,  1260,    -1,    -1,  1254,  1260,  1245,
    1731,    -1,  1735,  1260,    -1,  1253,  1735,  1260,    -1,  1254,
      -1,  1249,    -1,  1254,    -1,  1250,    -1,  1254,    -1,  1735,
      -1,  1253,  1735,    -1,  1250,    -1,  1253,  1431,    -1,  1253,
    1735,  1431,    -1,  1735,    -1,  1441,  1254,  1411,  1416,    -1,
    1253,  1441,    -1,  1253,  1735,    -1,  1253,  1735,  1441,    -1,
      -1,  1252,  1257,  1261,    -1,  1255,  1386,  1391,  1388,  1394,
      -1,    -1,  1253,    -1,   206,  1256,    -1,  1331,    -1,   154,
      -1,    -1,  1258,    -1,  1258,  1259,    -1,  1259,    -1,  1747,
      -1,   544,    -1,   542,    -1,    -1,   203,   626,    -1,   296,
     262,   516,   351,    -1,  1261,   683,  1262,    -1,  1262,    -1,
     676,    -1,  1264,  1609,  1265,    -1,  1264,  1270,  1265,  1266,
      -1,    -1,    -1,    -1,    -1,    20,  1622,    -1,    20,  1619,
      -1,  1622,    -1,  1619,    -1,    -1,   681,   682,    -1,   681,
    1425,   682,    -1,    -1,   681,   682,    -1,   681,  1425,   682,
      -1,    -1,   681,   682,    -1,  1270,  1274,  1270,    -1,  1270,
     664,  1270,    -1,  1270,  1275,  1270,    -1,   375,  1270,    -1,
    1271,   265,   605,    -1,  1271,   265,  1276,   605,    -1,  1271,
     265,   188,    -1,  1271,   265,  1276,   188,    -1,  1271,   265,
     622,    -1,  1271,   265,  1276,   622,    -1,  1271,    -1,  1271,
     265,   381,    -1,  1271,   265,  1276,   381,    -1,  1271,   169,
    1272,    -1,  1271,  1278,  1272,    -1,  1271,  1278,  1279,   681,
    1742,   682,    -1,  1272,    -1,  1273,   262,   681,  1742,   682,
      -1,  1273,  1276,   262,   681,  1742,   682,    -1,  1273,   262,
     681,  1270,   682,    -1,  1273,   262,   681,  1270,   683,  1324,
     682,    -1,  1273,  1276,   262,   681,  1270,   682,    -1,  1273,
    1276,   262,   681,  1270,   683,  1324,   682,    -1,  1273,    35,
    1273,    18,  1272,    -1,  1273,  1276,    35,  1273,    18,  1272,
      -1,  1273,   533,   286,  1273,    -1,  1273,   286,  1289,  1390,
      -1,  1273,  1276,   286,  1289,  1390,    -1,  1273,   460,  1273,
      -1,  1273,  1276,   460,  1273,    -1,  1273,    -1,  1273,   672,
    1273,    -1,  1273,   673,  1273,    -1,  1273,   517,  1273,    -1,
    1273,   518,  1273,    -1,  1273,   675,  1273,    -1,  1273,   674,
    1273,    -1,  1273,   675,   258,  1270,  1380,    -1,  1273,   674,
     258,  1270,  1380,    -1,  1273,   676,  1273,    -1,  1273,   677,
    1273,    -1,  1273,   678,  1273,    -1,  1273,   149,  1273,    -1,
    1273,   354,  1273,    -1,  1273,   679,  1273,    -1,  1289,    -1,
     401,    -1,   398,    -1,    18,    -1,    17,    -1,   375,    -1,
     374,    -1,   684,    -1,   374,    -1,   669,    -1,   210,    -1,
     670,    -1,   278,    -1,   671,    -1,   368,    -1,    13,    -1,
      19,    -1,    -1,    20,  1281,    -1,  1282,    -1,  1283,    -1,
    1284,    -1,   260,    -1,   624,   260,    -1,   150,    -1,   452,
      -1,   197,    -1,   131,  1040,    -1,   123,    -1,   594,  1046,
      -1,   120,  1046,    -1,    -1,  1033,  1285,  1065,    -1,  1034,
      -1,  1270,   683,  1270,  1280,    -1,  1286,    -1,  1287,   683,
    1286,    -1,  1611,    -1,  1290,    -1,  1291,    -1,  1294,    -1,
    1292,    -1,  1595,    -1,  1593,    -1,  1310,    -1,  1302,    -1,
    1306,    -1,   494,   681,  1270,   683,  1324,   682,    -1,   181,
     681,  1742,   682,    -1,   685,  1622,  1270,   686,    -1,   327,
    1325,    10,   681,  1273,  1296,   682,    -1,    57,   681,  1270,
      20,  1319,   682,    -1,    56,  1327,  1329,  1328,   163,    -1,
     101,   681,  1270,   683,  1319,   682,    -1,   101,   681,  1270,
     632,  1055,   682,    -1,   133,   681,  1611,   682,    -1,   636,
     681,  1612,   682,    -1,  1288,    -1,  1289,    73,  1624,    -1,
     681,  1027,   682,    -1,    37,  1289,    -1,  1289,   400,  1289,
      -1,   675,  1289,    -1,   674,  1289,    -1,   680,  1289,    -1,
    1277,  1289,    -1,   258,  1270,  1380,   675,  1270,    -1,    63,
     681,  1324,   682,    -1,    63,   681,  1324,   632,  1055,   682,
      -1,   110,  1269,    -1,   111,  1269,    -1,   123,   681,  1270,
     682,    -1,   128,   681,  1270,   682,    -1,   237,   681,  1270,
     682,    -1,   255,   681,  1270,   683,  1270,   683,  1270,   683,
    1270,   682,    -1,   258,   681,  1270,   683,  1270,   682,    -1,
     258,   681,  1270,   683,  1270,   683,  1324,   682,    -1,   282,
     681,  1270,   683,  1270,   682,    -1,   348,   681,  1270,   682,
      -1,   355,   681,  1270,   682,    -1,   489,   681,  1270,   683,
    1270,   682,    -1,   504,   681,  1270,   682,    -1,   594,   681,
    1270,   682,    -1,   591,   681,  1270,   682,    -1,   591,   681,
    1270,   683,  1270,   682,    -1,   604,   681,  1270,   682,    -1,
     604,   681,   279,  1270,   206,  1270,   682,    -1,   604,   681,
     599,  1270,   206,  1270,   682,    -1,   604,   681,    48,  1270,
     206,  1270,   682,    -1,   604,   681,   279,   206,  1270,   682,
      -1,   604,   681,   599,   206,  1270,   682,    -1,   604,   681,
      48,   206,  1270,   682,    -1,   604,   681,  1270,   206,  1270,
     682,    -1,   629,   681,   682,    -1,   666,   681,  1270,   682,
      -1,     8,   681,  1270,   683,  1270,   682,    -1,     8,   681,
    1270,   683,   258,  1270,  1380,   682,    -1,   108,  1269,    -1,
     115,  1268,    -1,   121,   681,  1270,   683,   258,  1270,  1380,
     682,    -1,   122,   681,  1270,   683,   258,  1270,  1380,   682,
      -1,   187,   681,  1380,   206,  1270,   682,    -1,   215,   681,
    1382,   683,  1270,   682,    -1,   376,  1268,    -1,   427,   681,
    1273,   262,  1270,   682,    -1,   566,   681,  1270,   683,  1270,
     682,    -1,   566,   681,  1270,   683,   258,  1270,  1380,   682,
      -1,   570,   681,  1270,   683,  1270,   683,  1270,   682,    -1,
     570,   681,  1270,   683,  1270,   682,    -1,   570,   681,  1270,
     206,  1270,   203,  1270,   682,    -1,   570,   681,  1270,   206,
    1270,   682,    -1,   576,  1268,    -1,   592,   681,  1381,   683,
    1270,   683,  1270,   682,    -1,   593,   681,  1381,   683,  1270,
     683,  1270,   682,    -1,   633,  1269,    -1,   635,  1268,    -1,
     634,  1268,    -1,    76,   681,  1270,   683,  1287,   682,    -1,
      79,   681,  1270,   683,  1324,   682,    -1,    77,   681,  1270,
     682,    -1,    78,   681,  1287,   682,    -1,    80,   681,  1270,
     683,  1270,    20,  1319,   682,    -1,    22,   681,  1270,   682,
      -1,    62,   681,  1270,   682,    -1,    71,   681,  1324,   682,
      -1,    74,   681,  1270,   682,    -1,   116,   681,   682,    -1,
     242,   681,  1270,   683,  1270,   683,  1270,   682,    -1,   204,
     681,  1270,   683,  1270,   682,    -1,   204,   681,  1270,   683,
    1270,   683,  1270,   682,    -1,   277,   681,  1270,   682,    -1,
     277,   681,  1324,   683,  1270,   682,    -1,   344,   681,  1270,
     682,    -1,   354,   681,  1270,   683,  1270,   682,    -1,   388,
     681,  1270,   682,    -1,   418,   681,  1270,   682,    -1,   443,
     681,  1270,   682,    -1,   473,   681,  1270,   683,  1270,   682,
      -1,   474,   681,  1270,   683,  1270,   683,  1270,   682,    -1,
     487,   681,  1270,   682,    -1,   496,   681,   682,    -1,   606,
     681,  1270,   683,  1270,   682,    -1,   649,   681,  1270,   682,
      -1,   649,   681,  1270,   683,  1270,   682,    -1,   650,   681,
    1270,  1077,   682,    -1,   650,   681,  1270,    20,    63,  1067,
    1077,   682,    -1,   650,   681,  1270,    20,    37,  1067,   682,
      -1,   650,   681,  1270,   683,  1424,   683,  1424,   683,  1424,
     682,    -1,  1293,    -1,    97,   681,  1270,   683,  1270,   682,
      -1,   213,   681,  1324,   682,    -1,   290,   681,  1324,   682,
      -1,   356,   681,  1324,   682,    -1,   357,   681,  1324,   682,
      -1,   358,   681,  1324,   682,    -1,   424,   681,  1270,   683,
    1270,   682,    -1,   425,   681,  1324,   682,    -1,    -1,  1618,
     681,  1295,  1299,   682,    -1,  1622,   688,  1622,   681,  1323,
     682,    -1,  1297,  1298,    -1,   262,    46,   351,    -1,    -1,
     262,   365,   275,   351,    -1,    -1,   655,   444,   183,    -1,
      -1,  1300,    -1,  1301,    -1,  1300,   683,  1301,    -1,  1264,
    1270,  1265,  1266,    -1,    31,   681,  1317,   682,    -1,    31,
     681,   148,  1317,   682,    -1,    40,   681,  1317,   682,    -1,
      41,   681,  1317,   682,    -1,    43,   681,  1317,   682,    -1,
     102,   681,  1385,   676,   682,    -1,   102,   681,  1317,   682,
      -1,    -1,    -1,   102,   681,   148,  1303,  1324,  1304,   682,
      -1,   350,   681,  1317,   682,    -1,   350,   681,   148,  1317,
     682,    -1,   332,   681,  1317,   682,    -1,   332,   681,   148,
    1317,   682,    -1,   559,   681,  1317,   682,    -1,   641,   681,
    1317,   682,    -1,   558,   681,  1317,   682,    -1,   643,   681,
    1317,   682,    -1,   571,   681,  1317,   682,    -1,   571,   681,
     148,  1317,   682,    -1,    -1,   221,   681,  1313,  1305,  1324,
    1315,  1314,   682,    -1,  1307,   406,  1309,    -1,  1307,   406,
    1397,    -1,  1308,    -1,  1302,    -1,   498,   681,   682,    -1,
     447,   681,   682,    -1,   138,   681,   682,    -1,   419,   681,
     682,    -1,   107,   681,   682,    -1,   380,   681,  1270,   682,
      -1,   193,   681,  1270,   682,    -1,   277,   681,  1270,   682,
      -1,   385,   681,  1270,   683,  1270,   682,    -1,   223,   681,
    1270,   682,    -1,   223,   681,  1270,   683,  1270,   682,    -1,
     222,   681,  1270,   682,    -1,   222,   681,  1270,   683,  1270,
     682,    -1,  1622,    -1,    -1,   689,  1311,  1312,    -1,  1624,
     515,  1270,    -1,  1624,    -1,   689,  1649,  1624,  1109,    -1,
      -1,   148,    -1,    -1,   508,  1591,    -1,    -1,   399,    50,
    1316,    -1,  1316,   683,  1610,  1415,    -1,  1610,  1415,    -1,
      -1,  1385,  1318,  1270,    -1,    37,  1046,    -1,    -1,    63,
    1046,  1320,  1065,    -1,   367,  1046,    -1,  1321,    -1,  1322,
      -1,   260,    -1,   522,    -1,   522,   260,    -1,   624,    -1,
     624,   260,    -1,   131,  1040,    -1,   150,  1048,    -1,   123,
      -1,   594,  1046,    -1,   120,  1046,    -1,    -1,  1324,    -1,
    1270,    -1,  1324,   683,  1270,    -1,  1326,    -1,   681,  1326,
     682,    -1,  1611,    -1,  1326,   683,  1611,    -1,    -1,  1270,
      -1,    -1,   159,  1270,    -1,   651,  1270,   589,  1270,    -1,
    1329,   651,  1270,   589,  1270,    -1,  1345,    -1,  1334,    -1,
    1333,    -1,  1330,    -1,   685,  1622,  1330,   686,    -1,  1332,
      -1,  1333,   683,  1332,    -1,  1330,  1342,  1330,    -1,    -1,
    1330,  1342,  1330,   389,  1335,  1270,    -1,    -1,  1330,  1342,
    1330,   632,  1336,   681,  1379,   682,    -1,  1330,   365,  1341,
    1345,    -1,    -1,  1330,   282,  1365,   269,  1330,   389,  1337,
    1270,    -1,    -1,  1330,   282,  1365,   269,  1345,  1338,   632,
     681,  1379,   682,    -1,  1330,   365,   282,  1365,   269,  1345,
      -1,    -1,  1330,   489,  1365,   269,  1330,   389,  1339,  1270,
      -1,    -1,  1330,   489,  1365,   269,  1345,  1340,   632,   681,
    1379,   682,    -1,  1330,   365,   489,  1365,   269,  1345,    -1,
     269,    -1,   252,   269,    -1,   563,    -1,  1341,    -1,   105,
     269,    -1,    -1,  1344,    -1,   415,   681,  1379,   682,   922,
      -1,  1346,    -1,  1348,    -1,    -1,  1347,  1615,  1343,  1384,
    1374,    -1,   681,  1362,  1349,   682,  1384,    -1,   681,  1362,
    1743,  1599,  1741,  1744,   682,  1384,    -1,  1357,    -1,  1357,
    1733,    -1,    -1,  1357,  1736,  1350,  1351,    -1,  1358,  1260,
      -1,  1358,  1735,  1260,    -1,  1358,  1260,  1353,    -1,  1739,
      -1,  1740,    -1,    -1,  1740,  1352,  1353,    -1,  1736,  1351,
      -1,  1355,    -1,    -1,  1356,  1745,  1261,    -1,  1363,  1333,
      -1,   506,  1364,  1359,    -1,    -1,    -1,  1360,  1257,  1261,
    1361,  1254,    -1,    -1,  1362,    -1,    -1,    -1,   403,    -1,
      -1,   203,   269,    -1,   203,   399,    50,    -1,   203,   220,
      50,    -1,   201,    -1,   244,    -1,    -1,  1367,  1086,  1366,
    1369,   681,  1378,   682,    -1,    -1,   631,  1086,  1366,  1370,
     681,  1376,   682,    -1,  1368,    -1,  1371,  1368,    -1,    -1,
      -1,  1373,  1371,    -1,    -1,  1375,  1372,    -1,    -1,  1378,
      -1,  1622,    -1,   434,    -1,  1377,    -1,  1378,   683,  1377,
      -1,  1622,    -1,  1379,   683,  1622,    -1,  1381,    -1,   124,
      -1,   125,    -1,   126,    -1,   127,    -1,   234,    -1,   235,
      -1,   236,    -1,   346,    -1,   347,    -1,   503,    -1,   665,
      -1,   128,    -1,   649,    -1,   237,    -1,   348,    -1,   355,
      -1,   443,    -1,   504,    -1,   344,    -1,   666,    -1,   123,
      -1,   594,    -1,   120,    -1,   591,    -1,    -1,    20,    -1,
     669,    -1,    -1,  1383,  1622,    -1,    -1,    13,    -1,    -1,
      -1,   652,  1387,  1270,    -1,    -1,    -1,   227,  1389,  1270,
      -1,   173,  1289,    -1,    -1,    -1,   220,    50,  1392,  1393,
      -1,  1392,   683,  1610,  1415,    -1,  1610,  1415,    -1,    -1,
     656,    -1,   657,    -1,    -1,   653,  1395,    -1,  1395,   683,
    1396,    -1,  1396,    -1,  1309,    20,  1397,    -1,    -1,   681,
    1398,  1399,  1400,  1401,  1402,   682,    -1,    -1,  1622,    -1,
      -1,   415,    50,  1392,    -1,    -1,   399,    50,  1414,    -1,
      -1,  1403,  1404,  1407,    -1,   495,    -1,   446,    -1,  1405,
      -1,    35,  1406,    18,  1406,    -1,   611,   429,    -1,   109,
     494,    -1,  1595,   429,    -1,  1405,    -1,   611,   200,    -1,
    1595,   200,    -1,    -1,   179,   109,   494,    -1,   179,   220,
      -1,   179,   590,    -1,   179,   377,   402,    -1,   399,    50,
    1409,    -1,  1409,   683,  1410,    -1,  1410,    -1,  1612,  1415,
      -1,    -1,  1412,    -1,    -1,   399,    50,  1413,  1414,    -1,
    1414,   683,  1610,  1415,    -1,  1610,  1415,    -1,    -1,    21,
      -1,   139,    -1,    -1,  1418,    -1,   287,    -1,  1417,  1419,
      -1,  1417,  1419,   495,   178,  1421,    -1,  1417,   495,   178,
    1421,    -1,  1420,    -1,  1420,   683,  1420,    -1,  1420,   387,
    1420,    -1,  1622,    -1,  1593,    -1,   610,    -1,   301,    -1,
     382,    -1,  1420,    -1,    -1,   287,  1420,    -1,   287,   495,
     178,    -1,   287,  1420,   495,   178,    -1,   382,    -1,   674,
     382,    -1,   674,   301,    -1,   382,    -1,   229,    -1,   301,
      -1,   610,    -1,   130,    -1,   196,    -1,   382,    -1,   229,
      -1,   301,    -1,   610,    -1,  1428,    -1,   382,    -1,   610,
      -1,   301,    -1,   130,    -1,   196,    -1,   382,    -1,   610,
      -1,   229,    -1,   301,    -1,  1428,    -1,  1429,    -1,   130,
      -1,   196,    -1,  1424,    -1,   133,    -1,    -1,   436,  1622,
    1432,   681,  1433,   682,    -1,    -1,  1434,    -1,  1434,   683,
    1435,    -1,  1435,    -1,  1264,  1270,  1265,    -1,    -1,  1437,
    1438,    -1,  1438,   683,  1439,    -1,  1439,    -1,  1440,    -1,
     689,  1624,    -1,  1624,    -1,   259,  1442,    -1,    -1,    -1,
     404,  1621,  1443,  1057,  1444,  1575,  1578,    -1,   155,  1621,
      -1,  1436,    -1,    -1,   152,  1446,  1324,    -1,    -1,   153,
    1458,  1663,  1457,  1448,  1451,  1153,    -1,    -1,   153,   249,
    1456,  1622,   389,  1615,  1449,    -1,   153,   116,  1457,  1622,
      -1,   153,   209,  1457,  1622,   688,  1622,    -1,   153,   209,
    1457,  1622,    -1,   153,   436,  1457,   749,    -1,   153,   629,
    1457,   748,  1699,    -1,   153,   490,  1457,   748,  1683,    -1,
      -1,   153,   645,  1457,  1450,  1451,  1153,    -1,   153,   175,
    1457,   749,    -1,   153,   603,  1457,   749,    -1,   153,   578,
     893,   904,   905,    -1,   153,   297,   220,   894,   904,   905,
      -1,   153,   512,  1457,  1624,    -1,  1452,    -1,  1451,   683,
    1452,    -1,  1615,    -1,  1615,  1343,    -1,  1455,    -1,  1454,
     683,  1455,    -1,  1616,    -1,    -1,   242,   181,    -1,    -1,
     242,   181,    -1,    -1,   583,    -1,    -1,    -1,   255,  1460,
    1465,  1147,  1467,  1461,  1469,  1483,    -1,    -1,    -1,   474,
    1463,  1466,  1467,  1464,  1469,    -1,    -1,   304,    -1,   135,
      -1,   231,    -1,  1492,    -1,   135,    -1,   259,  1468,    -1,
    1468,    -1,  1453,    -1,  1472,    -1,   681,   682,  1472,    -1,
     681,  1471,   682,  1472,    -1,    -1,   514,  1470,  1474,    -1,
    1471,   683,  1608,    -1,  1608,    -1,   636,  1473,    -1,   637,
    1473,    -1,   914,    -1,  1473,   683,  1478,    -1,  1478,    -1,
    1474,   683,  1475,    -1,  1475,    -1,  1612,  1476,  1482,    -1,
     669,    -1,   515,    -1,    -1,  1476,    -1,    -1,   681,  1479,
    1480,   682,    -1,    -1,  1481,    -1,  1481,   683,  1482,    -1,
    1482,    -1,  1270,    -1,   133,    -1,   244,    -1,    -1,    -1,
     389,   156,  1484,   273,   626,  1490,    -1,    -1,    -1,   626,
    1486,  1492,  1147,  1331,   514,  1488,  1487,  1386,  1411,  1422,
      -1,  1488,   683,  1489,    -1,  1489,    -1,  1612,  1476,  1482,
      -1,  1490,   683,  1491,    -1,  1491,    -1,  1612,  1476,  1482,
      -1,    -1,   304,    -1,    -1,   137,  1494,  1504,  1495,    -1,
      -1,    -1,   206,  1615,  1343,  1496,  1386,  1411,  1422,  1497,
    1500,    -1,    -1,  1501,  1498,   206,  1331,  1386,    -1,    -1,
     206,  1454,  1499,   632,  1331,  1386,    -1,    -1,   484,  1261,
      -1,  1502,    -1,  1501,   683,  1502,    -1,  1622,  1503,    -1,
    1622,   688,  1622,  1503,    -1,    -1,   688,   676,    -1,    -1,
    1505,  1504,    -1,   445,    -1,   304,    -1,   244,    -1,    -1,
     606,  1508,  1507,  1452,    -1,    -1,   580,    -1,    -1,  1510,
      -1,  1511,    -1,  1510,   683,  1511,    -1,   103,    -1,   341,
      -1,    45,   263,    -1,    98,   575,    -1,   409,   190,    -1,
     264,    -1,   574,    -1,   534,    -1,    13,    -1,    -1,   203,
     444,   382,    -1,    -1,   519,  1514,  1515,    -1,   117,  1526,
      -1,  1522,   577,  1521,  1526,    -1,  1522,   602,  1521,  1526,
      -1,   174,  1521,  1526,    -1,   580,   557,  1521,  1526,    -1,
     393,   577,  1521,  1526,    -1,   422,    -1,   422,   532,  1619,
      -1,   422,   532,  1526,    -1,   167,   990,  1518,    -1,   167,
      13,  1518,    -1,  1522,    75,  1523,  1615,  1521,  1526,    -1,
    1519,   298,    -1,   524,   233,    -1,    -1,    38,   174,  1524,
    1525,  1516,  1416,    -1,    -1,   462,   722,   174,  1524,  1525,
    1517,  1416,    -1,  1088,  1523,  1615,  1521,  1386,    -1,  1520,
     166,    -1,    26,    -1,   100,    -1,   435,    -1,   102,   681,
     676,   682,   648,    -1,   102,   681,   676,   682,   171,    -1,
     648,  1416,    -1,   171,  1416,    -1,   440,    -1,   439,  1509,
    1512,  1416,    -1,  1648,   557,  1526,    -1,  1522,   438,    -1,
    1648,   640,  1526,    -1,  1054,  1526,    -1,    74,  1526,    -1,
     219,    -1,   219,   203,  1626,   748,    -1,   104,   116,   980,
    1622,    -1,   104,   580,  1615,    -1,   104,   645,  1615,    -1,
     323,   557,    -1,    13,   525,   557,    -1,   524,   557,    -1,
     524,   723,   557,    -1,   104,   436,   749,    -1,   104,   209,
     749,    -1,   104,   603,   749,    -1,   104,   629,    -1,   104,
     629,  1627,    -1,   436,   557,  1526,    -1,   209,   557,  1526,
      -1,   436,    72,   749,    -1,   209,    72,   749,    -1,   104,
     175,   749,    -1,  1531,   203,  1270,    -1,  1618,  1263,  1526,
      -1,   557,    -1,   359,    -1,   298,    -1,   323,    -1,    37,
      -1,    -1,   561,    -1,    -1,  1523,  1622,    -1,    -1,   207,
      -1,   206,    -1,   262,    -1,    -1,   262,  1619,    -1,    -1,
     206,  1426,    -1,    -1,   286,  1263,  1619,    -1,   652,  1263,
    1270,    -1,    -1,  1531,  1615,  1528,  1535,    -1,    -1,  1531,
    1533,  1529,  1530,    -1,  1229,    -1,  1459,    -1,  1462,    -1,
    1485,    -1,  1493,    -1,   139,    -1,   140,    -1,    16,  1534,
    1530,    -1,   185,    -1,   416,    -1,  1534,    -1,    -1,   204,
     669,  1624,    -1,    -1,  1591,    -1,  1622,    -1,    -1,   198,
    1204,  1537,  1538,    -1,    -1,  1663,  1539,  1545,  1540,    -1,
    1543,    -1,    -1,  1541,    -1,   655,   450,   296,  1546,    -1,
      -1,   203,  1542,   184,    -1,  1543,   683,  1544,    -1,  1544,
      -1,   170,   298,    -1,   167,   298,    -1,   211,   298,    -1,
     527,   298,    -1,    37,   298,    -1,   461,   298,   722,    -1,
     444,    52,    -1,   233,    -1,   435,    -1,   298,    -1,   557,
      -1,   524,   722,    -1,   323,    -1,   141,    -1,   479,    -1,
    1618,  1263,    -1,    -1,  1451,    -1,    -1,    18,   145,    64,
      -1,    -1,   477,  1548,  1549,    -1,  1549,   683,  1550,    -1,
    1550,    -1,    -1,   524,  1551,   722,  1553,    -1,    -1,   323,
    1552,  1554,    -1,   444,    52,    -1,    -1,    13,    -1,    -1,
     598,  1424,    -1,    -1,   442,  1556,  1557,    -1,  1519,   298,
    1558,    -1,   598,  1619,    -1,    33,  1270,    -1,    -1,   274,
    1560,  1561,  1562,  1563,    -1,    -1,   225,    -1,   531,    -1,
      -1,    91,    -1,   444,    -1,   444,   238,    -1,  1270,    -1,
     629,  1627,    -1,   520,    -1,   631,  1622,    -1,    -1,    -1,
      -1,    -1,   292,  1571,  1567,  1573,  1572,   250,  1621,  1568,
    1574,   259,   580,  1615,  1343,  1569,  1057,  1570,  1581,  1575,
    1578,  1582,  1584,  1587,    -1,   119,    -1,   663,    -1,    -1,
     293,    -1,    -1,    89,    -1,   304,    -1,    -1,   474,    -1,
     244,    -1,    -1,    75,  1576,    -1,  1576,  1577,    -1,  1577,
      -1,   585,    50,  1591,    -1,   397,   162,    50,  1591,    -1,
     162,    50,  1591,    -1,   172,    50,  1591,    -1,    -1,   289,
    1579,    -1,  1579,  1580,    -1,  1580,    -1,   585,    50,  1591,
      -1,   550,    50,  1591,    -1,    -1,   495,   240,    50,  1591,
      -1,    -1,   244,   382,  1583,    -1,   289,    -1,   495,    -1,
      -1,   681,  1585,   682,    -1,   681,   682,    -1,  1585,   683,
    1586,    -1,  1586,    -1,  1612,    -1,   689,  1624,    -1,    -1,
     514,  1588,    -1,  1588,   683,  1589,    -1,  1589,    -1,  1612,
    1476,  1264,  1482,  1265,    -1,   586,    -1,   366,    -1,   614,
     586,    -1,  1590,  1620,    -1,  1620,    -1,  1592,    -1,   229,
      -1,   230,    -1,    39,    -1,   411,    -1,   675,  1596,    -1,
     674,  1596,    -1,  1590,    -1,  1596,    -1,  1597,    -1,   381,
      -1,   188,    -1,   605,    -1,   229,    -1,   230,    -1,    39,
      -1,   614,  1592,    -1,   382,    -1,   301,    -1,   610,    -1,
     130,    -1,   196,    -1,   123,   586,    -1,   594,   586,    -1,
     591,   586,    -1,    -1,  1599,    -1,    -1,   655,  1601,  1600,
    1602,    -1,    -1,   455,    -1,  1603,    -1,  1602,   683,  1603,
      -1,    -1,  1607,  1605,  1604,    20,   681,  1264,  1742,  1265,
     682,    -1,    -1,   681,  1606,   682,    -1,  1622,    -1,  1606,
     683,  1622,    -1,  1622,    -1,  1612,    -1,  1609,    -1,  1622,
     688,   676,    -1,  1622,   688,  1622,   688,   676,    -1,  1270,
      -1,  1622,    -1,  1613,    -1,  1622,    -1,  1613,    -1,  1622,
     688,  1622,    -1,   688,  1622,   688,  1622,    -1,  1622,   688,
    1622,   688,  1622,    -1,  1622,    -1,  1622,   688,  1622,   688,
    1622,    -1,  1622,   688,  1622,    -1,   688,  1622,    -1,  1622,
      -1,  1622,   688,  1622,    -1,   688,  1622,    -1,  1622,  1503,
      -1,  1622,   688,  1622,  1503,    -1,  1622,    -1,   239,    -1,
     241,    -1,   586,    -1,   586,    -1,   586,    -1,  1618,    -1,
    1628,    -1,  1618,    -1,  1629,    -1,  1622,    -1,  1619,    -1,
     285,    -1,  1624,    -1,  1624,   689,  1624,    -1,   110,  1269,
      -1,  1625,    -1,  1684,    -1,  1625,    -1,  1629,    -1,    22,
      -1,    32,    -1,    34,    -1,    38,    -1,    51,    -1,    52,
      -1,    62,    -1,    65,    -1,    64,    -1,    70,    -1,    76,
      -1,    77,    -1,    78,    -1,    79,    -1,    80,    -1,    83,
      -1,    85,    -1,    97,    -1,   129,    -1,   152,    -1,   163,
      -1,   178,    -1,   179,    -1,   180,    -1,   198,    -1,   199,
      -1,   200,    -1,   204,    -1,   216,    -1,   224,    -1,   228,
      -1,   232,    -1,   257,    -1,   275,    -1,   377,    -1,   393,
      -1,   396,    -1,   395,    -1,   402,    -1,   407,    -1,   412,
      -1,   426,    -1,   428,    -1,   429,    -1,   431,    -1,   468,
      -1,   471,    -1,   477,    -1,   480,    -1,   491,    -1,   500,
      -1,   505,    -1,   512,    -1,   520,    -1,   522,    -1,   530,
      -1,   524,    -1,   525,    -1,   532,    -1,   552,    -1,   560,
      -1,   562,    -1,   590,    -1,   606,    -1,   618,    -1,   619,
      -1,   611,    -1,   659,    -1,   662,    -1,   627,    -1,     5,
      -1,     8,    -1,     7,    -1,     9,    -1,    10,    -1,    11,
      -1,    12,    -1,    15,    -1,    19,    -1,    24,    -1,    25,
      -1,    26,    -1,    28,    -1,    27,    -1,    29,    -1,    30,
      -1,    31,    -1,    42,    -1,    45,    -1,    47,    -1,    46,
      -1,    49,    -1,    55,    -1,    58,    -1,    59,    -1,    61,
      -1,    67,    -1,    69,    -1,    68,    -1,    71,    -1,    72,
      -1,    74,    -1,    82,    -1,    75,    -1,    84,    -1,    86,
      -1,    87,    -1,    88,    -1,    89,    -1,    91,    -1,    92,
      -1,    94,    -1,    96,    -1,    95,    -1,    98,    -1,   100,
      -1,   112,    -1,   103,    -1,   106,    -1,   109,    -1,   114,
      -1,   119,    -1,   118,    -1,   120,    -1,   123,    -1,   128,
      -1,   134,    -1,   136,    -1,   141,    -1,   143,    -1,   144,
      -1,   145,    -1,   146,    -1,   147,    -1,   155,    -1,   156,
      -1,   157,    -1,   164,    -1,   168,    -1,   167,    -1,   166,
      -1,   170,    -1,   171,    -1,   173,    -1,   175,    -1,   174,
      -1,   176,    -1,   177,    -1,   183,    -1,   184,    -1,   185,
      -1,   186,    -1,   190,    -1,   189,    -1,   205,    -1,   161,
      -1,   207,    -1,   192,    -1,   194,    -1,   195,    -1,   211,
      -1,   212,    -1,   214,    -1,   213,    -1,   215,    -1,   219,
      -1,   217,    -1,   226,    -1,   225,    -1,   233,    -1,   237,
      -1,   238,    -1,   240,    -1,   245,    -1,   246,    -1,   261,
      -1,   247,    -1,   248,    -1,   251,    -1,   263,    -1,   264,
      -1,   266,    -1,   267,    -1,   270,    -1,   256,    -1,   272,
      -1,   277,    -1,   276,    -1,   280,    -1,   283,    -1,   284,
      -1,   290,    -1,   291,    -1,   293,    -1,   295,    -1,   297,
      -1,   298,    -1,   330,    -1,   323,    -1,   326,    -1,   307,
      -1,   308,    -1,   312,    -1,   309,    -1,   310,    -1,   324,
      -1,   325,    -1,   311,    -1,   313,    -1,   305,    -1,   306,
      -1,   321,    -1,   315,    -1,   314,    -1,   316,    -1,   317,
      -1,   318,    -1,   319,    -1,   320,    -1,   328,    -1,   329,
      -1,   331,    -1,   334,    -1,   333,    -1,   335,    -1,   340,
      -1,   341,    -1,   342,    -1,   343,    -1,   344,    -1,   345,
      -1,   348,    -1,   349,    -1,   353,    -1,   351,    -1,   355,
      -1,   356,    -1,   357,    -1,   358,    -1,   359,    -1,   360,
      -1,   361,    -1,   363,    -1,   362,    -1,   364,    -1,   367,
      -1,   371,    -1,   370,    -1,   378,    -1,   372,    -1,   373,
      -1,   383,    -1,   386,    -1,   387,    -1,   388,    -1,   390,
      -1,   392,    -1,   391,    -1,   408,    -1,   409,    -1,   414,
      -1,   417,    -1,   416,    -1,   418,    -1,   420,    -1,   421,
      -1,   423,    -1,   422,    -1,   424,    -1,   425,    -1,   432,
      -1,   433,    -1,   435,    -1,   437,    -1,   438,    -1,   439,
      -1,   440,    -1,   441,    -1,   443,    -1,   444,    -1,   445,
      -1,   449,    -1,   453,    -1,   454,    -1,   457,    -1,   456,
      -1,   458,    -1,   461,    -1,   462,    -1,   463,    -1,   464,
      -1,   465,    -1,   467,    -1,   470,    -1,   472,    -1,   475,
      -1,   479,    -1,   482,    -1,   483,    -1,   485,    -1,   487,
      -1,   490,    -1,   492,    -1,   493,    -1,   496,    -1,   497,
      -1,   494,    -1,   499,    -1,   501,    -1,   502,    -1,   504,
      -1,   510,    -1,   509,    -1,   511,    -1,   523,    -1,   516,
      -1,   526,    -1,   527,    -1,   529,    -1,   531,    -1,   533,
      -1,   534,    -1,   542,    -1,   541,    -1,   544,    -1,   547,
      -1,   551,    -1,   553,    -1,   557,    -1,   561,    -1,   564,
      -1,   565,    -1,   566,    -1,   567,    -1,   569,    -1,   568,
      -1,   572,    -1,   573,    -1,   574,    -1,   575,    -1,   582,
      -1,   577,    -1,   581,    -1,   578,    -1,   583,    -1,   584,
      -1,   587,    -1,   588,    -1,   600,    -1,   601,    -1,   602,
      -1,   591,    -1,   592,    -1,   593,    -1,   594,    -1,   607,
      -1,   608,    -1,   609,    -1,   209,    -1,   612,    -1,   613,
      -1,   616,    -1,   615,    -1,   622,    -1,   625,    -1,   629,
      -1,   630,    -1,   640,    -1,   645,    -1,   646,    -1,   637,
      -1,   648,    -1,   647,    -1,   649,    -1,   650,    -1,   658,
      -1,   661,    -1,   663,    -1,   666,    -1,   644,    -1,    -1,
     514,  1631,  1635,    -1,    -1,    -1,   514,   553,  1632,  1634,
    1633,   203,   695,    -1,  1650,    -1,  1634,   683,  1650,    -1,
      -1,  1651,  1636,  1641,    -1,    -1,   600,  1637,  1653,    -1,
      -1,  1647,  1638,  1639,    -1,    -1,  1650,  1640,  1641,    -1,
     600,  1653,    -1,    -1,   683,  1642,    -1,    -1,  1643,  1645,
      -1,    -1,  1642,   683,  1644,  1645,    -1,    -1,  1647,  1646,
    1650,    -1,  1651,    -1,   217,    -1,   293,    -1,   511,    -1,
      -1,   217,    -1,   293,    -1,   511,    -1,    -1,   217,   688,
      -1,   293,   688,    -1,   511,   688,    -1,  1652,  1476,  1660,
      -1,  1652,  1476,  1660,    -1,   689,  1624,  1476,  1270,    -1,
     689,   689,  1649,  1652,  1476,  1660,    -1,  1054,  1059,    -1,
     362,  1476,  1270,    -1,   362,  1056,  1061,    -1,   133,   490,
    1685,    -1,   133,   490,  1685,   203,  1627,    -1,   490,  1624,
      -1,   418,  1658,  1659,    -1,  1622,    -1,  1622,   688,  1622,
      -1,   133,   688,  1622,    -1,  1654,    -1,  1655,    -1,  1654,
     683,  1655,    -1,  1655,   683,  1654,    -1,  1656,    -1,   266,
     284,  1657,    -1,   450,   391,    -1,   450,   660,    -1,   450,
     612,    -1,   450,    84,    -1,   472,   450,    -1,   509,    -1,
    1476,    -1,   203,  1627,  1476,    -1,   586,    -1,   418,   681,
     586,   682,    -1,   388,   681,   586,   682,    -1,  1270,    -1,
     133,    -1,   389,    -1,    13,    -1,    37,    -1,    -1,   296,
    1663,  1662,  1664,    -1,   580,    -1,   577,    -1,  1665,    -1,
    1664,   683,  1665,    -1,  1615,  1384,  1666,    -1,   450,    -1,
     660,    -1,   660,    89,    -1,   304,   660,    -1,   450,   293,
      -1,    -1,   623,  1668,  1663,    -1,   224,  1615,   393,  1384,
      -1,   224,  1617,    70,    -1,    -1,   224,  1617,   450,  1670,
    1671,  1386,  1416,    -1,  1672,    -1,  1622,  1673,    -1,   194,
      -1,   371,    -1,   194,    -1,   371,    -1,   433,    -1,   276,
      -1,    -1,  1675,  1674,   681,  1481,   682,    -1,   669,    -1,
     210,    -1,   278,    -1,   670,    -1,   671,    -1,   488,   748,
    1677,    -1,  1687,   389,  1686,  1698,   206,  1701,    -1,  1687,
     389,   209,  1698,   206,  1701,    -1,  1687,   389,   436,  1698,
     206,  1701,    -1,    13,  1688,   683,   218,   396,   206,  1701,
      -1,   441,   389,  1627,   206,  1699,    -1,  1678,   206,  1701,
      -1,     7,   396,   203,  1685,    -1,  1685,    -1,   218,   748,
    1680,    -1,  1687,   389,  1686,  1698,   598,  1700,  1708,  1712,
      -1,  1687,   389,   209,  1698,   598,  1700,  1708,  1712,    -1,
    1687,   389,   436,  1698,   598,  1700,  1708,  1712,    -1,   441,
     389,  1627,   598,  1700,  1713,    -1,  1685,   598,  1700,  1682,
      -1,    -1,   655,     7,  1626,    -1,    -1,   655,     7,   396,
      -1,  1685,    -1,  1683,   683,  1685,    -1,   111,  1269,    -1,
    1624,    -1,  1684,    -1,    -1,   580,    -1,  1689,    -1,    13,
    1688,    -1,    -1,   435,    -1,  1690,    -1,  1689,   683,  1690,
      -1,    -1,   506,  1691,  1705,    -1,    -1,   255,  1692,  1705,
      -1,    -1,   626,  1693,  1705,    -1,    -1,   459,  1694,  1705,
      -1,   137,    -1,   628,    -1,   249,    -1,    14,    -1,   104,
      -1,   153,    -1,   180,    -1,   467,    -1,   520,    -1,   437,
      -1,   192,    -1,   218,   396,    -1,   519,   117,    -1,   572,
      -1,   104,   583,   577,    -1,   296,   577,    -1,   475,   524,
      -1,   475,    69,    -1,   104,   645,    -1,   519,   645,    -1,
     104,   493,    -1,    14,   493,    -1,   104,   629,    -1,   175,
      -1,   603,    -1,   104,   578,    -1,    -1,    18,    -1,  1697,
    1695,  1696,    -1,  1697,    -1,   567,   586,    -1,   267,   586,
      -1,    67,   586,    -1,   676,    -1,  1622,   688,   676,    -1,
     676,   688,   676,    -1,  1615,    -1,  1627,    -1,  1699,   683,
    1627,    -1,  1704,    -1,  1700,   683,  1704,    -1,  1626,    -1,
    1701,   683,  1626,    -1,   644,    -1,   655,    -1,   632,    -1,
      20,    -1,  1627,   240,    50,   586,    -1,  1627,   240,    50,
     418,   586,    -1,  1627,   240,  1702,  1624,    -1,  1627,   240,
    1702,  1624,  1703,  1619,    -1,  1626,    -1,    -1,   681,  1706,
     682,    -1,  1706,   683,  1707,    -1,  1707,    -1,  1622,    -1,
      -1,   476,  1696,    -1,   476,   549,    -1,   476,   661,    -1,
     476,   373,    -1,   329,  1424,    -1,   333,  1424,    -1,   328,
    1424,    -1,   335,  1423,    -1,   334,  1596,    -1,  1710,  1709,
      -1,  1709,    -1,    -1,   655,  1710,    -1,    -1,   655,  1714,
      -1,    -1,   655,   218,   396,    -1,  1714,  1715,    -1,  1715,
      -1,   218,   396,    -1,  1709,    -1,    -1,    34,  1717,  1720,
      -1,   806,    -1,    -1,  1276,    -1,    -1,   658,    -1,    -1,
      18,   377,    59,    -1,    18,    59,    -1,    -1,   466,    -1,
     377,   466,    -1,    -1,   500,    -1,    85,  1720,  1721,  1722,
      -1,   491,  1720,  1721,  1722,    -1,   491,  1720,   598,  1723,
    1622,    -1,   500,  1622,    -1,   466,   500,  1622,    -1,    -1,
    1729,    -1,    -1,   620,  1737,  1730,  1231,    -1,    -1,   620,
    1737,  1732,  1762,    -1,    -1,  1734,  1735,    -1,  1412,  1416,
      -1,  1418,    -1,   620,  1737,    -1,    -1,   148,    -1,    13,
      -1,   506,  1354,  1254,    -1,  1738,  1735,  1260,    -1,   681,
    1238,   682,  1733,    -1,  1738,  1260,    -1,   681,  1238,   682,
      -1,  1739,    -1,  1740,    -1,  1740,  1353,    -1,  1743,  1598,
    1741,  1744,    -1,    -1,    -1,    -1,  1746,    -1,  1746,  1747,
      -1,  1747,    -1,   563,    -1,   231,    -1,   148,    -1,   545,
      -1,   540,    -1,   541,    -1,   543,    -1,    13,    -1,  1753,
    1749,    -1,  1752,  1750,    -1,  1754,  1751,  1756,    -1,  1756,
      -1,  1766,    -1,  1780,    -1,  1774,    -1,   736,    -1,  1756,
      -1,  1766,    -1,  1780,    -1,  1774,    -1,  1772,    -1,   736,
      -1,  1752,    -1,  1753,    -1,    -1,   134,   669,  1626,    -1,
      12,   669,   613,    -1,    12,   669,   342,    -1,    12,   669,
     584,    -1,    -1,   546,   505,   134,    -1,   546,   505,   261,
      -1,    -1,  1755,   645,   980,  1615,  1757,  1758,    20,  1760,
      -1,    -1,   681,  1759,   682,    -1,  1622,    -1,  1759,   683,
    1622,    -1,    -1,  1761,  1598,  1762,  1763,    -1,   506,  1251,
    1244,    -1,   681,  1236,   682,    -1,   681,  1236,   682,  1733,
      -1,   681,  1236,   682,  1731,    -1,    -1,   655,    66,   396,
      -1,   655,    55,    66,   396,    -1,   655,   293,    66,   396,
      -1,   199,    -1,   428,    -1,    -1,  1764,  1624,    -1,    -1,
      -1,    -1,    -1,    -1,   603,  1264,   980,  1767,   749,   864,
     865,   389,  1264,  1768,  1615,   203,  1264,  1769,   158,   494,
    1770,  1765,  1771,   805,    -1,    11,  1773,    -1,  1773,    -1,
     209,   980,  1622,   485,   993,   532,  1619,    -1,    -1,    -1,
      -1,    -1,    -1,   209,   980,   749,   681,  1775,   760,   682,
    1776,   485,  1777,  1053,  1778,   751,  1779,   804,    -1,    -1,
      -1,    -1,    -1,   436,   980,   749,  1781,   681,  1782,   764,
     682,  1783,   751,  1784,   805,    -1,   662,  1787,  1786,  1788,
      -1,   662,   163,  1786,  1790,    -1,   662,   431,  1786,    -1,
     662,    85,  1786,  1789,    -1,   662,   491,  1786,    -1,   662,
     454,    -1,  1591,    -1,  1591,   683,  1591,    -1,  1591,   683,
    1591,   683,  1424,    -1,    34,    -1,   552,    -1,    -1,   269,
      -1,   482,    -1,    -1,   390,   421,    -1,    -1,    -1,   573,
    1791,  1792,    -1,    -1,   203,   345,    -1,   257,   423,  1622,
     532,  1619,    -1,   257,   532,  1619,    -1,   619,   423,  1622,
      -1,   619,   532,  1619,    -1,   668,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  2086,  2086,  2096,  2095,  2120,  2127,  2129,  2133,  2134,
    2135,  2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,  2148,
    2149,  2150,  2151,  2152,  2153,  2154,  2155,  2156,  2157,  2158,
    2159,  2160,  2161,  2162,  2163,  2164,  2165,  2166,  2167,  2168,
    2169,  2170,  2171,  2172,  2173,  2174,  2175,  2176,  2177,  2178,
    2179,  2180,  2181,  2182,  2183,  2184,  2185,  2186,  2187,  2188,
    2189,  2190,  2191,  2192,  2193,  2194,  2195,  2199,  2208,  2209,
    2213,  2225,  2225,  2235,  2234,  2243,  2242,  2253,  2255,  2255,
    2266,  2267,  2271,  2282,  2281,  2298,  2297,  2306,  2307,  2311,
    2315,  2319,  2323,  2327,  2331,  2341,  2346,  2350,  2354,  2358,
    2362,  2366,  2371,  2375,  2380,  2407,  2411,  2415,  2420,  2423,
    2425,  2426,  2430,  2436,  2438,  2439,  2443,  2449,  2451,  2452,
    2456,  2463,  2467,  2482,  2486,  2492,  2498,  2504,  2514,  2518,
    2522,  2536,  2535,  2574,  2571,  2584,  2582,  2594,  2592,  2603,
    2602,  2615,  2614,  2623,  2629,  2635,  2639,  2643,  2643,  2650,
    2649,  2661,  2662,  2666,  2671,  2677,  2682,  2687,  2692,  2697,
    2705,  2704,  2736,  2735,  2742,  2749,  2750,  2756,  2762,  2772,
    2778,  2784,  2786,  2793,  2794,  2798,  2808,  2809,  2817,  2817,
    2861,  2875,  2886,  2904,  2905,  2909,  2910,  2915,  2917,  2919,
    2921,  2923,  2925,  2927,  2933,  2934,  2938,  2942,  2950,  2949,
    2962,  2964,  2967,  2969,  2973,  2977,  2984,  2986,  2990,  2991,
    2996,  2995,  3026,  3028,  3032,  3033,  3037,  3041,  3042,  3043,
    3044,  3048,  3049,  3053,  3054,  3059,  3062,  3081,  3080,  3150,
    3163,  3162,  3221,  3243,  3243,  3262,  3263,  3268,  3270,  3275,
    3290,  3298,  3302,  3321,  3322,  3326,  3330,  3336,  3342,  3348,
    3357,  3371,  3386,  3392,  3393,  3399,  3402,  3406,  3414,  3431,
    3433,  3451,  3457,  3459,  3461,  3463,  3465,  3467,  3469,  3471,
    3473,  3475,  3477,  3479,  3484,  3499,  3515,  3516,  3521,  3527,
    3536,  3542,  3551,  3559,  3568,  3577,  3579,  3588,  3593,  3599,
    3608,  3616,  3618,  3620,  3622,  3624,  3626,  3628,  3630,  3632,
    3634,  3636,  3638,  3640,  3645,  3657,  3672,  3673,  3686,  3687,
    3688,  3689,  3690,  3694,  3695,  3696,  3697,  3698,  3699,  3700,
    3704,  3705,  3706,  3707,  3712,  3711,  3722,  3722,  3775,  3774,
    3799,  3849,  3890,  3909,  3908,  3928,  3945,  3947,  3948,  3952,
    3966,  3983,  3985,  4001,  3983,  4020,  4022,  4023,  4028,  4027,
    4097,  4099,  4097,  4108,  4113,  4114,  4118,  4119,  4124,  4128,
    4123,  4149,  4153,  4148,  4172,  4182,  4186,  4187,  4192,  4191,
    4213,  4212,  4222,  4221,  4232,  4232,  4272,  4287,  4286,  4318,
    4317,  4337,  4351,  4360,  4359,  4367,  4366,  4375,  4374,  4385,
    4384,  4393,  4392,  4402,  4401,  4412,  4414,  4419,  4421,  4423,
    4440,  4445,  4451,  4458,  4459,  4467,  4473,  4482,  4488,  4494,
    4495,  4499,  4499,  4504,  4505,  4506,  4510,  4511,  4512,  4516,
    4520,  4521,  4522,  4526,  4527,  4528,  4529,  4530,  4531,  4532,
    4533,  4537,  4541,  4542,  4543,  4547,  4548,  4549,  4550,  4551,
    4555,  4559,  4560,  4561,  4565,  4566,  4567,  4568,  4569,  4570,
    4571,  4575,  4579,  4580,  4581,  4585,  4586,  4587,  4592,  4600,
    4608,  4616,  4629,  4642,  4647,  4652,  4660,  4668,  4676,  4684,
    4692,  4700,  4708,  4718,  4728,  4738,  4740,  4744,  4749,  4759,
    4760,  4803,  4802,  4805,  4811,  4813,  4812,  4815,  4814,  4816,
    4830,  4831,  4835,  4836,  4842,  4840,  4847,  4852,  4854,  4853,
    4856,  4855,  4860,  4897,  4898,  4903,  4902,  4921,  4936,  4935,
    4953,  4952,  4958,  4966,  4965,  4968,  4970,  4972,  4974,  4979,
    4980,  4986,  4987,  5004,  5005,  5009,  5010,  5014,  5030,  5040,
    5051,  5060,  5061,  5074,  5076,  5075,  5080,  5078,  5089,  5090,
    5094,  5109,  5121,  5122,  5135,  5144,  5166,  5167,  5172,  5171,
    5196,  5208,  5224,  5223,  5238,  5237,  5251,  5275,  5297,  5301,
    5330,  5342,  5343,  5348,  5359,  5347,  5384,  5385,  5389,  5402,
    5423,  5436,  5462,  5463,  5468,  5467,  5505,  5514,  5515,  5519,
    5520,  5524,  5526,  5532,  5538,  5540,  5542,  5544,  5546,  5548,
    5557,  5565,  5565,  5586,  5587,  5591,  5592,  5596,  5607,  5608,
    5612,  5613,  5617,  5618,  5622,  5623,  5628,  5631,  5639,  5642,
    5649,  5653,  5659,  5661,  5665,  5666,  5670,  5671,  5672,  5676,
    5681,  5686,  5691,  5696,  5701,  5706,  5711,  5726,  5732,  5747,
    5752,  5767,  5773,  5791,  5796,  5801,  5806,  5811,  5816,  5822,
    5821,  5847,  5848,  5849,  5854,  5859,  5864,  5866,  5868,  5870,
    5876,  5881,  5886,  5894,  5902,  5908,  5917,  5925,  5942,  5963,
    5974,  5975,  5976,  5977,  5978,  5979,  5980,  5984,  5985,  5986,
    5990,  5991,  5992,  5993,  5998,  6005,  6006,  6010,  6011,  6012,
    6016,  6018,  6024,  6023,  6031,  6030,  6038,  6037,  6045,  6044,
    6054,  6051,  6062,  6060,  6069,  6068,  6106,  6113,  6114,  6118,
    6131,  6132,  6136,  6141,  6140,  6174,  6174,  6176,  6175,  6187,
    6188,  6192,  6193,  6198,  6200,  6199,  6208,  6209,  6214,  6217,
    6221,  6225,  6232,  6233,  6237,  6238,  6242,  6248,  6254,  6259,
    6258,  6277,  6283,  6284,  6294,  6306,  6306,  6309,  6310,  6318,
    6319,  6320,  6336,  6340,  6344,  6348,  6352,  6357,  6362,  6366,
    6371,  6376,  6394,  6396,  6399,  6416,  6419,  6424,  6429,  6440,
    6445,  6450,  6455,  6457,  6459,  6461,  6463,  6465,  6467,  6469,
    6471,  6473,  6475,  6480,  6481,  6482,  6483,  6484,  6485,  6486,
    6487,  6491,  6495,  6496,  6500,  6501,  6505,  6506,  6507,  6508,
    6509,  6513,  6514,  6515,  6516,  6517,  6521,  6526,  6528,  6534,
    6536,  6543,  6544,  6545,  6549,  6553,  6554,  6558,  6559,  6563,
    6564,  6565,  6569,  6570,  6571,  6572,  6575,  6576,  6579,  6580,
    6583,  6584,  6588,  6589,  6593,  6594,  6598,  6599,  6600,  6607,
    6608,  6614,  6621,  6625,  6626,  6632,  6638,  6644,  6645,  6653,
    6661,  6667,  6676,  6690,  6691,  6695,  6700,  6704,  6705,  6709,
    6710,  6714,  6720,  6724,  6725,  6729,  6737,  6738,  6742,  6743,
    6747,  6748,  6752,  6753,  6754,  6762,  6763,  6764,  6765,  6766,
    6770,  6771,  6776,  6775,  6788,  6789,  6793,  6796,  6797,  6798,
    6799,  6803,  6811,  6818,  6819,  6823,  6833,  6834,  6838,  6839,
    6842,  6844,  6848,  6860,  6861,  6865,  6872,  6885,  6886,  6888,
    6890,  6896,  6901,  6907,  6913,  6920,  6930,  6931,  6932,  6933,
    6934,  6938,  6939,  6943,  6944,  6948,  6949,  6953,  6954,  6955,
    6959,  6960,  6964,  6968,  6980,  6981,  6985,  6986,  6990,  6991,
    6995,  6996,  7000,  7001,  7005,  7006,  7010,  7011,  7015,  7016,
    7017,  7020,  7022,  7027,  7029,  7031,  7039,  7047,  7053,  7061,
    7062,  7066,  7070,  7071,  7081,  7082,  7083,  7087,  7091,  7098,
    7104,  7116,  7117,  7121,  7122,  7126,  7128,  7137,  7151,  7136,
    7171,  7170,  7184,  7193,  7192,  7208,  7207,  7223,  7222,  7238,
    7232,  7249,  7248,  7283,  7288,  7293,  7298,  7304,  7303,  7310,
    7319,  7320,  7321,  7322,  7326,  7327,  7339,  7340,  7344,  7345,
    7348,  7350,  7358,  7366,  7368,  7370,  7371,  7379,  7380,  7386,
    7395,  7393,  7406,  7419,  7418,  7431,  7429,  7442,  7449,  7459,
    7460,  7487,  7494,  7498,  7504,  7502,  7521,  7523,  7528,  7536,
    7535,  7551,  7555,  7554,  7566,  7567,  7571,  7587,  7588,  7592,
    7600,  7605,  7610,  7615,  7619,  7624,  7632,  7640,  7650,  7661,
    7671,  7682,  7692,  7698,  7704,  7713,  7723,  7739,  7753,  7763,
    7767,  7772,  7773,  7776,  7778,  7779,  7780,  7781,  7784,  7789,
    7797,  7802,  7810,  7811,  7815,  7816,  7820,  7820,  7823,  7825,
    7829,  7830,  7834,  7835,  7843,  7844,  7845,  7849,  7850,  7855,
    7863,  7864,  7865,  7866,  7871,  7870,  7880,  7879,  7887,  7894,
    7904,  7921,  7924,  7931,  7935,  7942,  7946,  7950,  7957,  7957,
    7963,  7964,  7968,  7969,  7970,  7974,  7975,  7984,  7991,  7992,
    7997,  7996,  8008,  8009,  8010,  8014,  8015,  8015,  8020,  8019,
    8040,  8041,  8045,  8046,  8050,  8051,  8052,  8056,  8057,  8062,
    8061,  8082,  8083,  8087,  8092,  8093,  8100,  8102,  8106,  8108,
    8107,  8119,  8121,  8120,  8133,  8134,  8139,  8148,  8149,  8150,
    8154,  8161,  8171,  8179,  8180,  8180,  8184,  8183,  8206,  8207,
    8211,  8212,  8216,  8217,  8218,  8219,  8220,  8221,  8225,  8226,
    8231,  8230,  8251,  8252,  8253,  8258,  8257,  8263,  8270,  8276,
    8285,  8286,  8290,  8304,  8303,  8316,  8317,  8321,  8322,  8326,
    8336,  8346,  8347,  8352,  8351,  8362,  8363,  8367,  8368,  8372,
    8382,  8393,  8392,  8400,  8400,  8409,  8410,  8415,  8416,  8425,
    8434,  8435,  8436,  8437,  8441,  8442,  8443,  8444,  8448,  8448,
    8460,  8464,  8464,  8476,  8480,  8480,  8492,  8497,  8497,  8509,
    8515,  8513,  8520,  8532,  8530,  8537,  8547,  8552,  8551,  8556,
    8560,  8571,  8572,  8576,  8577,  8581,  8582,  8583,  8587,  8588,
    8589,  8593,  8594,  8595,  8596,  8597,  8601,  8601,  8619,  8626,
    8628,  8632,  8636,  8642,  8649,  8651,  8659,  8660,  8664,  8665,
    8682,  8701,  8703,  8710,  8721,  8722,  8723,  8737,  8742,  8764,
    8770,  8776,  8782,  8783,  8784,  8785,  8786,  8790,  8791,  8792,
    8796,  8797,  8798,  8802,  8803,  8808,  8859,  8866,  8909,  8915,
    8921,  8927,  8933,  8939,  8945,  8951,  8955,  8961,  8967,  8973,
    8979,  8985,  8989,  8995,  9004,  9010,  9018,  9024,  9033,  9039,
    9047,  9057,  9064,  9072,  9078,  9087,  9091,  9097,  9103,  9109,
    9115,  9121,  9127,  9133,  9139,  9145,  9151,  9157,  9163,  9169,
    9175,  9179,  9180,  9184,  9185,  9189,  9190,  9194,  9195,  9199,
    9200,  9201,  9202,  9203,  9204,  9208,  9209,  9214,  9218,  9222,
    9223,  9224,  9228,  9229,  9230,  9231,  9232,  9233,  9237,  9238,
    9239,  9244,  9243,  9249,  9257,  9279,  9286,  9322,  9323,  9324,
    9325,  9326,  9327,  9328,  9329,  9330,  9331,  9332,  9339,  9345,
    9369,  9379,  9387,  9393,  9400,  9406,  9416,  9426,  9427,  9438,
    9439,  9446,  9452,  9456,  9462,  9468,  9474,  9490,  9496,  9502,
    9511,  9520,  9526,  9532,  9538,  9544,  9558,  9569,  9575,  9581,
    9587,  9593,  9599,  9606,  9613,  9619,  9625,  9631,  9637,  9643,
    9649,  9655,  9661,  9667,  9675,  9696,  9703,  9709,  9716,  9723,
    9730,  9737,  9743,  9749,  9756,  9762,  9769,  9775,  9781,  9787,
    9793,  9799,  9817,  9823,  9829,  9836,  9843,  9851,  9858,  9865,
    9872,  9879,  9896,  9902,  9908,  9914,  9920,  9927,  9933,  9939,
    9948,  9959,  9966,  9972,  9978,  9985,  9993,  9999, 10005, 10011,
   10017, 10025, 10031, 10037, 10043, 10049, 10057, 10069, 10076, 10091,
   10097, 10104, 10111, 10118, 10125, 10132, 10136, 10156, 10155, 10227,
   10265, 10267, 10272, 10273, 10277, 10278, 10282, 10283, 10287, 10294,
   10302, 10329, 10335, 10341, 10347, 10353, 10359, 10368, 10375, 10377,
   10374, 10384, 10395, 10401, 10407, 10413, 10419, 10425, 10431, 10437,
   10443, 10450, 10449, 10468, 10477, 10495, 10497, 10504, 10511, 10518,
   10525, 10532, 10539, 10546, 10553, 10560, 10567, 10578, 10585, 10596,
   10605, 10615, 10614, 10626, 10636, 10644, 10660, 10661, 10666, 10671,
   10674, 10676, 10680, 10682, 10688, 10687, 10704, 10707, 10706, 10710,
   10715, 10716, 10720, 10721, 10722, 10723, 10724, 10725, 10726, 10730,
   10731, 10732, 10736, 10737, 10741, 10748, 10756, 10757, 10761, 10768,
   10776, 10777, 10781, 10782, 10786, 10794, 10805, 10806, 10818, 10829,
   10830, 10836, 10837, 10857, 10861, 10859, 10877, 10875, 10886, 10896,
   10894, 10912, 10911, 10921, 10932, 10930, 10949, 10948, 10959, 10971,
   10972, 10973, 10977, 10978, 10986, 10987, 10991, 11006, 11007, 11011,
   11011, 11047, 11111, 11151, 11152, 11161, 11160, 11169, 11170, 11171,
   11175, 11176, 11177, 11177, 11181, 11187, 11195, 11195, 11210, 11232,
   11241, 11258, 11241, 11265, 11269, 11278, 11289, 11290, 11295, 11298,
   11299, 11300, 11304, 11305, 11310, 11309, 11315, 11314, 11322, 11323,
   11326, 11328, 11328, 11332, 11332, 11337, 11338, 11342, 11344, 11349,
   11350, 11354, 11365, 11378, 11379, 11380, 11381, 11382, 11383, 11384,
   11385, 11386, 11387, 11388, 11389, 11393, 11394, 11395, 11396, 11397,
   11398, 11399, 11400, 11401, 11405, 11406, 11407, 11408, 11411, 11413,
   11414, 11418, 11419, 11427, 11429, 11433, 11435, 11434, 11448, 11451,
   11450, 11465, 11471, 11485, 11487, 11491, 11493, 11498, 11499, 11516,
   11539, 11540, 11546, 11547, 11551, 11564, 11563, 11571, 11572, 11580,
   11581, 11585, 11586, 11590, 11591, 11605, 11606, 11610, 11620, 11629,
   11636, 11643, 11653, 11654, 11661, 11671, 11672, 11674, 11676, 11678,
   11687, 11691, 11692, 11696, 11708, 11710, 11715, 11714, 11764, 11766,
   11771, 11772, 11773, 11777, 11778, 11782, 11795, 11802, 11807, 11814,
   11821, 11828, 11838, 11865, 11869, 11875, 11881, 11890, 11898, 11902,
   11909, 11910, 11914, 11915, 11916, 11920, 11921, 11922, 11923, 11924,
   11925, 11929, 11930, 11931, 11932, 11933, 11937, 11938, 11939, 11940,
   11941, 11945, 11946, 11947, 11948, 11949, 11953, 11958, 11959, 11963,
   11964, 11969, 11968, 12002, 12003, 12007, 12008, 12012, 12022, 12022,
   12033, 12034, 12037, 12057, 12061, 12075, 12080, 12090, 12079, 12092,
   12105, 12117, 12116, 12134, 12133, 12142, 12142, 12159, 12165, 12180,
   12196, 12204, 12208, 12213, 12212, 12221, 12226, 12232, 12237, 12242,
   12250, 12251, 12255, 12266, 12279, 12280, 12284, 12296, 12300, 12309,
   12312, 12319, 12320, 12328, 12336, 12327, 12346, 12353, 12345, 12363,
   12371, 12372, 12380, 12384, 12385, 12396, 12397, 12401, 12410, 12411,
   12412, 12414, 12413, 12424, 12426, 12430, 12431, 12432, 12436, 12437,
   12441, 12442, 12446, 12456, 12457, 12461, 12462, 12467, 12466, 12480,
   12481, 12485, 12490, 12498, 12499, 12505, 12513, 12515, 12515, 12523,
   12531, 12522, 12553, 12554, 12558, 12566, 12567, 12571, 12581, 12582,
   12589, 12588, 12604, 12615, 12603, 12618, 12617, 12629, 12628, 12641,
   12643, 12647, 12648, 12652, 12665, 12681, 12682, 12686, 12687, 12691,
   12692, 12693, 12698, 12697, 12718, 12720, 12723, 12725, 12728, 12729,
   12732, 12736, 12740, 12744, 12748, 12752, 12756, 12760, 12764, 12772,
   12775, 12785, 12784, 12800, 12807, 12815, 12823, 12831, 12839, 12847,
   12854, 12861, 12867, 12869, 12871, 12880, 12884, 12889, 12888, 12895,
   12894, 12899, 12908, 12915, 12920, 12925, 12930, 12932, 12934, 12936,
   12938, 12940, 12947, 12955, 12957, 12965, 12972, 12979, 12986, 12992,
   12997, 13005, 13013, 13017, 13022, 13029, 13034, 13041, 13048, 13054,
   13061, 13066, 13073, 13080, 13085, 13090, 13095, 13102, 13124, 13126,
   13128, 13133, 13134, 13137, 13139, 13143, 13144, 13148, 13149, 13153,
   13154, 13158, 13159, 13163, 13164, 13168, 13169, 13177, 13189, 13188,
   13204, 13203, 13213, 13214, 13215, 13216, 13217, 13221, 13222, 13226,
   13233, 13234, 13235, 13239, 13240, 13252, 13253, 13254, 13269, 13268,
   13281, 13280, 13292, 13296, 13297, 13310, 13313, 13312, 13324, 13325,
   13330, 13332, 13334, 13336, 13338, 13340, 13348, 13350, 13352, 13354,
   13359, 13361, 13369, 13371, 13373, 13375, 13391, 13392, 13396, 13397,
   13401, 13400, 13410, 13411, 13415, 13415, 13419, 13418, 13424, 13428,
   13429, 13433, 13434, 13442, 13441, 13452, 13456, 13460, 13473, 13472,
   13487, 13488, 13489, 13492, 13493, 13494, 13495, 13503, 13507, 13516,
   13522, 13534, 13545, 13555, 13565, 13533, 13573, 13574, 13578, 13579,
   13583, 13584, 13592, 13596, 13597, 13598, 13601, 13603, 13607, 13608,
   13612, 13617, 13624, 13629, 13636, 13638, 13642, 13643, 13647, 13652,
   13660, 13661, 13664, 13666, 13674, 13675, 13679, 13680, 13681, 13685,
   13687, 13692, 13693, 13702, 13703, 13707, 13708, 13712, 13725, 13749,
   13761, 13768, 13787, 13795, 13800, 13813, 13822, 13838, 13855, 13856,
   13864, 13865, 13866, 13867, 13881, 13887, 13893, 13899, 13905, 13911,
   13929, 13939, 13949, 13955, 13964, 13976, 13982, 13988, 13998, 13999,
   14008, 14007, 14026, 14027, 14032, 14033, 14040, 14038, 14059, 14060,
   14066, 14071, 14080, 14095, 14096, 14100, 14109, 14124, 14128, 14171,
   14175, 14192, 14196, 14268, 14292, 14322, 14323, 14333, 14340, 14344,
   14350, 14356, 14366, 14372, 14381, 14391, 14392, 14417, 14431, 14445,
   14460, 14461, 14471, 14472, 14482, 14483, 14484, 14488, 14501, 14531,
   14541, 14541, 14543, 14553, 14554, 14555, 14556, 14557, 14558, 14559,
   14560, 14561, 14562, 14563, 14564, 14565, 14566, 14567, 14568, 14569,
   14570, 14571, 14572, 14573, 14574, 14575, 14576, 14577, 14578, 14579,
   14580, 14581, 14582, 14583, 14584, 14585, 14586, 14587, 14588, 14589,
   14590, 14591, 14592, 14593, 14594, 14595, 14596, 14597, 14598, 14599,
   14600, 14601, 14602, 14603, 14604, 14605, 14606, 14607, 14608, 14609,
   14610, 14611, 14612, 14613, 14614, 14615, 14616, 14617, 14618, 14619,
   14620, 14621, 14622, 14623, 14633, 14634, 14635, 14636, 14637, 14638,
   14639, 14640, 14641, 14642, 14643, 14644, 14645, 14646, 14647, 14648,
   14649, 14650, 14651, 14652, 14653, 14654, 14655, 14656, 14657, 14658,
   14659, 14660, 14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668,
   14669, 14670, 14671, 14672, 14673, 14674, 14675, 14676, 14677, 14678,
   14679, 14680, 14681, 14686, 14687, 14688, 14689, 14690, 14691, 14692,
   14693, 14694, 14695, 14696, 14697, 14698, 14699, 14700, 14701, 14702,
   14703, 14704, 14705, 14706, 14707, 14708, 14709, 14710, 14711, 14712,
   14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721, 14722,
   14723, 14724, 14725, 14726, 14727, 14728, 14729, 14730, 14731, 14732,
   14733, 14734, 14735, 14736, 14737, 14738, 14739, 14740, 14741, 14742,
   14743, 14744, 14745, 14746, 14747, 14748, 14749, 14750, 14751, 14752,
   14753, 14754, 14755, 14756, 14757, 14758, 14759, 14760, 14761, 14762,
   14763, 14764, 14765, 14766, 14767, 14768, 14769, 14770, 14771, 14772,
   14773, 14774, 14775, 14776, 14777, 14778, 14779, 14780, 14781, 14782,
   14783, 14784, 14785, 14786, 14787, 14788, 14789, 14790, 14791, 14792,
   14793, 14794, 14795, 14796, 14797, 14798, 14799, 14800, 14801, 14802,
   14803, 14804, 14805, 14806, 14807, 14808, 14809, 14810, 14811, 14812,
   14813, 14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821, 14822,
   14823, 14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831, 14832,
   14833, 14834, 14835, 14836, 14837, 14838, 14839, 14840, 14841, 14842,
   14843, 14844, 14845, 14846, 14847, 14848, 14849, 14850, 14851, 14852,
   14853, 14854, 14855, 14856, 14857, 14858, 14859, 14860, 14861, 14862,
   14863, 14864, 14865, 14866, 14867, 14868, 14869, 14870, 14871, 14872,
   14873, 14874, 14875, 14876, 14877, 14878, 14879, 14880, 14881, 14882,
   14883, 14884, 14885, 14886, 14887, 14888, 14889, 14890, 14891, 14892,
   14893, 14894, 14895, 14896, 14897, 14898, 14899, 14900, 14901, 14902,
   14903, 14904, 14905, 14906, 14907, 14908, 14909, 14910, 14911, 14912,
   14913, 14914, 14915, 14916, 14917, 14918, 14919, 14920, 14921, 14922,
   14923, 14924, 14925, 14926, 14927, 14928, 14929, 14930, 14931, 14932,
   14933, 14934, 14935, 14936, 14937, 14938, 14939, 14940, 14941, 14942,
   14943, 14944, 14945, 14946, 14958, 14957, 14970, 14978, 14969, 14995,
   14996, 15001, 15000, 15007, 15006, 15016, 15015, 15026, 15025, 15031,
   15039, 15041, 15046, 15046, 15055, 15054, 15068, 15067, 15072, 15076,
   15077, 15078, 15082, 15083, 15084, 15085, 15089, 15090, 15091, 15092,
   15097, 15121, 15147, 15158, 15170, 15184, 15199, 15218, 15235, 15247,
   15255, 15271, 15297, 15334, 15348, 15349, 15350, 15351, 15355, 15373,
   15391, 15392, 15396, 15397, 15398, 15399, 15403, 15417, 15421, 15422,
   15423, 15433, 15434, 15435, 15441, 15447, 15459, 15458, 15471, 15472,
   15476, 15477, 15481, 15496, 15497, 15498, 15503, 15504, 15509, 15508,
   15525, 15534, 15544, 15543, 15574, 15575, 15579, 15580, 15584, 15585,
   15586, 15587, 15589, 15588, 15601, 15602, 15603, 15604, 15605, 15611,
   15616, 15622, 15633, 15644, 15648, 15655, 15664, 15666, 15671, 15676,
   15683, 15695, 15707, 15714, 15726, 15727, 15730, 15731, 15734, 15739,
   15747, 15757, 15776, 15779, 15781, 15785, 15786, 15793, 15795, 15799,
   15800, 15805, 15804, 15808, 15807, 15811, 15810, 15814, 15813, 15816,
   15817, 15818, 15819, 15820, 15821, 15822, 15823, 15824, 15825, 15826,
   15827, 15828, 15829, 15830, 15831, 15832, 15833, 15834, 15835, 15836,
   15837, 15838, 15839, 15840, 15841, 15845, 15846, 15850, 15851, 15855,
   15862, 15869, 15879, 15890, 15899, 15908, 15920, 15925, 15933, 15938,
   15946, 15951, 15958, 15958, 15959, 15959, 15962, 15969, 15974, 15980,
   15986, 15992, 15996, 16000, 16001, 16005, 16033, 16035, 16039, 16043,
   16047, 16054, 16060, 16066, 16072, 16078, 16087, 16088, 16092, 16093,
   16098, 16099, 16103, 16104, 16108, 16109, 16113, 16114, 16119, 16118,
   16128, 16137, 16138, 16142, 16143, 16148, 16149, 16150, 16155, 16156,
   16157, 16161, 16162, 16166, 16178, 16187, 16197, 16206, 16220, 16221,
   16226, 16225, 16242, 16241, 16253, 16253, 16274, 16275, 16282, 16290,
   16291, 16292, 16305, 16312, 16313, 16317, 16318, 16322, 16323, 16324,
   16329, 16337, 16358, 16382, 16384, 16388, 16389, 16393, 16394, 16402,
   16403, 16404, 16405, 16411, 16417, 16427, 16429, 16431, 16436, 16437,
   16438, 16439, 16440, 16444, 16445, 16446, 16447, 16448, 16449, 16459,
   16460, 16465, 16478, 16494, 16496, 16498, 16504, 16505, 16507, 16513,
   16512, 16531, 16532, 16536, 16542, 16551, 16551, 16576, 16577, 16578,
   16579, 16584, 16585, 16587, 16589, 16600, 16602, 16608, 16614, 16625,
   16634, 16640, 16645, 16649, 16622, 16701, 16702, 16706, 16726, 16747,
   16751, 16757, 16762, 16722, 16821, 16833, 16842, 16846, 16820, 16863,
   16867, 16871, 16875, 16879, 16883, 16890, 16897, 16904, 16914, 16915,
   16919, 16920, 16921, 16925, 16926, 16931, 16933, 16932, 16938, 16939,
   16943, 16950, 16960, 16966, 16977
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "ATOMIC_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM",
  "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CUME_DIST_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DENSE_RANK_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM",
  "DO_DOMAIN_IDS_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE",
  "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM",
  "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT",
  "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXCHANGE_SYM", "EXAMINED_SYM", "EXCLUDE_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_VALUE_SYM", "FIRST_SYM", "FIXED_SYM",
  "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FOLLOWS_SYM", "FOLLOWING_SYM",
  "FORCE_SYM", "FOREIGN", "FOR_SYM", "FORMAT_SYM", "FOUND_SYM", "FROM",
  "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM",
  "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM",
  "LAG_SYM", "LEAD_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF_SYM", "IGNORE_DOMAIN_IDS_SYM", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMMEDIATE_SYM", "IMPORT", "INDEXES",
  "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "JSON_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM",
  "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES",
  "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE",
  "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_STATEMENT_TIME_SYM", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NTILE_SYM", "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM",
  "NTH_VALUE_SYM", "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD_SYM", "ON",
  "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OTHERS_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD_SYM", "PERCENT_RANK_SYM", "PERSISTENT_SYM", "PHASE_SYM",
  "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM",
  "POSITION_SYM", "PRECEDES_SYM", "PRECEDING_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "RANK_SYM", "READS_SYM", "READ_ONLY_SYM",
  "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM",
  "RECURSIVE_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROW_SYM", "ROWS_SYM", "ROW_COUNT_SYM",
  "ROW_FORMAT_SYM", "ROW_NUMBER_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM",
  "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM",
  "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM",
  "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM",
  "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW",
  "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM",
  "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM",
  "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT",
  "SQL_BUFFER_RESULT", "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "REF_SYSTEM_ID_SYM", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATEMENT_SYM", "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STORED_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIES_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNBOUNDED_SYM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER_SYM", "USE_FRM", "USE_SYM", "USING", "UTC_DATE_SYM",
  "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES", "VALUE_SYM", "VARBINARY",
  "VARCHAR", "VARIABLES", "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM",
  "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM",
  "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE", "WINDOW_SYM", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'='", "'>'", "'<'", "'|'",
  "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'",
  "','", "'!'", "'{'", "'}'", "';'", "'.'", "'@'", "':'", "$accept",
  "query", "$@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "$@2",
  "execute", "$@3", "$@4", "execute_using", "$@5", "execute_var_list",
  "execute_var_ident", "help", "$@6", "change", "$@7", "master_defs",
  "master_def", "ignore_server_id_list", "ignore_server_id",
  "do_domain_id_list", "do_domain_id", "ignore_domain_id_list",
  "ignore_domain_id", "master_file_def", "optional_connection_name",
  "connection_name", "create", "$@8", "$@9", "$@10", "$@11", "$@12",
  "$@13", "$@14", "server_def", "$@15", "server_options_list",
  "server_option", "event_tail", "$@16", "ev_schedule_time", "$@17",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "$@18",
  "clear_privileges", "sp_name", "sp_a_chistics", "sp_c_chistics",
  "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@19",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_param_name_and_type", "@20", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@21", "$@22",
  "sp_cursor_stmt", "$@23", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt_in_returns_clause", "sp_proc_stmt",
  "sp_proc_stmt_compound_ok", "sp_proc_stmt_if", "$@24",
  "sp_proc_stmt_statement", "$@25", "sp_proc_stmt_return", "$@26",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@27", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@28", "$@29", "$@30", "sp_elseifs",
  "case_stmt_specification", "$@31", "case_stmt_body", "$@32", "$@33",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@34", "$@35", "searched_when_clause", "$@36",
  "$@37", "else_clause_opt", "sp_opt_label", "sp_labeled_block", "$@38",
  "sp_unlabeled_block", "$@39", "sp_unlabeled_block_not_atomic", "$@40",
  "sp_block_content", "$@41", "loop_body", "while_body", "$@42",
  "repeat_body", "$@43", "pop_sp_label", "pop_sp_empty_label",
  "sp_labeled_control", "$@44", "$@45", "$@46", "sp_unlabeled_control",
  "$@47", "$@48", "$@49", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@50", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@51", "$@52", "$@53", "create_like", "opt_create_select",
  "create_select_query_expression", "$@54", "$@55", "$@56",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@57",
  "have_partitioning", "partition_entry", "$@58", "partition", "$@59",
  "part_type_def", "$@60", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@61",
  "$@62", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@63", "part_name", "opt_part_values", "$@64", "$@65", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@66", "$@67",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@68", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select_query_specification", "create_select_part2", "$@69",
  "create_select_part3", "create_select_part3_union_not_ready",
  "create_select_part4", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option",
  "opt_if_not_exists_table_element", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@70", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "udf_type", "create_field_list", "field_list",
  "field_list_item", "column_def", "key_def", "$@71", "$@72", "$@73",
  "$@74", "$@75", "$@76", "$@77", "constraint_def", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "@78",
  "field_type_or_serial", "$@79", "$@80", "opt_serial_attribute",
  "opt_serial_attribute_list", "field_def", "$@81", "opt_generated_always",
  "vcol_opt_specifier", "vcol_opt_attribute", "vcol_opt_attribute_list",
  "vcol_attribute", "parse_vcol_expr", "$@82", "parenthesized_expr",
  "virtual_column_func", "expr_or_literal", "column_default_expr",
  "field_type", "spatial_type", "char", "nchar", "varchar", "nvarchar",
  "int_type", "real_type", "srid_option", "float_options", "precision",
  "field_options", "field_opt_list", "field_option", "field_length",
  "opt_field_length", "opt_field_length_default_1", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute", "serial_attribute",
  "type_with_opt_collate", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "charset_or_alias", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@83", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_unique", "fulltext", "spatial",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "opt_USING_key_algorithm", "opt_key_algorithm_clause", "key_using_alg",
  "all_key_opt", "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@84", "$@85", "$@86", "$@87", "$@88", "$@89",
  "$@90", "$@91", "$@92", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@93", "$@94", "$@95", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@96",
  "add_part_extra", "reorg_partition_rule", "$@97", "reorg_parts_rule",
  "$@98", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "alter_options", "$@99", "alter_options_part2",
  "alter_option_list", "alter_option", "opt_restrict", "opt_place",
  "opt_to", "slave", "$@100", "$@101", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@102",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@103", "opt_checksum_type",
  "repair_table_or_view", "$@104", "repair", "$@105", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@106", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@107", "persistent_index_stat_spec",
  "$@108", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@109", "check", "$@110",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@111", "opt_no_write_to_binlog",
  "rename", "$@112", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@113", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@114", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@115", "cache_keys_spec", "$@116", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "union_list_part2",
  "select_paren", "$@117", "select_paren_union_query_term", "$@118",
  "select_paren_view", "$@119", "select_paren_derived", "$@120",
  "select_init3", "$@121", "select_init3_union_query_term", "$@122",
  "select_init3_view", "$@123", "select_part3",
  "select_part3_union_query_term", "select_part3_view",
  "select_part3_union_not_ready", "select_part3_union_not_ready_noproc",
  "select_options_and_item_list", "$@124", "table_expression",
  "opt_table_expression", "from_clause", "table_reference_list",
  "select_options", "select_option_list", "select_option",
  "opt_select_lock_type", "select_item_list", "select_item",
  "remember_tok_start", "remember_name", "remember_end", "select_alias",
  "opt_default_time_precision", "opt_time_precision", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type",
  "numeric_dyncol_type", "temporal_dyncol_type", "string_dyncol_type",
  "$@125", "dyncall_create_element", "dyncall_create_list",
  "column_default_non_parenthesized_expr", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@126", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@127", "$@128", "$@129", "window_func_expr", "window_func",
  "simple_window_func", "window_name", "variable", "$@130", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "gorder_list", "in_sum_expr", "$@131", "cast_type", "$@132",
  "cast_type_numeric", "cast_type_temporal", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@133", "$@134", "$@135", "$@136", "$@137", "$@138",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "table_primary_ident", "$@139", "table_primary_derived",
  "select_derived_union", "$@140", "union_list_derived_part2", "$@141",
  "union_list_derived", "select_init2_derived", "select_part2_derived",
  "$@142", "select_derived", "derived_query_specification",
  "select_derived2", "$@143", "$@144", "get_select_lex",
  "get_select_lex_derived", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@145",
  "$@146", "index_hints_list", "opt_index_hints_list", "$@147",
  "opt_key_definition", "$@148", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "opt_where_clause", "$@149", "opt_having_clause", "$@150", "opt_escape",
  "opt_group_clause", "group_list", "olap_opt", "opt_window_clause",
  "window_def_list", "window_def", "window_spec", "$@151",
  "opt_window_ref", "opt_window_partition_clause",
  "opt_window_order_clause", "opt_window_frame_clause",
  "window_frame_units", "window_frame_extent", "window_frame_start",
  "window_frame_bound", "opt_window_frame_exclusion", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@152", "order_list", "order_dir", "opt_limit_clause",
  "limit_clause_init", "limit_clause", "limit_options", "limit_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "procedure_clause", "$@153", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@154",
  "select_var_list", "select_var_ident", "select_outvar", "into",
  "into_destination", "$@155", "$@156", "do", "$@157", "drop", "$@158",
  "$@159", "$@160", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists_table_element", "opt_if_exists",
  "opt_temporary", "insert", "$@161", "$@162", "replace", "$@163", "$@164",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "$@165", "fields", "insert_values", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@166", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@167", "update", "$@168", "$@169", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@170", "single_multi", "$@171", "$@172", "$@173", "$@174",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@175", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@176", "show_param",
  "$@177", "$@178", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@179", "$@180", "explainable_command",
  "describe_command", "analyze_stmt_command", "opt_extended_describe",
  "opt_format_json", "opt_describe_column", "flush", "$@181",
  "flush_options", "$@182", "opt_flush_lock", "flush_lock", "$@183",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@184", "reset_options",
  "reset_option", "$@185", "$@186", "slave_reset_options",
  "master_reset_options", "purge", "$@187", "purge_options",
  "purge_option", "kill", "$@188", "kill_type", "kill_option", "kill_expr",
  "shutdown", "use", "load", "$@189", "$@190", "$@191", "$@192",
  "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "hex_or_bin_String", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "opt_with_clause",
  "with_clause", "$@193", "opt_recursive", "with_list",
  "with_list_element", "$@194", "opt_with_column_list", "with_column_list",
  "query_name", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user_maybe_role",
  "user_or_role", "user", "keyword", "keyword_sp", "set", "$@195", "$@196",
  "$@197", "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@198", "$@199", "$@200",
  "start_option_value_list_following_option_type", "$@201",
  "option_value_list_continued", "option_value_list", "$@202", "$@203",
  "option_value", "$@204", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "opt_for_user", "text_or_password", "set_expr_or_default", "lock",
  "$@205", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "$@206", "handler", "$@207",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@208", "handler_rkey_mode", "revoke", "revoke_command",
  "admin_option_for_role", "grant", "grant_command", "opt_with_admin",
  "opt_with_admin_option", "role_list", "current_role", "grant_role",
  "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@209", "$@210", "$@211",
  "$@212", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "user_and_role_list",
  "via_or_with", "using_or_as", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "opt_require_clause", "resource_option",
  "resource_option_list", "opt_resource_options", "opt_grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin",
  "$@213", "compound_statement", "opt_not", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", "savepoint",
  "release", "union_clause", "union_list", "$@214", "union_list_view",
  "$@215", "union_order_or_limit", "$@216", "order_or_limit",
  "union_head_non_top", "union_option", "query_specification",
  "query_term_union_not_ready", "query_term_union_ready",
  "query_expression_body", "subselect", "subselect_start", "subselect_end",
  "opt_query_expression_options", "query_expression_option_list",
  "query_expression_option", "view_or_trigger_or_sp_or_event",
  "definer_tail", "no_definer_tail", "definer_opt", "no_definer",
  "definer", "view_algorithm", "view_suid", "view_tail", "$@217",
  "view_list_opt", "view_list", "view_select", "$@218",
  "query_expression_body_view", "view_check_option",
  "trigger_action_order", "trigger_follows_precedes_clause",
  "trigger_tail", "$@219", "$@220", "$@221", "$@222", "$@223", "udf_tail",
  "udf_tail2", "sf_tail", "$@224", "$@225", "$@226", "$@227", "$@228",
  "sp_tail", "$@229", "$@230", "$@231", "$@232", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@233", "opt_migrate", "install", "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   901,   902,   903,   904,
     905,   906,   907,   908,   909,   910,   911,   912,   913,   914,
     915,   916,   917,   918,   919,   920,   921,   922,   923,    61,
      62,    60,   124,    38,    45,    43,    42,    47,    37,    94,
     126,    40,    41,    44,    33,   123,   125,    59,    46,    64,
      58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   691,   692,   693,   692,   692,   694,   694,   695,   695,
     695,   696,   696,   696,   696,   696,   696,   696,   696,   696,
     696,   696,   696,   696,   696,   696,   696,   696,   696,   696,
     696,   696,   696,   696,   696,   696,   696,   696,   696,   696,
     696,   696,   696,   696,   696,   696,   696,   696,   696,   696,
     696,   696,   696,   696,   696,   696,   696,   696,   696,   696,
     696,   696,   696,   696,   696,   696,   696,   697,   698,   698,
     699,   701,   700,   703,   702,   704,   702,   705,   706,   705,
     707,   707,   708,   710,   709,   712,   711,   713,   713,   714,
     714,   714,   714,   714,   714,   714,   714,   714,   714,   714,
     714,   714,   714,   714,   714,   714,   714,   714,   714,   715,
     715,   715,   716,   717,   717,   717,   718,   719,   719,   719,
     720,   721,   721,   721,   721,   721,   721,   721,   722,   722,
     723,   725,   724,   726,   724,   727,   724,   728,   724,   729,
     724,   730,   724,   724,   724,   724,   724,   731,   724,   733,
     732,   734,   734,   735,   735,   735,   735,   735,   735,   735,
     737,   736,   739,   738,   738,   740,   740,   740,   740,   741,
     741,   742,   742,   743,   743,   744,   745,   745,   747,   746,
     748,   749,   749,   750,   750,   751,   751,   752,   752,   752,
     752,   752,   752,   752,   753,   753,   754,   754,   756,   755,
     757,   757,   758,   758,   759,   759,   760,   760,   761,   761,
     763,   762,   764,   764,   765,   765,   766,   767,   767,   767,
     767,   768,   768,   769,   769,   770,   770,   772,   771,   771,
     773,   771,   771,   775,   774,   776,   776,   777,   777,   778,
     779,   779,   780,   781,   781,   782,   782,   782,   782,   782,
     783,   784,   784,   785,   785,   786,   786,   787,   787,   788,
     788,   788,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   790,   791,   792,   792,   793,   793,
     794,   794,   795,   796,   796,   797,   797,   798,   799,   799,
     800,   801,   801,   801,   801,   801,   801,   801,   801,   801,
     801,   801,   801,   801,   802,   802,   803,   803,   804,   804,
     804,   804,   804,   805,   805,   805,   805,   805,   805,   805,
     806,   806,   806,   806,   808,   807,   810,   809,   812,   811,
     813,   814,   815,   817,   816,   818,   819,   819,   819,   820,
     820,   822,   823,   824,   821,   825,   825,   825,   827,   826,
     829,   830,   828,   828,   831,   831,   832,   832,   834,   835,
     833,   837,   838,   836,   839,   839,   840,   840,   842,   841,
     844,   843,   846,   845,   848,   847,   849,   851,   850,   853,
     852,   854,   855,   857,   856,   858,   856,   859,   856,   861,
     860,   862,   860,   863,   860,   864,   864,   865,   865,   865,
     866,   867,   868,   869,   869,   870,   870,   871,   872,   873,
     873,   875,   874,   876,   876,   876,   877,   877,   877,   878,
     879,   879,   879,   880,   880,   880,   880,   880,   880,   880,
     880,   881,   882,   882,   882,   883,   883,   883,   883,   883,
     884,   885,   885,   885,   886,   886,   886,   886,   886,   886,
     886,   887,   888,   888,   888,   889,   889,   889,   890,   891,
     892,   893,   894,   895,   895,   895,   896,   897,   898,   899,
     900,   901,   902,   903,   904,   905,   905,   906,   906,   907,
     907,   909,   908,   908,   908,   910,   908,   911,   908,   908,
     912,   912,   913,   913,   915,   914,   914,   914,   916,   914,
     917,   914,   918,   919,   919,   921,   920,   922,   924,   923,
     926,   925,   927,   928,   927,   927,   927,   927,   927,   929,
     929,   930,   930,   931,   931,   932,   932,   933,   934,   935,
     936,   937,   937,   938,   939,   938,   940,   938,   941,   941,
     942,   943,   944,   944,   945,   945,   946,   946,   948,   947,
     949,   950,   951,   950,   952,   950,   950,   953,   953,   954,
     954,   955,   955,   957,   958,   956,   959,   959,   960,   960,
     961,   961,   962,   962,   964,   963,   965,   966,   966,   967,
     967,   968,   968,   968,   968,   968,   968,   968,   968,   968,
     969,   971,   970,   972,   972,   973,   973,   974,   975,   975,
     976,   976,   977,   977,   978,   978,   979,   979,   980,   980,
     981,   981,   982,   982,   983,   983,   984,   984,   984,   985,
     985,   985,   985,   985,   985,   985,   985,   985,   985,   985,
     985,   985,   985,   985,   985,   985,   985,   985,   985,   986,
     985,   985,   985,   985,   985,   985,   985,   985,   985,   985,
     985,   985,   985,   985,   985,   985,   987,   988,   989,   990,
     991,   991,   991,   991,   991,   991,   991,   992,   992,   992,
     993,   993,   993,   993,   994,   995,   995,   996,   996,   996,
     997,   997,   999,   998,  1000,   998,  1001,   998,  1002,   998,
    1003,   998,  1004,   998,  1005,   998,  1006,  1007,  1007,  1008,
    1009,  1009,  1010,  1012,  1011,  1014,  1013,  1015,  1013,  1016,
    1016,  1017,  1017,  1018,  1019,  1018,  1020,  1020,  1021,  1021,
    1021,  1021,  1022,  1022,  1023,  1023,  1024,  1024,  1024,  1026,
    1025,  1027,  1027,  1027,  1028,  1029,  1029,  1030,  1030,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1031,  1032,  1032,  1032,  1032,  1032,  1032,  1032,
    1032,  1033,  1034,  1034,  1035,  1035,  1036,  1036,  1036,  1036,
    1036,  1037,  1037,  1037,  1037,  1037,  1038,  1038,  1038,  1039,
    1039,  1040,  1040,  1040,  1041,  1042,  1042,  1043,  1043,  1044,
    1044,  1044,  1045,  1045,  1045,  1045,  1046,  1046,  1047,  1047,
    1048,  1048,  1049,  1049,  1050,  1050,  1051,  1051,  1051,  1051,
    1051,  1051,  1051,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1053,  1054,  1054,  1055,  1055,  1056,  1056,  1057,
    1057,  1058,  1058,  1059,  1059,  1060,  1061,  1061,  1062,  1062,
    1063,  1063,  1064,  1064,  1064,  1065,  1065,  1065,  1065,  1065,
    1066,  1066,  1068,  1067,  1069,  1069,  1070,  1071,  1071,  1071,
    1071,  1072,  1073,  1074,  1074,  1075,  1076,  1076,  1077,  1077,
    1078,  1078,  1079,  1080,  1080,  1081,  1081,  1082,  1082,  1082,
    1082,  1083,  1083,  1083,  1083,  1083,  1084,  1084,  1084,  1084,
    1084,  1085,  1085,  1086,  1086,  1087,  1087,  1088,  1088,  1088,
    1089,  1089,  1090,  1091,  1092,  1092,  1093,  1093,  1094,  1094,
    1095,  1095,  1096,  1096,  1097,  1097,  1098,  1098,  1099,  1099,
    1099,  1100,  1100,  1101,  1101,  1101,  1101,  1101,  1101,  1102,
    1102,  1103,  1104,  1104,  1105,  1105,  1105,  1106,  1106,  1107,
    1107,  1108,  1108,  1109,  1109,  1110,  1110,  1112,  1113,  1111,
    1114,  1111,  1111,  1115,  1111,  1116,  1111,  1117,  1111,  1118,
    1111,  1119,  1111,  1111,  1111,  1111,  1111,  1120,  1111,  1111,
    1121,  1121,  1121,  1121,  1122,  1122,  1123,  1123,  1124,  1124,
    1125,  1125,  1125,  1125,  1125,  1125,  1125,  1125,  1125,  1125,
    1126,  1125,  1125,  1127,  1125,  1128,  1125,  1125,  1125,  1125,
    1125,  1129,  1130,  1130,  1132,  1131,  1133,  1133,  1133,  1135,
    1134,  1136,  1137,  1136,  1138,  1138,  1139,  1140,  1140,  1141,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,  1142,
    1142,  1142,  1142,  1143,  1143,  1143,  1143,  1143,  1144,  1144,
    1145,  1145,  1146,  1146,  1147,  1147,  1149,  1148,  1150,  1150,
    1151,  1151,  1152,  1152,  1153,  1153,  1153,  1154,  1154,  1154,
    1155,  1155,  1155,  1155,  1157,  1156,  1158,  1156,  1156,  1156,
    1159,  1160,  1160,  1161,  1161,  1162,  1162,  1162,  1164,  1163,
    1165,  1165,  1166,  1166,  1166,  1167,  1167,  1167,  1168,  1168,
    1170,  1169,  1171,  1171,  1171,  1172,  1173,  1172,  1175,  1174,
    1176,  1176,  1177,  1177,  1178,  1178,  1178,  1179,  1179,  1181,
    1180,  1182,  1182,  1183,  1184,  1184,  1185,  1185,  1186,  1187,
    1186,  1188,  1189,  1188,  1190,  1190,  1190,  1191,  1191,  1191,
    1192,  1192,  1193,  1194,  1195,  1194,  1197,  1196,  1198,  1198,
    1199,  1199,  1200,  1200,  1200,  1200,  1200,  1200,  1201,  1201,
    1203,  1202,  1204,  1204,  1204,  1206,  1205,  1205,  1207,  1207,
    1208,  1208,  1209,  1211,  1210,  1212,  1212,  1213,  1213,  1214,
    1215,  1216,  1216,  1218,  1217,  1219,  1219,  1220,  1220,  1221,
    1222,  1224,  1223,  1226,  1225,  1227,  1227,  1228,  1228,  1229,
    1230,  1230,  1230,  1230,  1231,  1231,  1231,  1231,  1233,  1232,
    1232,  1235,  1234,  1234,  1237,  1236,  1236,  1239,  1238,  1238,
    1241,  1240,  1240,  1243,  1242,  1242,  1244,  1245,  1244,  1244,
    1244,  1246,  1246,  1247,  1247,  1248,  1248,  1248,  1249,  1249,
    1249,  1250,  1250,  1250,  1250,  1250,  1252,  1251,  1253,  1254,
    1254,  1255,  1256,  1256,  1257,  1257,  1258,  1258,  1259,  1259,
    1259,  1260,  1260,  1260,  1261,  1261,  1261,  1262,  1262,  1263,
    1264,  1265,  1266,  1266,  1266,  1266,  1266,  1267,  1267,  1267,
    1268,  1268,  1268,  1269,  1269,  1270,  1270,  1270,  1270,  1270,
    1270,  1270,  1270,  1270,  1270,  1270,  1271,  1271,  1271,  1271,
    1271,  1271,  1272,  1272,  1272,  1272,  1272,  1272,  1272,  1272,
    1272,  1272,  1272,  1272,  1272,  1272,  1273,  1273,  1273,  1273,
    1273,  1273,  1273,  1273,  1273,  1273,  1273,  1273,  1273,  1273,
    1273,  1274,  1274,  1275,  1275,  1276,  1276,  1277,  1277,  1278,
    1278,  1278,  1278,  1278,  1278,  1279,  1279,  1280,  1280,  1281,
    1281,  1281,  1282,  1282,  1282,  1282,  1282,  1282,  1283,  1283,
    1283,  1285,  1284,  1284,  1286,  1287,  1287,  1288,  1288,  1288,
    1288,  1288,  1288,  1288,  1288,  1288,  1288,  1288,  1288,  1288,
    1288,  1288,  1288,  1288,  1288,  1288,  1288,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,  1291,
    1291,  1291,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,
    1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1292,  1293,
    1293,  1293,  1293,  1293,  1293,  1293,  1293,  1295,  1294,  1294,
    1296,  1296,  1297,  1297,  1298,  1298,  1299,  1299,  1300,  1300,
    1301,  1302,  1302,  1302,  1302,  1302,  1302,  1302,  1303,  1304,
    1302,  1302,  1302,  1302,  1302,  1302,  1302,  1302,  1302,  1302,
    1302,  1305,  1302,  1306,  1306,  1307,  1307,  1308,  1308,  1308,
    1308,  1308,  1308,  1308,  1308,  1308,  1308,  1308,  1308,  1308,
    1309,  1311,  1310,  1312,  1312,  1312,  1313,  1313,  1314,  1314,
    1315,  1315,  1316,  1316,  1318,  1317,  1319,  1320,  1319,  1319,
    1319,  1319,  1321,  1321,  1321,  1321,  1321,  1321,  1321,  1322,
    1322,  1322,  1323,  1323,  1324,  1324,  1325,  1325,  1326,  1326,
    1327,  1327,  1328,  1328,  1329,  1329,  1330,  1330,  1331,  1332,
    1332,  1333,  1333,  1334,  1335,  1334,  1336,  1334,  1334,  1337,
    1334,  1338,  1334,  1334,  1339,  1334,  1340,  1334,  1334,  1341,
    1341,  1341,  1342,  1342,  1343,  1343,  1344,  1345,  1345,  1347,
    1346,  1348,  1348,  1349,  1349,  1350,  1349,  1349,  1349,  1349,
    1351,  1351,  1352,  1351,  1353,  1354,  1356,  1355,  1357,  1358,
    1360,  1361,  1359,  1362,  1363,  1364,  1365,  1365,  1366,  1366,
    1366,  1366,  1367,  1367,  1369,  1368,  1370,  1368,  1371,  1371,
    1372,  1373,  1372,  1375,  1374,  1376,  1376,  1377,  1377,  1378,
    1378,  1379,  1379,  1380,  1380,  1380,  1380,  1380,  1380,  1380,
    1380,  1380,  1380,  1380,  1380,  1381,  1381,  1381,  1381,  1381,
    1381,  1381,  1381,  1381,  1382,  1382,  1382,  1382,  1383,  1383,
    1383,  1384,  1384,  1385,  1385,  1386,  1387,  1386,  1388,  1389,
    1388,  1390,  1390,  1391,  1391,  1392,  1392,  1393,  1393,  1393,
    1394,  1394,  1395,  1395,  1396,  1398,  1397,  1399,  1399,  1400,
    1400,  1401,  1401,  1402,  1402,  1403,  1403,  1404,  1404,  1405,
    1405,  1405,  1406,  1406,  1406,  1407,  1407,  1407,  1407,  1407,
    1408,  1409,  1409,  1410,  1411,  1411,  1413,  1412,  1414,  1414,
    1415,  1415,  1415,  1416,  1416,  1417,  1418,  1418,  1418,  1419,
    1419,  1419,  1420,  1420,  1420,  1420,  1420,  1421,  1422,  1422,
    1422,  1422,  1423,  1423,  1423,  1424,  1424,  1424,  1424,  1424,
    1424,  1425,  1425,  1425,  1425,  1425,  1426,  1426,  1426,  1426,
    1426,  1427,  1427,  1427,  1427,  1427,  1428,  1429,  1429,  1430,
    1430,  1432,  1431,  1433,  1433,  1434,  1434,  1435,  1437,  1436,
    1438,  1438,  1439,  1440,  1440,  1441,  1443,  1444,  1442,  1442,
    1442,  1446,  1445,  1448,  1447,  1449,  1447,  1447,  1447,  1447,
    1447,  1447,  1447,  1450,  1447,  1447,  1447,  1447,  1447,  1447,
    1451,  1451,  1452,  1453,  1454,  1454,  1455,  1456,  1456,  1457,
    1457,  1458,  1458,  1460,  1461,  1459,  1463,  1464,  1462,  1465,
    1465,  1465,  1465,  1466,  1466,  1467,  1467,  1468,  1469,  1469,
    1469,  1470,  1469,  1471,  1471,  1472,  1472,  1472,  1473,  1473,
    1474,  1474,  1475,  1476,  1476,  1477,  1477,  1479,  1478,  1480,
    1480,  1481,  1481,  1482,  1482,  1482,  1483,  1484,  1483,  1486,
    1487,  1485,  1488,  1488,  1489,  1490,  1490,  1491,  1492,  1492,
    1494,  1493,  1496,  1497,  1495,  1498,  1495,  1499,  1495,  1500,
    1500,  1501,  1501,  1502,  1502,  1503,  1503,  1504,  1504,  1505,
    1505,  1505,  1507,  1506,  1508,  1508,  1509,  1509,  1510,  1510,
    1511,  1511,  1511,  1511,  1511,  1511,  1511,  1511,  1511,  1512,
    1512,  1514,  1513,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1516,  1515,  1517,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1518,  1518,
    1518,  1519,  1519,  1520,  1520,  1521,  1521,  1522,  1522,  1523,
    1523,  1524,  1524,  1525,  1525,  1526,  1526,  1526,  1528,  1527,
    1529,  1527,  1530,  1530,  1530,  1530,  1530,  1531,  1531,  1532,
    1533,  1533,  1533,  1534,  1534,  1535,  1535,  1535,  1537,  1536,
    1539,  1538,  1538,  1540,  1540,  1541,  1542,  1541,  1543,  1543,
    1544,  1544,  1544,  1544,  1544,  1544,  1544,  1544,  1544,  1544,
    1544,  1544,  1544,  1544,  1544,  1544,  1545,  1545,  1546,  1546,
    1548,  1547,  1549,  1549,  1551,  1550,  1552,  1550,  1550,  1553,
    1553,  1554,  1554,  1556,  1555,  1557,  1558,  1558,  1560,  1559,
    1561,  1561,  1561,  1562,  1562,  1562,  1562,  1563,  1563,  1564,
    1565,  1567,  1568,  1569,  1570,  1566,  1571,  1571,  1572,  1572,
    1573,  1573,  1573,  1574,  1574,  1574,  1575,  1575,  1576,  1576,
    1577,  1577,  1577,  1577,  1578,  1578,  1579,  1579,  1580,  1580,
    1581,  1581,  1582,  1582,  1583,  1583,  1584,  1584,  1584,  1585,
    1585,  1586,  1586,  1587,  1587,  1588,  1588,  1589,  1590,  1590,
    1590,  1590,  1591,  1591,  1592,  1592,  1592,  1593,  1594,  1594,
    1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,  1595,
    1596,  1596,  1596,  1596,  1596,  1597,  1597,  1597,  1598,  1598,
    1600,  1599,  1601,  1601,  1602,  1602,  1604,  1603,  1605,  1605,
    1606,  1606,  1607,  1608,  1608,  1609,  1609,  1610,  1611,  1611,
    1612,  1612,  1613,  1613,  1613,  1614,  1614,  1614,  1614,  1615,
    1615,  1615,  1616,  1616,  1617,  1618,  1618,  1619,  1620,  1621,
    1622,  1622,  1623,  1623,  1624,  1624,  1624,  1625,  1625,  1625,
    1626,  1626,  1627,  1628,  1628,  1628,  1628,  1628,  1628,  1628,
    1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,
    1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,
    1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,
    1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,
    1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,
    1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,  1628,
    1628,  1628,  1628,  1628,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,  1629,
    1629,  1629,  1629,  1629,  1631,  1630,  1632,  1633,  1630,  1634,
    1634,  1636,  1635,  1637,  1635,  1638,  1635,  1640,  1639,  1639,
    1641,  1641,  1643,  1642,  1644,  1642,  1646,  1645,  1645,  1647,
    1647,  1647,  1648,  1648,  1648,  1648,  1649,  1649,  1649,  1649,
    1650,  1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,  1651,
    1651,  1652,  1652,  1652,  1653,  1653,  1653,  1653,  1654,  1655,
    1656,  1656,  1657,  1657,  1657,  1657,  1658,  1658,  1659,  1659,
    1659,  1660,  1660,  1660,  1660,  1660,  1662,  1661,  1663,  1663,
    1664,  1664,  1665,  1666,  1666,  1666,  1666,  1666,  1668,  1667,
    1669,  1669,  1670,  1669,  1671,  1671,  1672,  1672,  1673,  1673,
    1673,  1673,  1674,  1673,  1675,  1675,  1675,  1675,  1675,  1676,
    1677,  1677,  1677,  1677,  1677,  1677,  1678,  1678,  1679,  1680,
    1680,  1680,  1680,  1680,  1681,  1681,  1682,  1682,  1683,  1683,
    1684,  1685,  1685,  1686,  1686,  1687,  1687,  1688,  1688,  1689,
    1689,  1691,  1690,  1692,  1690,  1693,  1690,  1694,  1690,  1690,
    1690,  1690,  1690,  1690,  1690,  1690,  1690,  1690,  1690,  1690,
    1690,  1690,  1690,  1690,  1690,  1690,  1690,  1690,  1690,  1690,
    1690,  1690,  1690,  1690,  1690,  1695,  1695,  1696,  1696,  1697,
    1697,  1697,  1698,  1698,  1698,  1698,  1699,  1699,  1700,  1700,
    1701,  1701,  1702,  1702,  1703,  1703,  1704,  1704,  1704,  1704,
    1704,  1705,  1705,  1706,  1706,  1707,  1708,  1708,  1708,  1708,
    1708,  1709,  1709,  1709,  1709,  1709,  1710,  1710,  1711,  1711,
    1712,  1712,  1713,  1713,  1714,  1714,  1715,  1715,  1717,  1716,
    1718,  1719,  1719,  1720,  1720,  1721,  1721,  1721,  1722,  1722,
    1722,  1723,  1723,  1724,  1725,  1725,  1726,  1727,  1728,  1728,
    1730,  1729,  1732,  1731,  1734,  1733,  1735,  1735,  1736,  1737,
    1737,  1737,  1738,  1739,  1739,  1740,  1740,  1741,  1741,  1741,
    1742,  1743,  1744,  1745,  1745,  1746,  1746,  1747,  1747,  1747,
    1747,  1747,  1747,  1747,  1747,  1748,  1748,  1748,  1749,  1749,
    1749,  1749,  1749,  1750,  1750,  1750,  1750,  1750,  1750,  1751,
    1751,  1752,  1753,  1754,  1754,  1754,  1755,  1755,  1755,  1757,
    1756,  1758,  1758,  1759,  1759,  1761,  1760,  1762,  1762,  1762,
    1762,  1763,  1763,  1763,  1763,  1764,  1764,  1765,  1765,  1767,
    1768,  1769,  1770,  1771,  1766,  1772,  1772,  1773,  1775,  1776,
    1777,  1778,  1779,  1774,  1781,  1782,  1783,  1784,  1780,  1785,
    1785,  1785,  1785,  1785,  1785,  1786,  1786,  1786,  1787,  1787,
    1788,  1788,  1788,  1789,  1789,  1790,  1791,  1790,  1792,  1792,
    1793,  1793,  1794,  1794,  1795
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     0,     2,     0,     4,     0,     5,     0,     0,     3,
       3,     1,     1,     0,     3,     0,     6,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     5,     5,     1,     0,
       1,     3,     1,     0,     1,     3,     1,     0,     1,     3,
       1,     3,     3,     3,     3,     3,     3,     3,     0,     1,
       1,     0,     7,     0,    14,     0,    13,     0,    13,     0,
       6,     0,     3,     7,     6,     4,     3,     0,     3,     0,
      12,     1,     3,     2,     2,     2,     2,     2,     2,     2,
       0,    13,     0,     6,     2,     0,     1,     3,     1,     0,
       2,     0,     2,     0,     1,     4,     0,     2,     0,     2,
       0,     3,     1,     0,     2,     0,     2,     2,     2,     2,
       2,     3,     3,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     2,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     5,     0,     2,     0,     3,
       2,     2,     2,     0,     6,     2,     0,     2,     1,     1,
       3,     0,     0,     0,     7,     0,     2,     2,     0,     6,
       0,     0,     4,     1,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     1,     0,     6,
       0,     3,     0,     5,     0,     4,     3,     0,     6,     0,
       6,     1,     0,     0,     6,     0,     6,     0,     6,     0,
       4,     0,     4,     0,     4,     1,     1,     1,     1,     1,
       2,     4,     5,     0,     4,     4,     4,     3,     3,     2,
       2,     0,     2,     1,     2,     3,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     4,     0,     1,     1,     1,     1,
       1,     0,     7,     3,     3,     0,     5,     0,     5,     1,
       2,     4,     0,     3,     0,     7,     5,     3,     0,     5,
       0,     5,     1,     0,     1,     0,     4,     0,     0,     3,
       0,     6,     6,     0,     4,     2,     2,     2,     2,     0,
       1,     0,     3,     0,     1,     1,     3,     1,     4,     5,
       5,     0,     2,     0,     0,     7,     0,    10,     1,     3,
       1,     1,     0,     2,     0,     3,     1,     3,     0,     6,
       1,     0,     0,     5,     0,     4,     1,     1,     1,     1,
       3,     1,     3,     0,     0,     5,     1,     3,     1,     1,
       0,     3,     1,     3,     0,     4,     1,     0,     1,     2,
       1,     3,     4,     3,     3,     3,     3,     4,     4,     3,
       5,     0,     3,     1,     1,     2,     1,     1,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     3,     0,     3,
       1,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
       2,     2,     0,     9,     0,    10,     0,     9,     0,     9,
       0,    10,     0,    11,     0,    10,     2,     0,     1,     4,
       0,     1,     2,     0,     3,     0,     3,     0,     3,     0,
       1,     2,     1,     1,     0,     6,     0,     2,     0,     1,
       1,     1,     0,     1,     2,     1,     1,     2,     2,     0,
       3,     1,     1,     3,     3,     1,     1,     1,     1,     3,
       3,     3,     2,     1,     1,     3,     3,     2,     3,     3,
       2,     3,     1,     2,     2,     2,     1,     2,     3,     1,
       1,     2,     3,     2,     3,     2,     2,     3,     3,     3,
       5,     5,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     0,
       3,     0,     1,     1,     5,     0,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     0,     1,     2,     1,     1,     2,     4,     1,
       3,     2,     1,     2,     2,     1,     2,     2,     3,     3,
       3,     3,     2,     2,     1,     1,     1,     1,     1,     0,
       2,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       0,     1,     2,     1,     1,     0,     1,     2,     1,     2,
       0,     1,     0,     4,     1,     1,     1,     0,     1,     2,
       1,     1,     2,     1,     3,     3,     1,     1,     0,     2,
       0,     1,     5,     0,     3,     3,     1,     0,     2,     2,
       2,     0,     3,     3,     6,     6,     1,     1,     2,     2,
       2,     2,     2,     1,     1,     0,     1,     1,     1,     1,
       0,     1,     1,     1,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     0,     2,     0,     2,
       2,     2,     2,     3,     2,     3,     3,     3,     3,     1,
       1,     1,     1,     3,     1,     1,     1,     4,     2,     1,
       4,     0,     1,     0,     2,     1,     3,     0,     0,     7,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    11,     3,     4,     3,     3,     0,     8,     7,
       0,     3,     1,     4,     0,     3,     0,     2,     0,     1,
       0,     2,     2,     2,     2,     1,     1,     1,     4,     4,
       0,     6,     4,     0,     5,     0,     6,     4,     3,     1,
       7,     2,     1,     1,     0,     6,     0,     3,     2,     0,
       5,     0,     0,     6,     1,     3,     1,     1,     3,     3,
       3,     2,     4,     2,     7,     6,     5,     5,     4,     5,
       3,     4,     2,     2,     6,     5,     3,     5,     1,     1,
       1,     1,     1,     0,     1,     1,     2,     2,     3,     3,
       3,     3,     0,     1,     0,     1,     0,     2,     0,     1,
       2,     1,     1,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     6,     0,     5,     4,     4,
       3,     0,     1,     1,     3,     3,     2,     2,     0,     2,
       1,     3,     0,     1,     1,     0,     2,     4,     1,     3,
       0,     5,     0,     1,     1,     3,     0,     4,     0,     4,
       0,     1,     1,     2,     1,     1,     1,     0,     2,     0,
       5,     1,     3,     2,     0,     3,     1,     4,     1,     0,
       4,     1,     0,     4,     0,     1,     3,     0,     1,     3,
       1,     1,     2,     3,     0,     4,     0,     3,     0,     1,
       1,     2,     1,     1,     1,     1,     1,     2,     0,     2,
       0,     5,     0,     1,     1,     0,     4,     4,     3,     5,
       1,     3,     3,     0,     6,     1,     1,     1,     3,     2,
       3,     1,     1,     0,     6,     1,     1,     1,     3,     3,
       4,     0,     6,     0,     2,     0,     4,     0,     2,     2,
       3,     3,     4,     4,     3,     3,     4,     4,     0,     5,
       3,     0,     5,     3,     0,     5,     3,     0,     7,     3,
       0,     4,     2,     0,     4,     2,     2,     0,     4,     2,
       3,     1,     1,     1,     1,     1,     1,     2,     1,     2,
       3,     1,     4,     2,     2,     3,     0,     3,     5,     0,
       1,     2,     1,     1,     0,     1,     2,     1,     1,     1,
       1,     0,     2,     4,     3,     1,     1,     3,     4,     0,
       0,     0,     0,     2,     2,     1,     1,     0,     2,     3,
       0,     2,     3,     0,     2,     3,     3,     3,     2,     3,
       4,     3,     4,     3,     4,     1,     3,     4,     3,     3,
       6,     1,     5,     6,     5,     7,     6,     8,     5,     6,
       4,     4,     5,     3,     4,     1,     3,     3,     3,     3,
       3,     3,     5,     5,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     2,     1,     1,     1,     2,     1,     2,
       2,     0,     3,     1,     4,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     6,     4,     4,
       7,     6,     5,     6,     6,     4,     4,     1,     3,     3,
       2,     3,     2,     2,     2,     2,     5,     4,     6,     2,
       2,     4,     4,     4,    10,     6,     8,     6,     4,     4,
       6,     4,     4,     4,     6,     4,     7,     7,     7,     6,
       6,     6,     6,     3,     4,     6,     8,     2,     2,     8,
       8,     6,     6,     2,     6,     6,     8,     8,     6,     8,
       6,     2,     8,     8,     2,     2,     2,     6,     6,     4,
       4,     8,     4,     4,     4,     4,     3,     8,     6,     8,
       4,     6,     4,     6,     4,     4,     4,     6,     8,     4,
       3,     6,     4,     6,     5,     8,     7,    10,     1,     6,
       4,     4,     4,     4,     4,     6,     4,     0,     5,     6,
       2,     3,     0,     4,     0,     3,     0,     1,     1,     3,
       4,     4,     5,     4,     4,     4,     5,     4,     0,     0,
       7,     4,     5,     4,     5,     4,     4,     4,     4,     4,
       5,     0,     8,     3,     3,     1,     1,     3,     3,     3,
       3,     3,     4,     4,     4,     6,     4,     6,     4,     6,
       1,     0,     3,     3,     1,     4,     0,     1,     0,     2,
       0,     3,     4,     2,     0,     3,     2,     0,     4,     2,
       1,     1,     1,     1,     2,     1,     2,     2,     2,     1,
       2,     2,     0,     1,     1,     3,     1,     3,     1,     3,
       0,     1,     0,     2,     4,     5,     1,     1,     1,     1,
       4,     1,     3,     3,     0,     6,     0,     8,     4,     0,
       8,     0,    10,     6,     0,     8,     0,    10,     6,     1,
       2,     1,     1,     2,     0,     1,     5,     1,     1,     0,
       5,     5,     8,     1,     2,     0,     4,     2,     3,     3,
       1,     1,     0,     3,     2,     1,     0,     3,     2,     3,
       0,     0,     5,     0,     1,     0,     0,     1,     0,     2,
       3,     3,     1,     1,     0,     7,     0,     7,     1,     2,
       0,     0,     2,     0,     2,     0,     1,     1,     1,     1,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       1,     0,     2,     0,     1,     0,     0,     3,     0,     0,
       3,     2,     0,     0,     4,     4,     2,     0,     1,     1,
       0,     2,     3,     1,     3,     0,     7,     0,     1,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     4,     2,
       2,     2,     1,     2,     2,     0,     3,     2,     2,     3,
       3,     3,     1,     2,     0,     1,     0,     4,     4,     2,
       0,     1,     1,     0,     1,     1,     2,     5,     4,     1,
       3,     3,     1,     1,     1,     1,     1,     1,     0,     2,
       3,     4,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     6,     0,     1,     3,     1,     3,     0,     2,
       3,     1,     1,     2,     1,     2,     0,     0,     7,     2,
       1,     0,     3,     0,     7,     0,     7,     4,     6,     4,
       4,     5,     5,     0,     6,     4,     4,     5,     6,     4,
       1,     3,     1,     2,     1,     3,     1,     0,     2,     0,
       2,     0,     1,     0,     0,     8,     0,     0,     6,     0,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     3,
       4,     0,     3,     3,     1,     2,     2,     1,     3,     1,
       3,     1,     3,     1,     1,     0,     1,     0,     4,     0,
       1,     3,     1,     1,     1,     1,     0,     0,     6,     0,
       0,    11,     3,     1,     3,     3,     1,     3,     0,     1,
       0,     4,     0,     0,     9,     0,     5,     0,     6,     0,
       2,     1,     3,     2,     4,     0,     2,     0,     2,     1,
       1,     1,     0,     4,     0,     1,     0,     1,     1,     3,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     0,
       3,     0,     3,     2,     4,     4,     3,     4,     4,     1,
       3,     3,     3,     3,     6,     2,     2,     0,     6,     0,
       7,     5,     2,     1,     1,     1,     5,     5,     2,     2,
       1,     4,     3,     2,     3,     2,     2,     1,     4,     4,
       3,     3,     2,     3,     2,     3,     3,     3,     3,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     3,     3,     0,     4,
       0,     4,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     0,     3,     0,     1,     1,     0,     4,
       0,     4,     1,     0,     1,     4,     0,     3,     3,     1,
       2,     2,     2,     2,     2,     3,     2,     1,     1,     1,
       1,     2,     1,     1,     1,     2,     0,     1,     0,     3,
       0,     3,     3,     1,     0,     4,     0,     3,     2,     0,
       1,     0,     2,     0,     3,     3,     2,     2,     0,     5,
       0,     1,     1,     0,     1,     1,     2,     1,     2,     1,
       2,     0,     0,     0,     0,    22,     1,     1,     0,     1,
       0,     1,     1,     0,     1,     1,     0,     2,     2,     1,
       3,     4,     3,     3,     0,     2,     2,     1,     3,     3,
       0,     4,     0,     3,     1,     1,     0,     3,     2,     3,
       1,     1,     2,     0,     2,     3,     1,     5,     1,     1,
       2,     2,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     2,     2,     2,     0,     1,
       0,     4,     0,     1,     1,     3,     0,     9,     0,     3,
       1,     3,     1,     1,     1,     3,     5,     1,     1,     1,
       1,     1,     3,     4,     5,     1,     5,     3,     2,     1,
       3,     2,     2,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     0,     0,     7,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     2,
       0,     2,     0,     2,     0,     4,     0,     3,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     2,     2,     2,
       3,     3,     4,     6,     2,     3,     3,     3,     5,     2,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       2,     2,     2,     2,     2,     1,     1,     3,     1,     4,
       4,     1,     1,     1,     1,     1,     0,     4,     1,     1,
       1,     3,     3,     1,     1,     2,     2,     2,     0,     3,
       4,     3,     0,     7,     1,     2,     1,     1,     1,     1,
       1,     1,     0,     5,     1,     1,     1,     1,     1,     3,
       6,     6,     6,     7,     5,     3,     4,     1,     3,     8,
       8,     8,     6,     4,     0,     3,     0,     3,     1,     3,
       2,     1,     1,     0,     1,     1,     2,     0,     1,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     0,     1,     3,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     3,     1,     3,
       1,     3,     1,     1,     1,     1,     4,     5,     4,     6,
       1,     0,     3,     3,     1,     1,     0,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     0,     2,
       0,     2,     0,     3,     2,     1,     2,     1,     0,     3,
       1,     0,     1,     0,     1,     0,     3,     2,     0,     1,
       2,     0,     1,     4,     4,     5,     2,     3,     0,     1,
       0,     4,     0,     4,     0,     2,     2,     1,     2,     0,
       1,     1,     3,     3,     4,     2,     3,     1,     1,     2,
       4,     0,     0,     0,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     3,     3,     3,     3,     0,     3,     3,     0,
       8,     0,     3,     1,     3,     0,     4,     3,     3,     4,
       4,     0,     3,     4,     4,     1,     1,     0,     2,     0,
       0,     0,     0,     0,    20,     2,     1,     7,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,    12,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    2218,   967,  2073,  2878,     0,     0,     0,   348,     0,     0,
    1166,  2883,   610,    68,  1940,  2067,  2068,  1851,  1881,     2,
       0,  1182,   276,   180,     0,    83,   324,  1883,     0,  2128,
       0,     0,   389,  1182,   729,   508,     0,  2123,     0,     0,
    1182,   393,  1886,  2110,   253,   180,  2883,     0,  2654,  1981,
    2139,     0,     0,     0,  1964,     0,  2738,  1929,     0,   391,
    2222,     0,  3024,     0,     3,     8,    21,     0,    43,    26,
      31,    16,    20,    15,    56,    50,    28,  2880,   320,   321,
     322,   323,    41,   141,    40,    11,    59,    60,    18,    47,
      12,    14,    17,    39,    46,    35,    42,    54,    24,    25,
      32,    48,    64,    22,    61,    57,    23,  2073,    13,    27,
      49,    44,    36,    58,    65,    37,     0,  2219,    55,    38,
      63,    30,    51,    29,     9,    10,    19,    52,    53,    45,
      66,    33,    62,    34,     0,   998,     0,     0,     0,     0,
       0,     0,     0,  1076,     0,   979,  2949,  2950,  2951,     0,
    1184,  1183,     0,  2218,  1356,  1355,     0,  2883,  2257,  1162,
    1193,  2344,  2346,  2345,  2347,  2348,  2349,  2350,  2351,  2352,
    2274,  2353,  2354,  2355,  2357,  2356,  2358,  2359,  2360,  2275,
    2276,  2277,  2361,  2362,  2364,  2363,  2365,  2278,  2279,  2366,
    2367,  2368,  2369,  2280,  2282,  2281,  2370,  2372,  2371,  2283,
    2373,  2374,  2375,  2377,  2284,  2285,  2286,  2287,  2288,  2376,
    2289,  2378,  2290,  2379,  2380,  2381,  2382,  2383,  2384,  2385,
    2387,  2386,  2291,  2388,  2389,  2391,  2392,  2393,  2390,  2394,
    2396,  2395,  2397,  2398,  2399,  2292,  2400,  2401,  2402,  2403,
    2404,  2405,  2406,  2407,  2293,  2408,  2409,  2410,  2429,  2294,
    2411,  2414,  2413,  2412,  2415,  2416,  2417,  2419,  2418,  2420,
    2421,  2295,  2296,  2297,  2422,  2423,  2424,  2425,  2427,  2426,
    2431,  2432,  2433,  2298,  2299,  2300,  2301,  2428,  2430,  2632,
    2434,  2435,  2437,  2436,  2438,  2302,  2440,  2439,  2303,  2442,
    2441,  2304,  2305,  2443,  2444,  2445,  2255,  2446,  2256,  2447,
    2448,  2450,  2451,  2452,  2458,  2306,  2449,  2453,  2454,  2455,
    2456,  2457,  2459,  2307,  2461,  2460,  2462,  2463,  2464,  2465,
    2466,  2467,  2468,  2469,  2470,  2483,  2484,  2474,  2475,  2477,
    2478,  2481,  2476,  2482,  2487,  2486,  2488,  2489,  2490,  2491,
    2492,  2485,  2472,  2479,  2480,  2473,  2493,  2494,  2471,  2495,
    2497,  2496,  2498,  2499,  2500,  2501,  2502,  2503,  2504,  2505,
    2506,  2508,  2507,  2509,  2510,  2511,  2512,  2513,  2514,  2515,
    2517,  2516,  2518,  2519,  2521,  2520,  2523,  2524,  2308,  2522,
    2525,  2526,  2527,  2528,  2529,  2531,  2530,  2309,  2311,  2310,
    2312,  2313,  2532,  2533,  2314,  2534,  2536,  2535,  2537,  2538,
    2539,  2541,  2540,  2542,  2543,  2315,  2316,  2317,  2318,  2544,
    2545,  2546,  2547,  2548,  2549,  2550,  2551,  2552,  2553,  2554,
    2555,  2556,  2557,  2559,  2558,  2560,  2561,  2562,  2563,  2564,
    2565,  2566,  2319,  2567,  2320,  2568,  2569,  2321,  2570,  2322,
    2571,  2572,  2573,  2574,  2575,  2323,  2576,  2577,  2580,  2578,
    2579,  2581,  2324,  2582,  2583,  2584,  2325,  2586,  2585,  2587,
    2326,  2589,  2327,  2328,  2588,  2330,  2331,  2590,  2591,  2592,
    2329,  2593,  2332,  2594,  2595,  2597,  2596,  2598,  2599,  2600,
    2333,  2601,  2602,  2334,  2603,  2335,  2604,  2605,  2606,  2607,
    2609,  2608,  2610,  2611,  2612,  2613,  2615,  2617,  2616,  2614,
    2618,  2619,  2620,  2621,  2336,  2625,  2626,  2627,  2628,  2622,
    2623,  2624,  2337,  2629,  2630,  2631,  2340,  2633,  2634,  2636,
    2635,  2338,  2339,  2637,  2638,  2343,  2639,  2640,  2644,  2641,
    2653,  2642,  2643,  2646,  2645,  2647,  2648,  2649,  2341,  2650,
    2342,  2651,  2652,   198,  2260,   182,  2261,  2273,   350,   128,
    2729,  2728,  1120,     0,  2884,  2885,     0,     0,     0,  1957,
       0,  1879,  1879,  1879,  1877,     0,  1879,  1879,  1879,     0,
    1882,  1879,  1879,  1879,     0,    71,    73,  2078,   277,     0,
       0,     0,     0,     0,  2254,     0,   341,  1889,     0,     0,
    2130,  2146,     0,  2147,  2141,  2726,   326,     0,     0,     0,
       0,     0,     0,   180,  1185,  1128,   326,  1938,     0,   243,
     252,   254,   255,   251,     0,  2885,  2896,  2656,     0,  2047,
     255,     0,   128,  1101,     0,   128,  1965,  1962,     0,     0,
       0,  1938,  2140,     0,  2223,  2220,  3008,     0,     0,     0,
    3004,     0,  3009,     0,     1,     5,     0,     0,   608,   922,
     608,   923,   921,   608,  2951,     0,     0,     0,     0,     0,
    2424,  2301,  2536,  2060,  2072,  2058,  2249,  1266,  1228,  1219,
       0,   970,   999,     0,   975,  1880,     0,   973,  2266,  2265,
    2264,   987,   986,   985,   983,     0,   461,     0,  1078,   180,
    2956,     0,   977,     0,  1139,  2062,  2063,  2064,  2065,  2066,
    2069,   372,  2879,     0,   200,     0,   361,   364,     0,   353,
     356,     0,   129,   130,     0,  1164,  1167,     0,     0,  2888,
       0,   611,   146,     0,  1961,  1960,  1959,     0,  1957,  2345,
    2274,  2360,     0,  2208,     0,     0,     0,  1600,     0,  2280,
       0,  2373,  2375,  2284,  2285,  2286,  2287,  2288,  2291,     0,
       0,     0,  1303,  1303,  1303,  1300,     0,     0,     0,  2398,
    2399,  2213,     0,     0,     0,     0,  2204,     0,  2214,  2301,
    2437,  2438,     0,     0,     0,  2206,  2207,  2444,     0,     0,
       0,  2460,     0,  2465,  2211,     0,     0,  2503,  2505,     0,
       0,  2509,  2510,  2511,  2512,  2189,  1358,     0,  1300,     0,
    2203,  2210,     0,  2528,  2197,  2537,     0,  2542,  2543,     0,
    2552,     0,     0,     0,  2574,     0,  2580,  2578,     0,  2584,
       0,     0,  2606,     0,     0,  1300,  2188,  2625,  2626,  2627,
    2628,     0,  2205,  2337,  2212,     0,  2639,  1303,  1300,  1300,
       0,     0,     0,  2647,  2648,  2652,     0,     0,     0,  2921,
    1357,     0,     0,  1561,  1594,  1315,  1321,  1335,     0,  1407,
    1350,  1388,  1389,  1391,  1498,  1390,  1395,  1396,     0,  1545,
    1394,  1852,  2200,  1393,  1392,  2201,  2202,  1387,  2239,  2260,
    2238,     0,     0,     0,     0,     0,     0,     0,   180,     0,
    2043,     0,   180,  1863,  1879,    75,     0,    77,     0,     0,
    2787,  2802,  2803,  1303,  2799,  2804,  2418,  2297,  2431,     0,
    2801,  2793,     0,  2547,  2551,  2797,  2566,  2569,  2791,     0,
    2327,  2610,  2823,  2795,  2800,  2781,  2768,  2782,     0,     0,
    2785,  2789,  2251,  1718,  2741,  2742,     0,    84,     0,     0,
    1891,  1892,  1890,  1074,     0,  3021,  2131,  2132,  2133,     0,
    2150,     0,   370,     0,   336,     0,     0,     0,   328,   326,
     313,     0,   312,   314,  2218,   308,   315,   316,   317,   318,
     319,   309,   310,   382,   311,  2262,     0,  2263,  1180,   730,
     510,   509,    71,  2042,  2041,     0,  2124,  2897,     0,     0,
       0,   326,   382,  1894,  1939,     0,  1893,  2116,     0,  2114,
    2111,  2113,   244,     0,     0,   274,  2346,  2787,  2551,  2759,
       0,  2767,     0,  2891,  2888,     0,   844,     0,     0,  2679,
    2680,  2517,  2537,  2575,  2681,  2622,     0,     0,  2701,  2655,
    2665,  2661,     0,     0,  2003,     0,   844,  2055,  2004,     0,
       0,  2055,     0,  1783,  2045,  2048,     0,  2683,  2017,   919,
     918,   917,  2684,  2041,     0,  1989,  2005,     0,  1966,  2010,
     128,  2685,     0,  2044,     0,  1783,  2055,     0,  1982,     0,
       0,     0,     0,  1289,     0,   250,  1108,  1108,     0,     0,
    1100,  1102,  1103,  1108,  1108,     0,  3022,  3023,  2739,  1074,
     382,     0,     0,  2196,  2194,  2195,  2258,  3005,  2193,  2192,
    3013,  3015,  3001,  3003,  3010,     6,    67,     0,     0,   180,
     180,   142,  1290,  1290,  2951,   608,   148,   608,   608,   608,
     608,  2218,  2075,  1269,  1274,  1228,     0,     0,  2954,  2955,
    2953,   860,     0,  1303,  2267,  2270,  2952,  2271,   183,   984,
       0,   462,   183,     0,     0,     0,     0,     0,   463,   464,
     400,     0,  1082,  1083,  1077,  1079,  1081,     0,     0,     0,
     980,     0,  2956,  2074,     0,   374,     0,  1195,  1197,  1196,
    1213,   202,   199,   181,     0,   326,     0,   351,   357,    85,
    1122,  1870,  1872,     0,  1168,  2887,     0,     0,  2889,  2893,
     145,     0,     0,     0,  1941,  1945,  1951,  1955,  1958,     0,
       0,  1723,  1410,  1723,  1723,  1723,  1601,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1723,     0,     0,  1447,  1419,  1420,     0,  1448,     0,     0,
       0,  2215,     0,     0,     0,     0,  2921,     0,     0,     0,
       0,     0,  1566,     0,     0,     0,     0,     0,  2921,     0,
       0,     0,     0,     0,     0,  1596,  1598,  2238,  1723,     0,
       0,  1723,     0,     0,     0,     0,     0,  1308,  1453,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1723,  1723,     0,
       0,  1723,  1461,  2217,     0,     0,     0,  2216,     0,     0,
       0,  2190,  2209,     0,  1464,  1466,  1465,     0,  1723,  1723,
       0,     0,     0,  1413,  1412,  1414,     0,   732,   731,  2218,
       0,     0,     0,  1354,  1353,  1352,  1351,     0,     0,     0,
       0,  1360,     0,  1362,  1364,  1359,  1361,  1363,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1415,     0,     0,
       0,     0,  2191,  1507,     0,  1857,  1865,  1859,  1878,     0,
    2043,  1860,     0,  1869,   475,     0,  1866,     0,     0,  1853,
      77,    72,    78,    74,     0,  2103,     0,     0,     0,  2097,
    2099,  2102,  2098,     0,     0,  2104,   128,     0,  2100,  2079,
    2082,  2089,  1289,  2080,     0,     0,   275,   278,   280,     0,
     283,  2788,  2786,  2820,  2819,  2824,     0,  2821,  2817,  2780,
    2810,  2851,  2814,     0,  2851,  2816,  2815,  2851,  2811,  2818,
    2851,     0,  2783,     0,  1719,  1720,     0,  2740,     0,  2250,
       0,     0,  1075,     0,     0,  2134,  2135,     0,  1203,  2151,
    2152,  2148,  1718,  2727,  2730,   374,   335,   338,     0,     0,
     331,   330,   332,     0,     0,     0,   223,   327,   390,     0,
       0,   519,    70,     0,  1187,  2272,     0,  1186,  1190,     0,
    1126,  1129,     0,   379,   394,     0,  1897,  1887,  1896,  1634,
    2121,  2118,   128,     0,   242,   267,   262,   270,   264,   266,
     265,   271,   272,   273,   268,   263,   269,   256,     0,     0,
    2786,     0,     0,  2783,  2892,     0,  2894,     0,  2657,  2659,
       0,   843,     0,     0,   846,   848,  1914,  1913,   847,   856,
       0,   845,     0,  2716,     0,  2699,     0,  2686,     0,   852,
     854,   853,  2694,   851,     0,     0,  2670,     0,     0,  2051,
    1289,  1289,  2016,     0,   608,     0,     0,     0,     0,     0,
    2029,     0,  1983,     0,     0,   659,  1785,  2009,     0,  1784,
    2049,  2050,  2055,     0,     0,  2055,     0,  2022,  2045,  2055,
       0,  2055,  1978,     0,     0,  1970,  1975,  1971,     0,  1977,
    1976,  1979,  1967,  1968,     0,  1996,  2024,     0,  2045,  2008,
    2015,     0,  1995,  2002,     0,  2013,  2045,  2045,     0,  2055,
    2055,  2055,  1096,  1112,  1094,  1106,  1107,     0,     0,  1099,
    1098,  1963,  1639,   392,   377,  2221,  2224,  2228,  2232,     0,
       0,  3002,  3016,  3000,  3011,  3012,  2999,     7,     4,     0,
     139,     0,     0,     0,   608,   608,  1290,  2948,     0,  2936,
    2943,  2944,  2947,  2986,  2946,  2945,   608,  2942,  2935,  2938,
    2939,  2941,  2940,  2956,     0,     0,     0,     0,     0,  2061,
    2059,  2076,  2077,  1639,  1838,     0,  1220,  1281,  1258,  1270,
    1281,  1725,  1783,  2907,  1269,  1261,  2934,  2929,  2928,  2931,
    2932,  1280,  2933,  1279,  2930,  2927,  1290,  1275,  1277,  1278,
       0,  1221,  1266,   861,   860,   602,   605,   604,     0,     0,
    2269,     0,   976,     0,  2043,   974,     0,     0,  2043,   411,
    2043,   465,   968,  1080,  2270,  2850,     0,  2856,  2838,     0,
     608,   981,   978,  1140,  1141,  1144,   373,   225,     0,     0,
     507,  1213,  1199,  1215,     0,   203,   205,   362,   326,     0,
       0,     0,  1124,  1123,     0,  1121,  1178,  1176,  1175,  1173,
       0,  1174,  1172,  1163,  1169,  1170,  2886,  2890,  2043,   403,
    1947,  1874,  1634,  1876,  2249,     0,     0,     0,  1953,     0,
       0,  1724,  1723,     0,  1574,     0,     0,     0,     0,  1602,
       0,     0,     0,     0,     0,     0,     0,     0,  1385,     0,
       0,     0,     0,     0,  1528,     0,  1574,  1551,  1304,  1827,
    1828,  1812,  1813,  1811,  1814,  1301,     0,  1815,  1826,  1476,
       0,     0,     0,     0,     0,  1549,     0,  1694,  1695,  1696,
    1697,  1705,  1698,  1699,  1700,  1707,  1712,  1701,  1702,  1708,
    1709,  1710,  1703,  1711,  1706,  1704,  1713,     0,  1693,     0,
       0,     0,  1716,  1714,  1717,  1715,     0,  1567,  1541,     0,
       0,     0,     0,     0,   732,     0,  1594,     0,     0,     0,
       0,     0,     0,     0,  1723,     0,     0,     0,  1723,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1550,
       0,     0,     0,     0,  1548,     0,     0,     0,     0,     0,
    1490,  1547,     0,     0,     0,     0,     0,  1723,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1443,     0,
    2241,  2240,     0,     0,     0,   888,     0,  1409,     0,     0,
       0,     0,  2686,  1562,  1564,  1306,  1305,  1307,  1318,  1311,
    1316,  1309,  1313,     0,  1365,  2352,  1319,     0,     0,  1347,
    2921,  1732,  1348,  1333,  1338,  1339,     0,  1336,  1337,     0,
    1341,     0,  1340,  1344,  1345,  1346,  1349,     0,     0,     0,
       0,  1408,  1411,  1745,  1543,  1544,  1560,  1595,  1290,  2242,
       0,     0,   475,  1862,  2778,   478,   477,  1867,   476,  1915,
    2836,  1861,  1084,     0,    76,     0,  2094,  2091,  2090,  2092,
    2096,   128,  2101,  2093,     0,  2105,  2106,  2398,  2625,  2628,
     287,     0,   260,   259,   261,   284,     0,     0,  2813,     0,
    2794,     0,  2798,  2792,  2796,  2776,     0,     0,  2784,     0,
    2822,  2805,  2809,  2808,  2806,     0,  2807,  2812,  2790,  1722,
    2432,  2520,     0,  1725,  2744,   325,   342,  1884,  3020,  2136,
    2639,  2137,  2129,     0,  2149,     0,     0,     0,   371,   337,
       0,   329,   376,   224,   368,   383,   387,   385,  1181,   520,
       0,     0,   531,     0,     0,     0,  2125,     0,     0,     0,
       0,     0,  1130,     0,  1895,  2218,     0,  1873,  1635,     0,
    2117,  2119,  2112,     0,     0,     0,     0,     0,  2840,  2765,
       0,     0,     0,  2895,     0,     0,     0,  2697,  2703,     0,
    2696,  2695,     0,     0,     0,  2718,  2700,     0,     0,  2664,
    2704,  2705,  2708,     0,     0,     0,     0,     0,  2702,  2622,
    2666,  2667,  2672,  2662,  2724,  2725,  2722,  2723,  2721,  2691,
    2023,     0,  2053,     0,     0,     0,     0,  2035,  2027,  2026,
    2020,  2028,  2030,  2021,  2040,  2039,  2038,  1993,  1992,  1795,
    1796,     0,  1794,  1786,  1789,  1793,  1792,  1986,  2046,  2034,
    2032,   180,  2055,  1991,  1990,  2033,  2031,  1972,  1973,  1974,
       0,  1783,     0,  2051,  2025,  2055,  2045,     0,  2055,  2055,
    2036,  2037,  2012,  2014,  1097,  1114,  1113,  1109,  1110,  1115,
    1105,  1104,  1663,     0,  1609,     0,  1611,  1608,  1607,  1606,
    1637,     0,  1638,   326,     0,     0,  2226,  3006,  3014,  3018,
     609,   860,  2774,  2856,   608,  2985,     0,     0,   608,   608,
       0,  2937,   149,   938,     0,     0,   131,  1273,  1271,  1272,
       0,     0,  1850,     0,  1845,  1776,     0,     0,  1242,     0,
    1259,  1263,  1264,  1240,  1726,  1733,  2906,  1270,  1774,  1286,
    1267,  1285,     0,  1276,  1230,  2909,  1222,  1223,     0,  1269,
     603,  1915,  1915,     0,  2268,     0,     0,     0,     0,     0,
       0,     0,   184,   193,     0,     0,   409,   410,  1915,   408,
     451,   452,   455,   456,   457,     0,   458,  1915,  1915,   405,
     431,   432,   435,   436,   437,   438,   439,   401,     0,   406,
     860,     0,     0,     0,  2868,  2957,  2958,     0,   990,     0,
       0,  1143,   221,  1202,  1194,  1201,  1198,  1213,  1211,  1200,
     914,   913,     0,  1214,   201,     0,     0,   349,   358,   352,
     354,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    86,    87,   108,  1871,     0,
    1165,  1177,  1171,  1915,  1915,  1915,  1915,   407,   440,   441,
     444,   445,   446,   447,   450,   448,   449,     0,  2043,     0,
       0,  1942,     0,  2252,  1952,  1639,  1956,  1955,     0,  1472,
       0,  1521,     0,  1523,  1524,  1525,     0,     0,     0,     0,
       0,  1473,     0,  1417,  1474,  1475,     0,  1469,     0,  1470,
       0,     0,     0,     0,     0,     0,     0,  1527,     0,  1302,
       0,     0,  1421,  1422,  1405,  1398,     0,  1553,     0,  1500,
       0,     0,  1558,     0,  1556,     0,  1423,     0,     0,     0,
       0,  1480,     0,     0,  1501,  1597,     0,  1599,  2242,     0,
    1533,  1482,  1428,     0,  1531,     0,  1429,  1502,  1503,  1504,
    1552,     0,  1484,  1485,     0,  1506,     0,  1486,     0,     0,
    1489,     0,     0,  1431,  1537,  1535,     0,     0,     0,     0,
    1539,  1433,     0,     0,     0,  1432,     0,     0,     0,     0,
       0,     0,     0,  1435,     0,  1406,  1536,  1538,  1492,     0,
       0,     0,     0,     0,  1444,   733,  1656,  1237,  1281,  2917,
    2918,  2922,  1399,  2243,     0,     0,  1312,  1317,  1310,  1314,
    2921,     0,     0,     0,     0,  1331,  1330,     0,     0,     0,
    2921,  1732,  1334,  1747,     0,     0,  1517,  1518,  1592,     0,
    1858,  1855,  1868,     0,  1916,     0,     0,  1086,  1085,  1864,
    1084,  1924,  1925,    79,    81,  1923,    82,  2095,  2088,  2107,
    2083,     0,   279,   288,   281,   285,   286,   282,  2855,     0,
    2854,     0,     0,  2773,  2832,  2835,  2249,     0,     0,     0,
    2748,  2755,  2751,  2756,  2749,  2750,  2754,  2757,  2758,  2745,
    2752,  1783,   326,  2218,  2138,  1204,  1206,  1207,  1205,  1213,
       0,     0,  2733,  2734,  2732,  2731,   333,   374,   326,   326,
       0,     0,  1290,   518,   517,   516,   515,     0,   533,   513,
     521,  2127,  2126,     0,  1188,  1191,  1192,  1137,  1135,  1134,
    1136,  1125,  1131,  1132,     0,  1901,     0,     0,  2218,  1907,
    1888,  1898,     0,     0,  1809,  1810,  1806,  1807,  1805,  1808,
    2122,  2120,  2115,     0,   257,  2766,     0,     0,     0,     0,
       0,     0,  2660,  2218,  2690,     0,   859,   858,   857,   855,
    2717,     0,     0,     0,  2710,  2711,     0,     0,  2687,  2688,
    2689,     0,  2692,  2669,  2670,  2671,     0,  2052,     0,  1997,
    2056,  2057,     0,  2019,     0,     0,     0,     0,  2018,  1988,
       0,  2011,  1969,  2053,  1987,  1725,  2045,  1984,  1985,  1112,
       0,  1095,  1663,  1639,     0,     0,  1629,  1666,     0,  1666,
    1631,  1632,  1639,     0,  1639,  1634,   326,  2225,     0,  2230,
       0,     0,     0,  3017,   140,   860,     0,   144,  2868,     0,
       0,   182,  2994,  2979,     0,     0,     0,     0,     0,     0,
       0,   612,  2259,  1849,  1846,     0,  1839,  1841,  1842,  1844,
       0,  1282,     0,  1831,  1260,  1265,  2898,     0,     0,  1728,
    1783,  1775,  1290,  1291,  1291,  2238,  2911,  2910,  2900,  2905,
    1281,  1252,  1251,     0,     0,   972,   187,   190,   188,     0,
     189,     0,     0,   460,   459,     0,  2043,   453,     0,     0,
       0,     0,     0,     0,     0,     0,   151,     0,     0,  2043,
     433,   412,   413,   416,   417,   418,  1072,  1915,  1072,     0,
    1915,  1915,  1072,  1915,     0,     0,  1915,  1915,     0,     0,
    1915,     0,     0,  1072,     0,  1915,     0,  1059,     0,     0,
    1915,  1915,  1915,  1915,  1915,  1072,     0,     0,  1915,  1915,
     507,  1915,     0,     0,  1090,     0,     0,  1915,  1915,  1915,
    1915,     0,     0,  1915,  1915,     0,  1915,  1006,  1058,   614,
     641,   642,   969,  1005,  1007,  1019,   503,     0,  1037,  1061,
    1062,  1060,     0,     0,  2842,  2843,     0,     0,     0,  2860,
    2858,     0,  2859,  2857,  2825,  2839,     0,   989,  2959,     0,
     992,   994,  1142,     0,     0,   326,     0,     0,  1685,   204,
     326,     0,   355,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1179,     0,
       0,     0,     0,  2043,   442,     0,  1915,   402,   419,   420,
     423,   424,   425,   426,   427,   430,   428,   429,  1875,  1955,
    1639,  1725,  2250,  1725,     0,  1954,     0,     0,  1522,  1575,
       0,  1603,     0,  1402,   816,   816,   816,  1589,   801,   820,
    1582,   816,  1583,   816,  1585,     0,  1580,  1581,     0,     0,
    1367,  1386,     0,     0,     0,     0,     0,  1529,  1526,     0,
       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,
    1416,  1595,     0,  1512,  1534,  1532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1540,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   877,   883,   886,   887,   889,   881,     0,
    1494,  1269,  1655,  2923,  1237,     0,     0,  2915,  1281,  2909,
    2919,     0,  2920,   963,  1563,     0,  1328,  1324,     0,  1322,
    1731,  1343,  1342,     0,     0,     0,  1332,  1749,  1748,  1291,
    1508,  1290,     0,  1593,  2244,  1856,  2779,   474,   658,  2837,
    1854,     0,  2086,     0,  2081,  2084,     0,     0,  2852,     0,
    2872,     0,     0,     0,     0,     0,     0,     0,  2743,   326,
    1926,     0,  1213,  1217,  2142,  2736,  2737,  2735,     0,   366,
     366,   366,   366,   523,     0,   532,     0,   544,     0,     0,
       0,     0,     0,  1127,  1133,     0,     0,  1917,  1905,  1909,
    1906,  2218,     0,     0,     0,  1904,  2234,  2233,  2240,   591,
       0,  1691,     0,     0,  2764,  2841,     0,     0,     0,  2658,
    2698,     0,     0,     0,     0,  2715,  2709,  2706,  2707,     0,
    2668,  2674,  2673,  2676,  2678,  1819,  1820,  1818,  1816,  1817,
    2054,  1783,  2007,  2006,  1797,  1788,     0,  1791,  1790,  1980,
    1999,  2001,  2055,  1111,     0,  1118,  1116,  1665,     0,  2904,
    1281,  1664,  1639,     0,     0,  1633,  1630,  1667,     0,  1666,
    1666,  1639,     0,  1613,  1930,  1933,     0,  1612,  1718,     0,
    2229,     0,     0,  3007,  3019,     0,   143,     0,  2988,     0,
       0,     0,   160,     0,   954,   956,   955,   940,   939,     0,
     135,   137,     0,   700,   132,   489,   503,   613,   616,   849,
    1843,     0,  2237,  1777,  1780,     0,     0,  1241,  2899,  1727,
       0,  1729,  1740,  1262,  1284,  1292,  1287,     0,     0,  1229,
     657,   656,   192,   191,   196,   197,  1823,  1824,  1821,  1822,
     466,   479,  1825,   480,   454,   155,   154,   156,   157,   159,
     158,   153,   988,     0,   467,   468,   434,     0,   414,  1073,
     961,   608,  1041,  1043,     0,   701,   608,   915,   915,   606,
       0,     0,  1182,     0,     0,  1877,     0,     0,  1182,     0,
       0,     0,  1915,     0,  1052,  1001,  1877,     0,  1879,     0,
    1877,  1877,  1053,     0,     0,  1002,  1915,     0,     0,     0,
       0,     0,  1877,  1182,     0,     0,     0,   505,     0,  1182,
    1021,  1093,  1091,  1092,     0,  1182,  1182,     0,     0,     0,
       0,   647,   648,   646,     0,     0,     0,   639,   615,   860,
    1003,   504,  1004,   700,     0,  1087,   697,   703,  2245,     0,
       0,  2846,  2848,  2831,  2830,  2829,  2826,     0,     0,     0,
       0,     0,     0,  2867,  2869,  2961,  2881,     0,     0,   165,
    1146,     0,  1145,   236,   235,     0,   227,   304,   375,     0,
     226,     0,  1688,     0,  1689,  1686,  1687,   326,   359,   113,
     117,   109,    93,    94,    89,   121,   122,    91,    92,    97,
      96,    98,    99,   102,   103,   100,    95,   101,    90,   125,
     127,   126,   104,   123,   124,    88,   473,   472,   471,   470,
     443,     0,     0,  2043,   421,     0,  1725,  1774,  2253,  1946,
       0,  1445,  1604,     0,     0,   817,  1576,  1577,  1591,     0,
    1587,   803,   802,     0,   821,  1588,  1579,  1584,  1590,  1586,
    1401,  1418,  1467,     0,  1384,  1468,     0,  1499,  1404,  1403,
       0,     0,     0,  1451,  1478,     0,  1452,     0,  1568,  1559,
    1557,     0,     0,  1425,     0,  1481,  1427,     0,     0,  1514,
    1483,  1555,  1505,  1454,  1487,     0,  1430,  1397,     0,  1455,
       0,  1460,  1458,     0,  1434,     0,     0,  1441,     0,  1439,
       0,  1440,     0,  1442,  1491,  1493,     0,     0,   888,   874,
     875,   876,     0,   878,   880,   882,     0,     0,  2912,  1290,
    2924,  2926,     0,  2904,  1656,  2913,  2908,  1654,  1650,  1651,
       0,  1565,  1320,     0,  1329,  1326,     0,  1323,     0,  1751,
    1292,  1519,  1509,    80,     0,     0,   296,   291,   299,   293,
     295,   294,   300,   301,   302,   303,   297,   292,   298,   290,
     289,  2853,     0,  2772,  2777,  2834,  2833,  2856,  2856,  2856,
       0,   345,     0,  1885,  1208,  1213,  1217,     0,  1209,  2153,
     334,   339,   369,   367,   381,   384,   388,   386,     0,   524,
     525,   527,  1291,   541,   519,     0,   511,   514,     0,   523,
    1189,  1138,   380,  1902,  1911,     0,  1919,     0,  2218,  1899,
     497,  2218,     0,   591,     0,  1269,  1274,   507,     0,   258,
       0,  2761,  2762,  2760,  2720,  2719,  2713,  2712,  2714,  2693,
       0,     0,  1998,  1787,  1783,  1994,     0,     0,  1660,  1718,
    1644,  1645,  1647,  1281,  1658,     0,  1610,  1639,     0,     0,
    1618,  1639,  1614,  1616,     0,  1725,     0,  1683,   378,  2231,
    1290,  2775,   206,   672,   673,   671,   670,     0,  2995,     0,
       0,     0,   133,     0,     0,   490,   961,     0,     0,     0,
     674,   675,   677,   678,   679,  2153,   502,   860,   617,     0,
    1847,  1840,     0,  1781,  1782,  1779,  1283,  1290,  1737,  1780,
       0,     0,  1268,     0,  1288,  1296,  1295,  2235,  2242,  1266,
    1231,  2901,   152,   415,     0,   702,   962,  1182,     0,     0,
       0,   915,   696,   608,   961,   916,   608,   608,     0,  1039,
    1068,  1069,     0,     0,   625,   622,     0,   634,  1022,  1013,
    1023,  1034,  1036,     0,   624,   649,     0,     0,   637,     0,
    1877,     0,  1050,     0,     0,   619,     0,     0,   668,   669,
     667,   643,   650,  1070,  1071,   620,   621,     0,     0,  1770,
    1772,  1780,   627,   626,  1830,  1829,   636,     0,   623,     0,
    1056,  1029,     0,   665,   663,   660,   662,   661,   666,   664,
     638,   629,   628,   631,   630,   633,   632,   635,   651,  1018,
       0,  1072,  1072,  1038,     0,  2248,     0,  1089,  1040,     0,
     680,   698,   681,     0,     0,   655,   654,   652,   653,  2847,
    2845,  2844,     0,  2827,  2863,  2861,  2862,  2865,  1802,     0,
    2864,  2866,     0,     0,  2882,     0,     0,     0,   991,     0,
     168,   166,   176,  1148,  1149,     0,     0,     0,     0,     0,
       0,   222,     0,  1216,     0,     0,     0,   114,   116,     0,
     118,   120,     0,   110,   112,   404,   469,   422,  1955,  1948,
    1798,     0,  1605,     0,     0,     0,     0,   865,     0,     0,
     781,   816,  1378,   801,  1374,  1376,  1372,     0,   782,  1375,
     816,     0,  1381,  1383,  1368,  1369,  1370,  1371,     0,  1530,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1400,     0,  1510,     0,     0,     0,     0,     0,     0,
    1438,  1436,  1437,   872,  1496,     0,   885,   879,   877,   884,
       0,  1657,  2925,  1239,  2914,  1269,     0,   964,  1325,     0,
       0,     0,  1753,  1520,  2087,  2108,     0,  2870,  2870,  2870,
       0,  1922,   326,   341,   344,  1927,  1210,  1218,  2155,  2154,
       0,     0,   528,     0,     0,     0,   548,     0,   546,   522,
       0,     0,     0,     0,  1920,  1908,     0,  2904,  1900,  1903,
    1269,  2242,  1281,  1270,  1281,   596,  1290,  1636,  1692,  2763,
    2675,  2677,  2000,  1117,  1119,  1659,  1274,  1641,     0,  1649,
    1648,  2922,     0,  1606,  1639,  1639,     0,  1606,     0,     0,
    1932,  1774,  1934,  1640,  1680,  2921,     0,   207,   209,   210,
       0,   217,   396,   395,     0,     0,     0,     0,     0,     0,
       0,   484,   481,   700,   483,   598,   618,   850,  2156,  1780,
       0,     0,  1834,  1836,  1738,  1739,     0,  1734,  1736,  1730,
       0,  1741,  1743,  1294,  1293,     0,  1269,  1231,     0,     0,
       0,  1024,     0,   608,   911,   912,   961,   936,  2245,   961,
     961,     0,     0,     0,  1012,     0,  1168,     0,  1017,   856,
     644,  1048,     0,  1008,  1051,  1084,     0,   645,  1087,  1010,
       0,  1773,   506,  1009,  1031,  1015,  2106,  1042,  1088,   893,
     795,   818,   818,   816,   744,   743,   816,   752,   801,   797,
       0,   801,   801,   774,   773,   791,   777,   760,   865,   865,
     759,   794,   865,   778,   776,   780,     0,   782,   801,   787,
     775,   779,   796,   707,     0,   793,   816,   816,   816,   756,
     792,   865,     0,   785,   816,   704,   705,   801,   818,   818,
       0,     0,   816,   820,  2247,  2849,  1804,  1803,  2963,     0,
    2965,   175,   164,     0,     0,   993,   995,     0,     0,   996,
    1154,     0,   230,   305,   856,   306,     0,   233,  1212,  1690,
     326,   106,     0,   107,     0,   105,     0,     0,  1943,  1446,
     814,   812,   815,   813,   863,   868,   866,   864,     0,   870,
    1578,     0,  1380,  1377,   783,  1379,  1373,   865,  1471,  1449,
    1450,  1479,  1571,  1780,  1569,  1542,  1477,     0,  1426,  1511,
       0,     0,  1488,  1456,  1459,  1457,  1462,  1463,     0,  1495,
       0,  1774,  1653,  1327,  1750,     0,  1756,  1755,     0,     0,
       0,  2085,  2873,     0,  2770,  2771,  2769,  2753,     0,   326,
     346,     0,     0,   340,   526,   529,     0,   521,     0,   545,
       0,   512,  1910,  1912,  1918,   499,   501,  1281,   594,   593,
     496,   597,   595,   494,   592,  1290,  1646,     0,  1619,     0,
    1623,  1628,  1624,     0,  1615,     0,  1798,  1684,     0,  1291,
    2989,     0,     0,  2987,   220,   218,   219,     0,   213,   215,
       0,   399,   397,   398,     0,     0,     0,     0,     0,  1780,
     959,     0,   491,     0,  2904,   612,   676,   599,  2218,     0,
    2164,  1778,  1291,  1832,  1290,  1780,     0,     0,  2236,  1224,
    1281,  1270,  1281,     0,  1225,  1266,     0,  1026,     0,   961,
     936,  2245,     0,   682,     0,   686,   688,   607,  1055,     0,
    1087,  1014,  1035,  1057,  1049,  1047,     0,  1046,  1182,  1771,
    1030,  1032,  1130,     0,     0,   897,   819,   747,   742,   757,
     755,   805,   798,     0,   805,   805,   766,   781,   761,     0,
     865,   772,   765,   783,   786,   788,   790,   805,   709,     0,
     865,   754,   753,   763,   750,   805,   822,   799,   784,   865,
     870,   865,   870,   805,   805,     0,  2962,     0,  2960,  2218,
     162,   167,   177,   178,   982,     0,  1155,  1151,  1152,  1147,
       0,   842,     0,   228,   229,   241,   240,   232,  2218,   326,
     115,   119,   111,     0,  1799,  1949,   869,   862,   871,   867,
       0,  1382,     0,  1573,     0,  1513,  1515,   873,     0,  1783,
    1752,  1746,     0,     0,     0,     0,     0,     0,  1765,  1757,
       0,     0,     0,  2877,  2871,  2875,  1921,     0,     0,  1290,
     534,     0,   551,   550,   547,   590,  2898,  1661,  1718,     0,
       0,     0,     0,     0,  1931,  1672,  1673,     0,     0,  1678,
    1682,     0,     0,   208,   211,  2996,   217,   216,  1290,   173,
       0,     0,   926,     0,   958,     0,   928,   486,   488,   503,
     493,     0,     0,     0,     0,  2157,  2159,     0,  1848,  1837,
    1835,  1735,  1744,  1742,  1245,  1264,  1243,  1233,  1226,  1227,
    1269,     0,     0,     0,  1025,   699,   694,   690,     0,   937,
       0,   684,     0,     0,     0,     0,     0,  2921,   737,   738,
    1054,   735,   736,  1045,   507,  1011,     0,  1016,   640,     0,
     896,     0,   901,   809,   810,   811,   767,   806,   808,     0,
     965,   769,   741,   762,   789,   768,     0,   891,   835,   708,
     710,   712,     0,     0,     0,     0,   764,   751,   829,     0,
       0,     0,   826,     0,     0,   706,     0,   713,   823,   825,
     832,     0,   758,   745,   746,   748,   749,   739,   740,  2246,
    2964,     0,   169,   997,   326,  1150,     0,  1157,   249,   247,
     326,   237,   245,   239,     0,   246,   307,   234,  1800,     0,
    1290,  1944,   804,  1780,  1424,  1497,  1281,     0,  1762,     0,
       0,  1760,  1759,     0,  1754,  1761,  2109,  2876,  2874,     0,
    1634,     0,   542,     0,   556,     0,   577,   495,  1269,  1642,
    1620,     0,  1625,     0,  1617,  1668,  1668,  1679,  2227,  2990,
     185,   214,  2980,   165,   174,     0,   924,     0,  1915,     0,
    1063,   927,   952,   934,     0,  1780,     0,  1063,   929,   951,
     932,  2153,     0,     0,     0,     0,  2158,     0,     0,  2165,
    2167,  2898,  1281,  1254,  1253,  1044,  1028,     0,     0,     0,
     692,     0,     0,     0,     0,     0,  2199,  2198,     0,  1020,
       0,   894,     0,   898,   899,   900,     0,   892,   807,   865,
       0,   837,   836,   711,   834,   833,     0,   865,   831,   827,
     717,     0,     0,     0,   824,     0,  1266,  1234,  2971,     0,
     171,   179,  1156,  1161,     0,  1158,  1160,     0,   231,   248,
    1801,  1950,  1572,  1238,  1763,     0,  1764,     0,  1767,     0,
    1768,  1928,  1936,     0,  2143,  1291,     0,   535,     0,   538,
     540,   554,     0,  1915,  1915,     0,     0,  1915,  1915,  1915,
    1915,   570,   578,   580,     0,  1662,     0,     0,     0,  1676,
    1674,     0,  2997,     0,   176,     0,     0,     0,  1063,   925,
     950,   949,   930,   944,     0,     0,   136,  1065,  1064,   935,
       0,   957,   960,   138,   933,   482,  2162,  2163,     0,  2160,
       0,     0,  2166,  1244,  1232,  1027,     0,     0,     0,     0,
       0,     0,     0,     0,   734,     0,   895,     0,     0,   770,
     966,   841,   840,   838,   839,   771,  1297,   830,   714,   800,
    1269,  1234,     0,     0,     0,  2966,   170,     0,   163,  1153,
       0,   238,  1758,  1766,  1769,     0,     0,   849,     0,   543,
     536,     0,     0,   552,     0,     0,  1915,  1915,     0,     0,
       0,     0,     0,   549,   579,  1915,  1622,  1627,     0,  1669,
       0,     0,     0,  2991,   194,   186,     0,   326,     0,     0,
     150,   942,   941,   134,   931,   943,   953,  1067,  1066,   948,
     947,   945,   946,  2161,  2169,  2168,     0,     0,     0,   924,
       0,   926,   928,     0,     0,   907,     0,   906,     0,   903,
     902,     0,   828,   718,  2967,  1270,  1281,  1281,     0,  2968,
    1266,     0,     0,     0,   172,  1159,  1935,  1937,  2144,   530,
     542,   539,   563,   555,   559,     0,   589,   583,     0,     0,
     585,   586,   584,   581,   574,     0,   572,     0,  1671,  1670,
    1685,     0,   185,   195,  2998,  1290,   178,     0,   924,     0,
     683,   924,   687,   689,     0,  1033,   909,   910,   908,     0,
       0,  1298,     0,   720,   721,   719,   722,  1281,  1246,  1249,
    1236,  2909,  2970,  2969,  1269,     0,  2972,     0,  2170,   537,
     563,     0,   561,     0,   557,   553,   558,   587,   588,     0,
     571,     0,   582,     0,     0,  2992,  2981,   161,   695,   691,
     924,   685,     0,     0,  1299,     0,   726,   715,   723,   725,
    1250,     0,  2902,  1281,  1270,  1255,  1256,  2973,  2974,     0,
    2156,   560,     0,   568,   564,   566,   569,   577,   576,   573,
    1677,  1675,     0,     0,   693,   905,   904,   728,   727,   724,
    1248,     0,  1235,  1257,     0,  2164,   562,     0,     0,   575,
    2993,     0,  2903,     0,  2172,   567,   565,  2982,  2171,     0,
    2176,  2977,     0,     0,  2183,  2975,  2976,     0,  2983,  2174,
    2175,  2173,  2178,     0,     0,  2180,  2181,     0,  2145,  2978,
     326,  2182,  2177,     0,  2184,  2186,     0,  2984,  2179,     0,
    1290,  2185,     0,  1291,  2187
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    63,   646,  1638,    64,    65,    66,    67,    68,   895,
     896,    69,   897,  1380,  1383,  1995,  2563,  2564,    70,   585,
      71,  1751,  2365,  2366,  3902,  3903,  3896,  3897,  3899,  3900,
    2367,   711,   712,    72,  2761,  4067,  3713,  3714,  2221,   654,
     655,  1116,  2755,  2815,  2816,  1647,  3710,  3878,  4652,  3882,
    4790,  4908,  4713,  2910,  4209,  4653,  4654,   580,  2750,  1712,
    4842,  2282,  4945,  2283,    73,   704,  1172,  1744,  1745,  4056,
    4057,  4058,  4332,  4337,  4338,  4339,  4340,  2915,   959,  2322,
    2916,  3888,  4460,  4467,  4468,  3415,  4660,  4661,  4662,  4465,
    1003,  4663,    74,   611,   612,  1005,  1507,  2010,  1508,    75,
      76,   579,  1406,  1407,  1408,  1409,  2577,  2011,  2572,  2573,
    3599,  3416,  4463,   960,   961,   962,    78,   586,   963,   964,
     965,  1463,   966,   967,   968,   969,  3128,   970,  1459,  3620,
     938,   939,  2602,  3611,  3994,    79,   548,   707,   708,  1750,
    2339,   709,  2340,  2921,  3895,   710,  1174,  2336,  1176,  3624,
     971,  2617,   972,  1455,    80,  1165,  1736,  1737,   973,  1090,
    2213,   992,  2083,  3625,  1468,   974,  2618,  2620,  2619,    81,
     596,   633,   606,  4064,  4344,   682,   683,   722,  2388,   684,
    1190,  1139,  1714,  2307,  2308,  2821,  2822,  2957,  2958,  2959,
    2299,  2300,  2301,  2377,  2378,  2379,  2289,  2290,  2291,  1718,
    2286,  2287,   685,  1140,  1150,  2302,  2303,  2304,  2963,  2381,
    2382,  2383,  2384,  2305,  1987,  2306,  3290,  3254,  4355,  4353,
    4354,  3255,  4074,  2649,  4516,  4016,  4017,  3725,  3726,  3381,
    3817,  2328,    82,   599,   981,  1471,  2072,  3138,  2073,  3140,
    3628,  3629,  3630,  2623,  2624,  4510,  2628,  3137,  4692,  5000,
    4818,  4819,  3632,  4817,  3636,  4007,  4008,  4298,  4512,  4696,
    5005,  4922,  5065,  5003,  5061,  5004,  5063,  5128,  5104,  5105,
    4933,  5015,  5016,  5069,  5107,  4831,  4832,  4833,  3152,  3655,
    3656,  4307,  4022,  4310,  4358,  2744,  1704,  1705,  3769,  1108,
      83,  3256,  2878,  3257,  3258,  3840,  2880,  2881,  3097,  1564,
    3830,  3801,  3707,  3719,  3720,  3721,  3722,  3723,  4580,  4752,
    4582,  4583,  4749,  4878,  4748,  3724,  3850,  3762,  3314,  3315,
    3386,  3853,  4185,  4436,  4428,  4619,  4620,  4635,  4983,  4636,
    5046,  5087,  5088,  5089,    84,   598,  1316,  4588,  4589,  4590,
    4214,  4187,  4188,  4189,  4190,  4191,  4192,  4193,  4642,  3480,
    3481,  4606,  4607,  4608,  3475,  3476,  4407,  3485,  4637,  4638,
    4639,  4640,  4215,  4238,  1528,  1529,  3730,  1541,  1542,  2677,
    2110,  2678,  1708,  4239,  4240,  4479,  3547,  4268,  3553,  3554,
    3555,  3053,  3054,  3055,  3056,  3057,  2513,  4622,  3852,  4405,
    4599,  4602,  4767,  4979,  3763,  3316,  3766,  1067,   656,  3317,
    3318,  4848,  4720,  4727,  4849,  4728,  4721,  4383,  2758,  4850,
    4851,  4852,  4730,  4723,  3247,  4348,  4349,  3755,  3571,  4609,
      85,   143,  2310,  1131,  1142,  1138,  1162,   690,  2318,  1143,
    2911,  3409,  4454,   671,  2882,  4398,  4116,  4402,  2883,  3779,
    2884,  4377,  4574,  2885,  4134,  4400,  4596,  3780,  3781,  2886,
    2887,  2888,  4856,  4857,  4858,  3319,  1443,   687,   688,  1154,
    1155,  1156,  2559,  3848,  3364,    86,  2199,  2194,    87,  1080,
    1081,  1082,  1612,  1613,  2197,  2198,  2721,  3206,    88,   714,
    1755,  1481,  2081,    89,   990,  2641,  2642,  2643,  3143,    90,
    1164,  1733,  1734,  2321,  3412,  3885,  4210,  4459,  4657,  4455,
    4794,  4795,    91,   716,  1183,    92,   553,  1763,  1764,  1765,
    2370,    93,  1470,   152,    94,   989,  1474,  1477,  1478,    95,
     703,  1166,  1167,  1168,  1169,  2324,    96,  2053,  2605,  2606,
    2607,  2608,  1741,  2917,  1742,  1743,  2333,  3618,    97,   669,
    3751,  1126,  1127,  4098,  4099,  4902,  4903,  3065,  3066,  1676,
    2776,  4369,  4741,  4984,  5091,  2790,  4742,  5093,  1677,  1678,
    1123,  1124,  2257,  1680,  1681,  2238,  1696,  1697,  1698,  4311,
    2260,  2261,  1609,  2262,  3275,  3744,  4982,  1227,  1223,   854,
     855,   856,   857,  1328,  1329,  4623,   858,  1338,  1947,  3494,
    3934,  3935,  3936,  3937,  4247,  1798,  1799,   859,   860,   861,
     862,   863,   864,   865,  1978,  3518,  3519,  3953,  2545,  2546,
    2547,   866,  2426,  3500,  2441,   867,   868,   869,  4090,   870,
    1322,  1933,  1858,  3945,  3508,  4252,  1783,  2402,  2995,  3917,
    2996,  2997,  3092,  2515,  1254,  1255,  1207,  2409,  1789,  2204,
    2205,  2206,  2207,  2208,  4048,  4049,  4519,  4319,  4521,  4323,
    2731,  2732,  2087,  2088,  2209,  2210,  2211,  2212,  3208,  4038,
    3567,  3976,  3070,  3061,  3062,  3063,  3209,  3210,  4035,  4036,
    4698,  2722,  3212,  3678,  3218,  4839,  4528,  4529,  4942,  4941,
    4530,  4327,  4328,  4053,  4054,  3423,  3424,  3425,  3160,  1847,
    1848,  1856,  1436,  1437,  1784,  2255,  2777,  3272,  3740,  2535,
    2779,  3738,  4087,  3742,  4091,  4092,  1975,  2543,  3087,  3579,
    3982,  4278,  4279,  4498,  4678,  4679,  4684,  2891,  3809,  3810,
    2780,  1682,  2770,  3263,  3735,  1567,  1568,  1683,  2163,  3194,
    3195,  4228,  3870,  4466,  3058,  3190,  3291,  1817,  1818,  3816,
    2250,  3266,  4081,  4082,  4083,  2242,  2243,  2766,  2767,  2768,
    1684,  2244,  3259,  4078,    98,   560,    99,  1993,  3095,  1378,
    2569,  1181,  1486,  1770,  1771,   885,   144,   574,   100,   587,
    2603,   101,   607,  2085,   943,   995,  1487,  1488,  2650,  3146,
    3153,  2651,  3148,  3643,  3644,  2554,  2555,  3149,  3646,  4013,
    3990,  2566,  3613,  4291,   102,   631,  3695,  3224,  3225,  4811,
    4812,   996,   103,   559,  1194,  2971,  4475,  1776,  2390,  4671,
    1195,  1196,  2393,   727,   728,   104,  1085,   627,  1591,  1592,
    1593,  2181,   105,   619,  1068,  3191,  3674,  2157,   985,  1375,
    1572,  1071,  1573,  2142,  2699,  1552,   106,  1122,  1121,   700,
     107,   108,   663,   153,  1670,   109,   898,  1399,  2006,  3104,
    3105,  3584,  1400,  1401,  2570,  4281,   110,   608,  1000,  1001,
    1492,  1490,  2662,  2090,   111,   601,   986,  2076,   112,   590,
     948,  1447,  2052,   113,   114,   115,   950,  3619,  4917,  5058,
     594,  2055,  1451,  4075,  4360,  4555,  4556,  4558,  4739,  4740,
    5100,  5140,  5151,  5144,  5154,  5155,  5158,  5164,  5165,   872,
    1097,  1098,   873,  4592,   874,   875,   876,   116,   117,  1092,
     635,  1625,  1626,  2740,  2216,  2738,  1627,  3155,  3156,  3264,
     877,  3157,   878,  3756,  1182,  1773,   583,   544,   679,  1099,
    2763,   880,   976,  1134,  1475,  1725,  1726,   546,   547,   118,
     618,  1015,  2105,  1518,  1029,  1546,  1536,  1545,  2130,  2694,
    2133,  2695,  2696,  3670,  3182,  3671,  3183,  1074,  2126,  1519,
    3184,  1520,  2119,  2120,  2121,  2122,  3176,  1534,  2116,  2139,
     119,   951,   552,  1453,  1454,  2614,   120,   630,   121,  1438,
    2043,  2044,  2599,  3117,  2600,   122,  1009,  1010,   123,   926,
    2747,  2583,  1983,  1137,  1984,  2029,   929,  1412,   930,   931,
    1427,  1421,  1430,  1424,  3397,  2903,  2904,  2587,  1991,  1727,
    2099,  2896,  3862,  1728,  2020,  2579,  2580,  2314,  4503,  3404,
    2907,  4284,  3603,  4504,  4505,   124,   157,   125,  4946,   555,
     719,  1189,  1515,   126,   127,   128,   129,  3267,  3268,  3278,
    5052,  5121,  2267,  2268,  1685,  3071,  2788,  2518,  2519,  2520,
    2521,  1318,  1319,  3072,  3559,  3560,  1699,  1111,  1658,  1649,
     145,   146,   147,   148,  1159,  1160,  3405,  3873,  4199,  4448,
    4449,  4788,  4905,  5147,  5148,  1651,  3241,  4843,  5113,  5141,
    5160,  1652,  1653,  1654,  3702,  4532,  4841,  5022,  5112,  1655,
    3240,  4061,  4710,  4947,   130,  1100,   643,  1636,  1631,  1633,
    2219,  2743,   131,   132,   133
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4356
static const int yypact[] =
{
    5347,  2784,  1836,  1832,  -127,   811, 61879, -4356,   857,  1751,
   -4356,   588,   958, -4356, -4356, -4356, -4356, -4356,  4277, -4356,
   62539,   102,   979, -4356, 32816, -4356, -4356, -4356,  1078, -4356,
     103,  1751, -4356,   102, -4356, -4356, 61879, -4356,   903,  1645,
     102, -4356, -4356, -4356, 54619, -4356,   588, 61879,   855, -4356,
   -4356, 54619,   211,   233,   985,  1436, -4356, -4356, 61879, -4356,
    1142,  2413, -4356,  1672,  1560, -4356, -4356,  1369, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,  3115, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, 33481, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  -155, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356,  1171, 61879,  1213, 61879,  1717,  1683,
   61879, 52639, 61879, -4356,  1283,  1767, -4356, -4356,  1824,  1338,
   -4356, -4356,  1751,  1360, -4356, -4356,  2032,   588, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356,  1413, -4356, -4356,  1461,  -127,
   -4356, -4356, -4356,  1308, -4356,  2104,  1904,  1670, 61879,   970,
   13956,  1908,  1908,  1908,  1914,  1964,  1908,  1908,  1908, 61879,
   -4356,  1908,  1908,  1908,  1751,   220, -4356, -4356, -4356,  2045,
   40759, 61879,  1803,   194,  -119, 52639, -4356,  1451, 61879,  -127,
     159, -4356,  1973, -4356, -4356, -4356, 69139,  1751, 13956,  2192,
    2057,   268, 61879, -4356, -4356, -4356, 69139,   200,  1279,  1636,
   -4356, -4356,  1754, -4356, 41419,   214, -4356, -4356,  9173,  7566,
    1754,  1761,  -127,   694,  1763,  -127, -4356, -4356, 61879,  -127,
    1751,  1991, -4356, 13956, -4356, -4356, -4356,   161,   161,   161,
   -4356,   161, -4356,   161, -4356, -4356,  1619, 61879,  2070, -4356,
    2070, -4356, -4356,  2070,  1581,  1802,  2074,  2089,  2092,  1739,
    2720,  1338,  2878, -4356, -4356, -4356,  1655, -4356,  1652, -4356,
     972, -4356,  1719, 46039, -4356, -4356, 61879, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356,  1165, -4356,  1768,   849, -4356,
    1804,  2180, -4356, 52639, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, 32816,  1678, 61879, -4356,  2221, 13956,  1461,
   -4356,  1784, -4356, -4356, 32816, -4356, -4356, 32816,   257,    20,
   61879, -4356, -4356,  2379, -4356, -4356, -4356, 55279,   970,  1707,
    1709,  1729, 18751, -4356,  1731,  1738,  1740, 13956,  1743,  1749,
    1757,  1787,  1805,  1820,  1825,  1827,  1853,  1860,  1863,  1867,
    1871,  1873,  1880,  1880,  1880,  1884,  1902,  1920,  1925,  -182,
    1933, -4356,  1940,  1944,  1963,  1965, -4356,  1971, -4356,  1975,
    1977,  1983,  1992,  2000,  2005, -4356, -4356,  2010,  2025,  2035,
   14641,  2047,  2052,  2055, -4356, 29486,  2075,  2097,  2110,  2112,
    2123,  2139,  2142,  2146,  2150, -4356, -4356, 13956,  1884,  2171,
   -4356, -4356,  2182,  2194, -4356,  2201,  2205,  2214,  2218,  2226,
    2232,  2234,  2240,  2245,  2271,  2329,  2336,  2338,  2340,  2356,
    2358,  2363,  2365,  2373,  2381,  1884, -4356,  -181,  2386,  2391,
    1109,  2396, -4356,  2408, -4356,   239,  2421,  1880,  1884,  1884,
    2424,  2431,  2444,  2451,  2462,  2469, 18751, 18751, 18751, 13956,
   -4356, 61879, 61879, -4356,   871,  3360, -4356,  3152, 18751, -4356,
     204, -4356, -4356, -4356, -4356, -4356,  2029, -4356,  2038, -4356,
   -4356,  1765,  1876, -4356, -4356, -4356, -4356, -4356, -4356,  2474,
    1839, 61879, 61879, 61879,  2276, 61879, 61879, 61879, -4356, 52639,
    2009, 61879, -4356, -4356,  1908, -4356, 13956,  1945,  4640, 25491,
    2154,  2039,  1886,  1880, -4356, -4356,   -99,   -82,   598,  2176,
   -4356, -4356,  2027,   665,  2209, -4356,   774,   498, -4356,   118,
     864,   930, -4356, -4356, -4356, -4356, -4356, -4356,  2030,  2393,
    2126, -4356, -4356,   171, -4356, -4356, 61879, -4356,  2655, 13956,
   -4356, -4356, -4356,  2581,  2341, -4356, -4356, -4356,   222,  2797,
     252, 32816,  1832, 61879,   172, 71119, 71119, 61879, -4356, 65839,
   -4356,  2252, -4356, -4356,  7433, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  2278, -4356, -4356,   871,
   -4356, -4356, -4356, -4356, -4356,  2696, -4356, -4356, 49339, 32816,
    1555, 69799, -4356, -4356, -4356, 30151, -4356, -4356,  2946, -4356,
    2377, -4356, -4356,  1876,  3647, -4356,  2763,  2154,  2734, -4356,
    2970, -4356,  2789,  2683,    20, 55939,  1211,  2677,  -190,  1324,
    1465, 40096,   868, 52639,  1504,    65, 22159, 46699,  2501, -4356,
   -4356, -4356,   765,  2670, -4356,  3023, -4356,     8, -4356,  2528,
    3088,     8, 49999,  2928,  1616, -4356,   384, -4356,  3021, -4356,
   -4356, -4356, -4356,  2671,  2653,  2702, -4356,   420,  2100, -4356,
    -127, -4356,   783, -4356,  2685,  2928,     8,  1616, -4356,  2954,
    3078,   467,  3061, -4356,  -161, -4356, -4356, -4356,  -100,  3168,
   -4356,  2587, -4356, -4356, -4356, 32816, -4356, -4356, -4356,  2581,
   -4356,   393, 61879, -4356, -4356, -4356, -4356,  2591, -4356, -4356,
    2894,  2716, -4356, -4356,    52,  3140, -4356,  1832, 61879, -4356,
   -4356, -4356,   323,  1750,  1824,  2070, -4356,  2070,  2070,  2070,
    2070,  1360, 47359,  1773,  2658,  1652,  2626,  2813, -4356, -4356,
   -4356,  3187,  3203,  1880,  2636, -4356, -4356, -4356, -4356, -4356,
    3320, -4356, -4356,  2933,  3217,  3217,  3217,  3335, -4356, -4356,
   -4356, 32816, -4356, -4356, -4356,   849, -4356, 46039,  2835,  2700,
   -4356, 61879,  1804, -4356, 32816, -4356,  3080,  2667, -4356, -4356,
    2942, 13956, -4356, -4356, 13956, 69139,  3196,   871, -4356, -4356,
     543, -4356, -4356, 32816,   238, -4356,  3307,  2903, -4356, -4356,
   -4356,  3320,  3217, 32816, -4356,  2688, -4356,  2694, -4356, 13956,
   13956,   360,  3312,  3363,  3363,  3363,   871,  2737, 13956, 13956,
   13956, 13956, 13956, 13956, 13956, 13956, 13956, 13956, 13956, 13956,
    1558,  2709,  2710, -4356, -4356, -4356,   282, -4356,  2711, 13956,
   13956, -4356, 13956, 13956, 34146,  2714, -4356,  4439, 13956, 13956,
   13956,   405,  3251, 13956, 13956, 13956, 13956, 13956, 13956,  4652,
   13956, 13956, 13956, 34146,  3392,  2729, -4356,  2715,  1631, 13956,
   13956,  1704, 13956, 13956, 13956, 13956, 13956, -4356, -4356, 13956,
   13956, 13956, 13956,  2728, 13956, 13956, 18751, 13956,  2738, 13956,
   13956, 13956, 13956, 13956,  2740,  2741, 13956,  3363,  3363, 13956,
   13956,  1762, -4356, -4356, 13956,  3170,  3170, -4356, 13956,  9846,
   13956, -4356, -4356,  2744, -4356, -4356, -4356, 34146,  3363,  3363,
   13956, 13956, 13956,  3312,  3312,  3312,  2745,   375, -4356,  2761,
   13956,  2749, 22825, -4356, -4356, -4356, -4356, 13956, 13956, 13956,
   18751, -4356,  1547, -4356, -4356, -4356, -4356, -4356, 15326, 18751,
   18751,  2751, 18751, 18751, 18751, 18751, 18751,  3153, 18751, 18751,
   19436, 20121, 18751, 18751, 18751, 18751,  1084,  3312, 52639, 18751,
   36796, 13956, -4356, -4356, 61879, -4356, -4356,  2752, -4356,  3052,
    2009, -4356, 50659, -4356,   -54,  3279, -4356, 49339, 32816, -4356,
    1945,   871, -4356, -4356,  3149, -4356,  3150,  3154,  3155, -4356,
   -4356, -4356, -4356,  3398,  3158, -4356,  -127,  3159, -4356, -4356,
    2775, -4356, -4356, -4356, 21491, 52639, -4356,  2778, -4356,  2794,
   -4356, -4356, -4356, -4356, -4356, -4356,  2887, -4356, -4356, -4356,
   -4356,  2785, -4356, 49339,  2785, -4356, -4356,  2785, -4356, -4356,
    2785, 46039,   842,  4329, -4356, -4356, 61879, -4356, 63199, -4356,
    3223,   230, -4356, 30151,  -127, -4356,  3235, 16011, -4356, -4356,
   -4356,  3182,   260,  2796, -4356, -4356, -4356, -4356,  3276, 61879,
   -4356, -4356, -4356, 13956,  3180,  2798, -4356, -4356, -4356,   343,
   32816,  1711, -4356,   234,  2801, -4356,  2888,  2806, -4356,  2892,
   -4356, -4356, 32816,  2802, -4356, 32816, -4356, -4356, -4356,  3076,
    2895, -4356,  -127,  1279, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356,  2811,  2826,  3293,
    2814, 49339, 46039,   872, -4356, 61879, -4356,  2812,  2822, -4356,
     765, -4356, 50659, 61879, -4356, -4356, -4356, -4356, -4356,  3434,
   13956, -4356, 49339, -4356,   850, -4356,  1184,   982,   765, -4356,
   -4356, -4356, -4356, -4356, 61879, 56599,  2825, 10531,  2956,  3261,
   -4356, -4356, -4356,  2852,  2070, 61879, 61879, 61879, 32816, 61879,
   49339, 32816, -4356,   962,   962, -4356, -4356, -4356, 44719, -4356,
   -4356, -4356,     8, 61879, 61879,     8, 46039, -4356,  1616,   -16,
   61879,     8, -4356,  3267,  2957, -4356, -4356, -4356,  3341, -4356,
   -4356,  3334,  2855, -4356,  3365, -4356, -4356,  2983,  1616, -4356,
   -4356, 32816, -4356, -4356,  1616, -4356,  1616,  1616, 13956,     8,
       8,     8, -4356,   -50, -4356, -4356, -4356,  3013,   694, -4356,
   -4356, -4356,   603, -4356, -4356,  2860, -4356,  2864, -4356,   161,
    3125, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,  3366,
   -4356, 50659, 46039,  3342,  2070,  2070, -4356, -4356,  3377, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  2070, -4356, -4356, -4356,
   -4356, -4356, -4356,  1804, 52639, 61879, 61879, 61879, 32816, -4356,
   -4356, -4356, -4356,    79,   951,  3505, -4356,  1159, -4356,  1597,
    1159,  2904,  2928, -4356,  3351, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  2884,  2658, -4356, -4356,
    2880,    31, -4356, -4356,    98, -4356, -4356, -4356,  2370,  3422,
   -4356, 52639,  2136,   714,    66,  2136,  2886,  -127,   163, -4356,
     163, -4356, -4356, -4356,  3331, -4356,  3332,  -126, -4356,   241,
    2070, -4356, -4356,  2890, -4356,  3156, -4356, -4356, 57259, 32816,
   -4356, -4356, -4356,  1769,  2897,  2898,   871,   871, 66499,  3524,
    2934,  4867, -4356, -4356, 32816, -4356,    34, -4356, -4356, -4356,
    2959, -4356, -4356, -4356, -4356,  1561, -4356, -4356,  2345,  2961,
    2905, -4356,  3076, -4356,  1244, 61879,  3387, 37456, -4356,   383,
     242, -4356,  3363,  2912, -4356,  2914,  2915,  2916, 13956,   263,
    1362,   391,  -199,  1714,   403,   385,   446,   408, -4356,  1796,
     428,   430,   435,   280, -4356,  2917,  2924, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  2919, -4356, -4356, -4356,
     437,   489,  1015,  1388,  2922, -4356,  2932, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356,  3404, -4356,  1457,
     568,  1808, -4356, -4356, -4356, -4356,  2947, -4356, -4356,   189,
     254,  1467,   593,   780,   806,  2940,  1494,  2948,   832,  1897,
    1927,  2935, 34146, 61879,  3363,  2950,  1496,  1590,  3363,  2953,
     839,  1600,  1936,  1993,  2021,  1638,   844,  1658,  1663, -4356,
    1009,  2059,  2258,  1710, -4356,  1025,  1047,  1727,  1079,  1090,
   -4356, -4356,  1770,  2955,  2958,  1097,   284,  3363,  2960,   293,
    2962,  2973,  1776, 11216, 11901, 12586,   264,  1144, -4356,  2975,
   -4356,  2715,  2976,  2978,   297,   232,  1781, -4356, 13956,   578,
     179, 61879,   982, -4356,  3114,  2727,   236, -4356, -4356, -4356,
   -4356, -4356, -4356,    70, -4356,  2972, -4356,  2981,  2312,  2964,
   13956,   206,  2964,  3287,   854,   854, 18751,  3100,  3600, 14641,
    2135, 14641,  2135,  2964,  2964,  2964, -4356, 18751,  2985, 18751,
   18751, -4356,  3312, -4356, -4356, -4356, -4356,   871,  2990,   713,
   61879, 32816,   -54,  2992, -4356, -4356, -4356, -4356, -4356,   765,
   -4356,  2996,   151, 32816, -4356, 13271, -4356, -4356, -4356, -4356,
   -4356,  -127, -4356, -4356,  4892, -4356, 32816,  3050,  3087,  3096,
   -4356, 26825, -4356, -4356, -4356, -4356, 26825,  1103, -4356, 61879,
   -4356,  3041, -4356, -4356, -4356,  -212, 30816, 30816, -4356, 30816,
   -4356, -4356, -4356, -4356, -4356,   498, -4356, -4356, -4356, -4356,
     267,   275,  2662,  2904, -4356, -4356, -4356, -4356, -4356, -4356,
   36136,   871, -4356, 32816, -4356,  3436,    -1, 32816, -4356, -4356,
    3425,   871, -4356, -4356, -4356, -4356, -4356, -4356,  3004, -4356,
     124,   124,  3273,   209, 13956,  -127, -4356, 49339, 49339, 32816,
   32816, 32816,   817, 13956, -4356,  2346,  3011, -4356, -4356,  1490,
   -4356,  3680, -4356,  3647, 21491, 50659,  3481,  3494, -4356,  3018,
   30816, 30816, 30816, -4356, 55939,  3500, 10531,  3503, -4356, 51319,
   -4356,   871,   765,  3026,  3028, -4356, -4356,  3428,   610, -4356,
    3030,  3031, -4356,  3034,  3036,  3037, 55939, 13956, -4356,  1184,
   -4356, -4356, -4356, -4356, -4356, 18751,  1940, -4356,   871, -4356,
   -4356,  -127,  3513,  -127, 13956,  3045, 61879, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,  3553, -4356,  3237,   -95, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356,     8, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
    3296,  2928,  2100,  3261, -4356,     8,  1616, 32816,     8,     8,
     871, -4356, -4356, -4356, -4356, -4356, -4356,  3063, -4356,  3122,
   -4356, -4356, -4356, 61879,  1402,  3234, -4356,  3070, -4356, -4356,
   -4356, 32816, -4356, 69139, 61879, 61879, -4356,  3071, -4356,  3559,
   -4356,   195,   415,  -126,  2070, -4356, 61879, 61879,  2070,  2070,
   61879, -4356, -4356,  1551,  3367,  3375, -4356, -4356, -4356, -4356,
    3179,  3179, -4356, 23491, -4356, -4356,  3142,  3509, -4356, 61879,
   -4356, -4356,   879, -4356, -4356,  3566, -4356, -4356,  3390, -4356,
    3108, -4356, 13956, -4356, -4356,  1834, -4356, -4356,  1337,  1773,
   -4356,   765,   765,  3429, -4356,  -127,  3247,  3249,  3252,  3253,
    3260,  3302, -4356, -4356,  -127,  -127, -4356, -4356,   765, -4356,
    1031, -4356, -4356, -4356, -4356,  2241, -4356,   765,   765, -4356,
    2185, -4356, -4356, -4356, -4356, -4356, -4356, -4356,   298, -4356,
    3913,   158,  1121, 46039,  3157, -4356, -4356, 32816,  3419, 32816,
    3606, -4356,  3678, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356,  3133, -4356, -4356, 13956,  3228, -4356, -4356,  2934,
   -4356,  3151,  3163,  3164,  3165,  3166,  3169,  3172,  3173,  3175,
    3176,  3177,  3183,  3184,  3185,  3189,  3191,  3192,  3193,  3198,
    3200,  3201,  3205,  3206,  3209,  3135, -4356, -4356, -4356,  3195,
   -4356, -4356, -4356,   765,   765,   765,   765, -4356,  2833, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356,  3540,  2834, 61879,
    3207, -4356, 37456, -4356, -4356,   603, -4356,  3197, 16696, -4356,
    3139, -4356, 13956, -4356, -4356, -4356,  1422, 13956, 13956,  3693,
    3145, -4356, 51979, -4356, -4356, -4356, 13956, -4356, 13956, -4356,
   13956, 13956, 13956, 13956, 51979,  3145, 13956, -4356,  3181, -4356,
    3622,  3624, -4356, -4356, -4356, -4356, 13956, -4356, 13956, -4356,
   13956, 13956, -4356, 13956, -4356, 13956, -4356, 13956, 13956, 13956,
   13956,  3478, 13956, 13956, -4356, -4356, 18751, -4356,  3199,  3208,
   -4356, -4356, -4356,  3211, -4356, 13956, -4356, -4356, -4356, -4356,
   -4356, 13956, -4356, -4356, 13956, -4356, 13956, -4356, 13956, 13956,
   -4356, 13956, 13956, -4356, -4356, -4356, 17381, 13956, 13956,  3212,
   -4356, -4356, 13956, 13956, 13956, -4356, 13956,  2464, 13956,  2478,
   13956,  2487, 13956, -4356, 13956, -4356, -4356, -4356, -4356, 13956,
     397,  2673,  1490,  3215, -4356,  1765, -4356,  3218,  1537, -4356,
    3280, -4356, -4356, -4356, 52639, 13956, -4356, -4356, -4356, -4356,
   -4356, 18751,   322,  3220, 18751, -4356,  3287,  4652,  4652,  2494,
   13956,   206,  3287, 61879, 13956,  3221,  3222, -4356, 13956, 61879,
   -4356, -4356, -4356, 50659, -4356, 52639, 49339, -4356, -4356, -4356,
     151,  1940, -4356,  3224, -4356,   871, -4356, -4356, -4356,  3004,
      41,  3239,  3226, -4356, -4356, -4356, -4356, -4356, -4356,  2079,
   -4356, 46039,  3897, -4356,  3227, -4356,  3230,  3314,  3316,  3326,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,  2928, 69139,  2346, -4356, -4356,  3243, -4356, -4356,  2942,
    3179,  3250,  3635,  3842, -4356, -4356, -4356, -4356, 69139, 69139,
   13956,  3255, -4356, -4356, -4356, -4356, -4356,  2673,  3368, -4356,
    3920,   871, -4356,  3336, -4356, -4356, -4356,   256, -4356, -4356,
   -4356, -4356, -4356,   828,  1960, -4356,  3257,  3257, 28821, -4356,
   -4356, -4356,  3438, 61879, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,  3278, -4356, -4356,  3546, 49339, 46039,  3739,
    3745,  3746, -4356,  6621, -4356, 49339, -4356, -4356, -4356, -4356,
   -4356,  3369,  3370,   -44, -4356, -4356,  3687,  3507, -4356, -4356,
   -4356,   765,   871, -4356,  2825,  3284, 24157, -4356,  1247, -4356,
   -4356,   871,   301, -4356, 48019,  3790, 48019, 48019, -4356, -4356,
    3587, -4356, -4356,  3513, -4356,  2904,  1616, -4356, -4356,   -50,
    2490, -4356,   870,  3289,  3702,  3703, -4356,  3571,  2168,  3571,
   -4356, -4356,  3289, 34146,   603,  3076, 67159, -4356,  2082, -4356,
    3955,  1490,  3637, -4356, -4356,   224,  3973, -4356,  3157, 61879,
    3305,  -116, -4356, -4356, 61879,  3781,   216,   216,  3602, 32816,
   32816,  4416, -4356, -4356, -4356, 52639,  3309, -4356, -4356, -4356,
   13956, -4356,  3477, -4356, -4356, -4356,  3379, 13956,  3952,  3776,
    2928, -4356, -4356,   871, -4356,  3318, -4356, -4356, -4356, -4356,
    1159, -4356, -4356, 51319, 48679, -4356, -4356, -4356, -4356,  3888,
   -4356,  3890,  1543, -4356, -4356,  3348,    66, -4356,  -127,  -127,
    -127,  -127,  1490,  -127,  -127,  2084, -4356,  3348,  3348,   163,
   -4356,   165, -4356, -4356, -4356, -4356,  3268,   765,  3929,  3596,
     765,   765,  3929,   765,  3597,  3601,   765,   765,  3417,  3877,
     765,  3752,  3446,  3657,  3754,   765,  3612, -4356,  3456,  3892,
     765,   765,   765,   765,   765,  3929,  3626,  3987,   765,   765,
   -4356,   765,  3627,  3628,   201,  3629,  3633,   765,   765,   765,
     765,  1228, 61879,   765,   765,  3638,   765, -4356, -4356,  6301,
   -4356, -4356, -4356, -4356, -4356, -4356,   905, 31486, -4356, -4356,
   -4356, -4356,   765,   -55, -4356, -4356, 52639,  3466,  3468, -4356,
   -4356,  3469, -4356, -4356,   167, -4356,  2304, -4356, -4356,   528,
   -4356,  3588, -4356,  2015, 53299, 67819,  3381,  3383, 57919,   871,
   69139, 13956, -4356,  3388,  3394,  3395,  1490,  1490,  -127,  -127,
    1247,  -127,  1490,  -127,  -127,  -127,  -127,  -127,  -127,  -127,
    1490,  1490,  -127,  1020,  2675,  -127,  1490,  4867, -4356,  -127,
    2673,  3348,  3348,  2345, -4356,  3851,   765, -4356,  2697, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,  3385,
     603,  2904,  1734,  2904,  3401, -4356, 14641,  1801, -4356,   871,
   13956,   871,  2449, -4356,  3402,  3402,  3402, -4356,  3405,  3407,
   -4356,  3402,  3822,  3402,  3825,  3410, -4356, -4356,  3411,  2090,
    2457, -4356,  2101,  2549,  1812,  3412,  3413,  1765, -4356, 13956,
   13956,  1828,   328,  1843,   649,  1869,  1889,  1232,  1293,   336,
   -4356,  1891,  1896,  3522, -4356, -4356,  1900,  1917,  1923,  1931,
    1938,  1309,  1953,  2103, 14641,  1967,   270,   348, -4356,  1972,
    1333,  1367,  1986, 13956,  2048, 13956,  2099, 13956,  2137,  2144,
    2210,  3415,  3415,   199, -4356,  3414, -4356, -4356, -4356,  3424,
   -4356,  3351, -4356,  2766,  3218,  3416,  3599, -4356,  1159,  1834,
   -4356,   578, -4356,  3427,   871,  3420, -4356, -4356, 13956, -4356,
     204, -4356, -4356, 18751,   370,  3430, -4356,  3695, -4356,   871,
   -4356, -4356,  3437,  1765, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, 13271, -4356,  3670, -4356, -4356,  4462, 26825, -4356, 61879,
    1444,  3725,  3447, 38116, 46039, 46039, 46039,  3441, -4356, 63859,
    3736, 32816, -4356,  3882, -4356, -4356, -4356, -4356, 61879, 71119,
   71119, 71119, 71119, 61879, 18751, -4356,  4077,  3448,  3450,  3463,
    3452, 49339,  3775, -4356, -4356,  3663, 34146, -4356,  3454, -4356,
    3454,  2041,  3459,  2107,  3632, -4356, -4356, -4356,  3455, -4356,
    2134, -4356, 21491,  3936,  2996, -4356, 46039, 46039, 46039, -4356,
   -4356,  3462,  3473,   157,  3698, -4356, -4356, -4356, -4356, 10531,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,  2928, -4356, -4356, -4356, -4356, 48019, -4356, -4356, -4356,
   -4356, -4356,     8, -4356,  3476, -4356,  3467, -4356,  3475,  1456,
    1537, -4356,   603,  2761,  2862, -4356, -4356, -4356,  3895,  3571,
    3571,  3289,  3896,  1377,  3483, -4356,   765, -4356,  2867,  3497,
   -4356, 61879,  3486, -4356, -4356, 46039, -4356,  3674, -4356,   909,
    3487, 61879, -4356,  4052, -4356, -4356, -4356, -4356, -4356, 32816,
   -4356, -4356, 32816, 27491, -4356, -4356,  3760, -4356,  4162,  2773,
   -4356, 23491,   871,  3496,  1570,  3829,  3501, -4356, -4356,   871,
   13956, -4356,  3530, -4356, -4356, 53959, -4356, 38776,  1151, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,  2241, -4356, -4356, -4356,   298, -4356, -4356,
   32151,  2070, -4356, -4356,   531, -4356,  2070,  1769,  1769,  3942,
   58579, 34811,   102,  1247,  1490,  1914,  1490, 59239,   102,  -127,
    -127,  2773,   765,  1490, -4356, -4356,  1914,  3914,  1908,  3915,
    1914,  1914, -4356, 52639, 61879, -4356,   765,  1587,  1490, 59899,
    1247,  1247,  1914,   102, 34146,  1471,  3717, -4356,  -127,   102,
   -4356, -4356, -4356, -4356, 32816,   102,   102,  3053,  3855,  3905,
    3917, -4356, -4356, -4356,  1490,  3717, 59239, -4356, -4356,  5479,
   -4356, -4356, -4356, 28156, 61879,  1235,   576, -4356,  3498, 42739,
    3605, -4356,   175, -4356, -4356, -4356, -4356,   350,  1490,  1490,
    1490,  2675,   -53, -4356,  2304,  3521,  1832,  1311,  3607,  1557,
   -4356,   146, -4356, -4356, -4356,  3979,  3525,   367, -4356,  3520,
   -4356, 59239, -4356,  3529, -4356,  3531, -4356, 64519,   871,  1490,
    1490,  1490, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, 61879,  3348,  2834, -4356, 37456,  2904,  3390, -4356, -4356,
    4652, -4356,   871, 13956,   965, -4356, -4356, -4356, -4356,  1141,
   -4356, -4356, -4356,  3831, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,  3057, -4356, -4356,  3145, -4356, -4356, -4356,
    3534,  4652,  4652, -4356, -4356, 13956, -4356,  4167,  3711, -4356,
   -4356, 13956, 13956, -4356, 13956, -4356, -4356,   227,  3538,  3568,
   -4356, -4356, -4356, -4356, -4356, 13956, -4356, -4356,  4652, -4356,
   13956, -4356, -4356, 13956, -4356, 13956, 13956, -4356,  2229, -4356,
    2282, -4356,  2287, -4356, -4356, -4356,  2673,  3548,  3947, -4356,
   -4356, -4356,  2673,  3747, -4356, -4356,  2673,  1490, -4356,  2884,
    2766, -4356,  3551,  1498, -4356, -4356, -4356, -4356, -4356,  3616,
   61879, -4356, -4356,  2159, -4356, -4356, 13956, -4356,  4188,  3840,
   53959, -4356, -4356, -4356,  4056,  3948, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356,  4028, -4356, -4356, -4356, -4356,  -126,  -126,  -126,
   13271,  2686,  4093, -4356, -4356, -4356,  3882,  3970, -4356,    76,
    3569, -4356, -4356, -4356, -4356, -4356, -4356, -4356,  3572,  3574,
   -4356, -4356, -4356,  3287,  3963,  3843, -4356, -4356,  2673, 61879,
   -4356, -4356, -4356,  3577, -4356,   765, 13271,  3257,  2761, -4356,
     904,  2041, 34146, -4356, 38776,  1073,  2658, -4356, 61879, -4356,
   46039,  3018,  3018,  3018, -4356, -4356, -4356, -4356, -4356, -4356,
   24157, 55939, -4356, -4356,  2928, -4356,  -127,  2755, -4356,  3774,
   -4356, -4356,  3280,  1159,  3070,   578, -4356,  3289,  3986,  3992,
   -4356,  3289, -4356, -4356, 34146,  2904, 13271, -4356, -4356, -4356,
   -4356, -4356, 61879, -4356, -4356, -4356, -4356,  3732, -4356,  2260,
    3876,  3608, -4356,  3590,  3591, -4356, 34811, 32816,  3586,  3603,
    3610, -4356, -4356, -4356, -4356,   922, -4356,  5337, -4356, 48679,
   -4356, -4356, 13956, -4356, -4356, -4356, -4356,  3604,  1100,  1570,
   13956, 61879, -4356, 60559, -4356, -4356, -4356, -4356,  1202, -4356,
    3609, -4356, -4356, -4356,  1832, -4356, -4356,   102,  3613,  3996,
    4009,  1769, -4356,  2070, 34811, -4356,  2070,  2070,  1832, -4356,
   -4356, -4356,   104, 59239, -4356, -4356, 34811, -4356, -4356, -4356,
    3614, -4356, -4356,  2673, -4356, -4356, 48679,  -127, -4356, 34811,
    1914, 61879, -4356, 34811, 34811, -4356,  3634,  -127, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, 34811, 59239,  3617,
   -4356,  1570, -4356, -4356, -4356, -4356, -4356,  2192, -4356, 59239,
   -4356, -4356, 59239, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
    3615,  2758,  1941, -4356,  3620, -4356, 61879, -4356, -4356, 32816,
   -4356, -4356, -4356,  7937, 61879, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356,  -127, -4356, -4356, -4356, -4356, -4356, -4356,  1256,
   -4356, -4356, 61879,  4263, -4356,  3852, 13956, 13956,  3902, 61879,
    3916, -4356,  4220, -4356, -4356,  4058,  4101, 61879,  8449,  4105,
    4106, -4356,  3631, -4356, 57919,  3721,  2195, -4356, -4356,  2227,
   -4356, -4356,  2237, -4356, -4356, -4356, -4356, -4356,  3197, -4356,
    4024,  1455,   871,  3642,  3644,  3648,  3650,   305,  2259,  3652,
   -4356,  3402, -4356,  3405, -4356, -4356, -4356,  4251, -4356, -4356,
    3402,  4055, -4356, -4356, -4356, -4356, -4356, -4356,  3651, -4356,
    3654,  3658,  2291, 13956,   161,  3660,  2317,  1394,  2261,  3965,
    4042, -4356,  3900, -4356,  2354,  1541,  2359,  2376,  2397,  2409,
   -4356, -4356, -4356, -4356, -4356,  3665, -4356, -4356,   508, -4356,
    3656,  3108, -4356, -4356, -4356,  3351,  3280, -4356, -4356,  2274,
   13956,  4295,  1195, -4356, -4356,  4330,  3953,  3696,  3696,  3696,
    2280, -4356, 69139, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
    4091, 61879, -4356, 61879,  3671,  1837, -4356,  2288, -4356, -4356,
    3672, 34146, 13271,  3673,  3669, -4356,  3379, -4356, -4356, -4356,
    1073,  3668,  1159,  1337,  1159, -4356,  2884, -4356, -4356,  3018,
   -4356, -4356, -4356, -4356, -4356, -4356,  2658, -4356,   578, -4356,
   -4356, -4356,  2971,  3726,  3289,  3289,  3219,  3727, 13956,  3676,
   -4356,  3390, -4356, -4356,   354, -4356,  3681,  3677, -4356, -4356,
    -127,   859, -4356, -4356,   358,  3861, 52639,  3683, 61879, 61879,
    3686,   969, -4356, 28156, -4356,  4345, -4356, -4356,  4294,  1570,
   13956,  3689,  3692, -4356, -4356, -4356, 13956, -4356, -4356,   871,
    4352,  3704, -4356, -4356, -4356, 39436,  1773,  3609,  3694,  3872,
    4204, -4356, 13956,  2070, -4356, -4356, 34811,  3756,  1150, 34811,
   34811,  4208,  4258,  4259, -4356, 34811,  1561, 61879, -4356,  3434,
   -4356, -4356, 34811,  3614, -4356,   207,  3815, -4356,  1235, -4356,
   34146, -4356, -4356, -4356, 61879, -4356, 32816, -4356, -4356,  3716,
   -4356,  3402,  3402,  3402, -4356, -4356,  3402, -4356,  3405,  3969,
    3719,  3405,  3405, -4356, -4356, -4356, -4356, -4356,   305,  2578,
   -4356, -4356,   305, -4356, -4356, -4356,   131,  1639,  3405, -4356,
   -4356, -4356, -4356, -4356,  3723, -4356,  3402,  3402,  3402, -4356,
   -4356,   305,  3402, -4356,  3402, -4356, -4356,  3405,  -204,  3402,
    3402,  3402,  3402,  3407,  3714, -4356, -4356, -4356, -4356,  2297,
   -4356, -4356,   871,  4652,  4318, -4356, -4356,  3883,  -127,  4256,
   61879,   170, -4356, -4356,  3434,  4276,  1263, -4356, -4356, -4356,
   69139, -4356,  1490, -4356,  1490, -4356,  1490, 45379, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356,   246, -4356, -4356, 51979,  4375,
   -4356,  4031, -4356, -4356, -4356, -4356, -4356,   305, -4356, -4356,
   -4356, -4356,  3731,  1570, -4356, -4356, -4356, 13956, -4356, -4356,
    4064,  4233, -4356, -4356, -4356, -4356, -4356, -4356,  3735, -4356,
    1490,  3390, -4356, -4356,  3737, 13956, -4356, -4356,  3740,  3567,
    4274, -4356, -4356,  3039, -4356, -4356, -4356, -4356, 13271, 68479,
   -4356,  4148,  3844, -4356, -4356, -4356,  3742,  3920, 61879, -4356,
    3843, -4356, -4356, -4356, -4356, -4356, -4356,  1159, -4356, -4356,
   -4356, -4356, -4356, -4356,  3108,  2884, -4356,  3743, -4356,  3796,
   -4356, -4356, -4356,  3798,   871, 61879,  4024, -4356,   425, -4356,
   -4356, 61879,  8449, -4356, -4356, -4356, -4356,  3749,  3753, -4356,
   61879, -4356, -4356, -4356,  4043,  1311,  4040, 61879,  2313,  1570,
    3757,  2320, -4356,  3379, -4356,  6301, -4356, -4356,  1193,  1410,
    4151, -4356,   871, -4356, -4356,  1570,  3761, 61879, -4356, -4356,
    1159,  1795,  1159,  3755,    31, -4356, 34811,  -110,  2436, 34811,
    3756,  1262,   216, -4356,   216, -4356, -4356, -4356, -4356, 20806,
    1235, -4356, -4356, -4356, -4356, -4356, 32816, -4356,   102, -4356,
   -4356,  3614,   828,  3763, 61879,  4120, -4356, -4356, -4356, -4356,
   -4356,  -158, -4356,   161,  -158,  -158, -4356,  2677, -4356,  3806,
     305, -4356, -4356,  3807, -4356, -4356, -4356,  -158,  2128,   161,
     305, -4356, -4356, -4356, -4356,  -158,  3194,  3907, -4356,   305,
    4375,   305,  4375,  -158,  -158, 61879, -4356, 61879, -4356,  2761,
   -4356, -4356, -4356, -4356, -4356,  2323, -4356, -4356, -4356, -4356,
   42079, -4356, 13956, -4356, -4356, -4356, -4356, -4356,  2761, 65179,
   -4356, -4356, -4356,  4272,  3958,  3978, -4356, -4356, -4356, -4356,
    3782, -4356, 13956, -4356,  2442, -4356, -4356, -4356,  3788,  2928,
    3496, -4356,  4150,  3977,  3050,  3087,  3096,  4034,  4293, -4356,
    4044,  4411,  4081, -4356,  3039, -4356, -4356,  3854, 32816, -4356,
   -4356,  3802,   248, -4356, -4356, -4356,  3379,  3108,  3774, 13956,
    3803, 13956,  3804,  2326, -4356, -4356, -4356,  1769,  1769, -4356,
     425,  3805,  4008, -4356, -4356, -4356,   109, -4356, -4356,  3902,
    3814,  2331,   135, 61879, -4356,  4114,  2019, -4356, -4356,  3760,
   -4356,  4447,  4448,  4338,  4451,  1410, -4356,  -111, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356,  4244, -4356, -4356, -4356, -4356,
    1773,  4440,  2673,  3843, -4356, -4356, -4356, -4356,   216, -4356,
    3824, -4356,  3827,  3832,  3836,  2675,  2675, 13956, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  4253, -4356, -4356,  2342,
   -4356,  1180,  4121, -4356, -4356, -4356, -4356,  -158, -4356,  2347,
   -4356, -4356, -4356, -4356, -4356, -4356,  -127, -4356,  4245, -4356,
    2128, -4356,  4249,  4142,   765,  2352, -4356, -4356, -4356, 52639,
   20806,  4509, -4356,  3899,  4395, -4356,  4516, -4356,  3867, -4356,
   -4356,  3860, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,  1162,  3989, -4356, 69139, -4356, 61879, 61219, -4356, -4356,
   35476, -4356, -4356, -4356,  4333, -4356,   871, -4356, -4356,  4363,
    2884, -4356, -4356,  1570, -4356, -4356,  1159,   137, -4356,  4524,
     147, -4356, -4356,  1074, -4356, -4356, -4356, -4356, -4356, 34146,
    3076, 18751,  3975, 61879, -4356,  1343,  3898, -4356,  3351, -4356,
     871, 61879,   871, 61879, -4356,  4342,  4342, -4356, -4356, -4356,
   -4356, -4356, -4356,  1557, -4356,  2241,   995,  -127,   765,  4134,
    1038,   135, -4356, -4356,   765,  1570,  3866,  1038,  2019, -4356,
   -4356,   922,   161,   161,  4500,   161, -4356,  4501,  4503,  -111,
   -4356,  3379,  1159, -4356, -4356, -4356, -4356,  2400,  3873,  3878,
   -4356, 61879,  3879, 61879, 61879, 13956, -4356, -4356,  3880, -4356,
    3887, -4356, 61879, -4356, -4356, -4356,    93, -4356, -4356,   305,
     161, -4356, -4356, -4356, -4356, -4356, 43399,   305, -4356, -4356,
   -4356,  4193,  3934,  3894, -4356,  4191, -4356,  3901,  3922, 13956,
    4415, -4356, -4356, -4356,  2410, -4356, -4356, 42079, -4356, -4356,
   -4356,  3108, -4356, -4356, -4356,  4150, -4356,  4087, -4356,  4183,
   -4356,  3903, -4356,   765, -4356, -4356,  2673, -4356,  2414, -4356,
   -4356, -4356,  4000,   765,   765,  4445,  4446,   765,   765,   765,
     765,  3911,  3898, -4356,  4427, -4356,  2434,  2447,  1251, -4356,
   -4356,  8449,  3303, 32816,  4220,  2455,   216,   216,  1038,   995,
   -4356, -4356, -4356, -4356,  1490,  1846, -4356,  4299,  4584, -4356,
   44059, -4356, -4356, -4356, -4356, -4356, -4356, -4356,   161, -4356,
     161,   161, -4356, -4356, -4356, -4356, 61879, 61879,  3918,  2470,
   61879,  2475,  2492,  1443, -4356,  3843, -4356,  1223,  1223, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  3921, -4356, -4356, -4356,
    1073,  3901,  3923,  4092,  1163, -4356,   871, 13956, -4356, -4356,
   61219, -4356, -4356, -4356, -4356, 34146, 13271,  2773,  3924, -4356,
   -4356, 61879,  3926, -4356,  -127,  -127,   765,   765,  3281,  3281,
    2673, 52639,  4035, -4356, -4356,   765, -4356, -4356,  4547, -4356,
    4553,  3927,  3928, -4356, -4356, -4356,  4468, 69139,  4408,  4460,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356,  2554,  2556, 61879,   995,
    2568,   135,  2019, 13956,  2579, -4356,  4608, -4356,  1021,  4226,
    4227,  1056, -4356,  1243, -4356,  1337,  1159,  1159,  3935,  1005,
   -4356,  4552,  4223,  4554,   871, -4356, -4356, -4356, -4356, -4356,
    3975, -4356,  3940, -4356, -4356,   -61, -4356, -4356,  -127,  -127,
   -4356, -4356, -4356, -4356, -4356,  2590, -4356, 52639, -4356, -4356,
   57919, 57919, -4356, -4356, -4356, -4356, -4356,  4163,   995,  2596,
   -4356,   995, -4356, -4356,   336, -4356, -4356, -4356, -4356,  3998,
    4489, -4356,  3945, -4356, -4356, -4356,   130,  1159,  4010, -4356,
   -4356,  1834, -4356, -4356,  1073,  4235, -4356,  4236,  4138, -4356,
   -4356,  2599, -4356, 18066, -4356, -4356, -4356, -4356, -4356, 52639,
   -4356,  4035, -4356,  3954,  2604,  3303, -4356, -4356, -4356, -4356,
     995, -4356,  1223,  1223, -4356,  -127,  4356, -4356,   130, -4356,
   -4356,  4014, -4356,  1159,  1337, -4356, -4356, -4356, -4356,  4397,
    4294, -4356,  3940, -4356,  3956, -4356,  3287,  3898, -4356, -4356,
   -4356, -4356, 70459,  4477, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,  1162, -4356, -4356,  4588,  4151, -4356, 18066,  3959, -4356,
   -4356,  4146, -4356,   161,  4398, -4356, -4356, -4356, -4356,  4261,
    3964,   996,   814, 24823,  4130, -4356, -4356, 52639, -4356, -4356,
   -4356, -4356, -4356, 52639,  2609, -4356, -4356, 34146, -4356, -4356,
   69139, -4356, -4356, 26157,  3966, -4356,   765, -4356, -4356, 34146,
   -4356, -4356, 13271, -4356, -4356
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4356, -4356, -4356, -4356,  1974,  3684, -4356, -4356, -4356,  3679,
   -4356, -4356, -4356, -4356,  3272, -4356, -4356,  1552, -4356, -4356,
   -4356, -4356, -4356,  1713, -4356,   432, -4356,   434, -4356,   438,
   -2534,  -499,  3592, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,   -52,  1361,  3554, -4356,   321, -4356,   -45,
   -4356, -4356, -4356, -3676,  -173,  -348, -4356,    16,     4,  3537,
    -342, -3752, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -3873, -4356, -4356, -4356,   145, -4356, -4356,  -594, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356,  -115,   468,  2208,
   -4356, -4356, -4356,  4634, -4356,  4066, -4356, -1931,  2597, -4356,
   -4356, -4356, -4356, -4356,  2676, -1883, -4356, -4356, -4356,  1582,
   -4356, -4356, -4356,  -421,  -934,    48, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
     700, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356,  2355, -4356, -4356,  3990, -4356, -4356, -4356,  1567,
   -4356, -4356, -4356, -4356, -4356, -4356, -1334, -4356,  2080,  2081,
   -4356,  2085, -4356,   168,   210, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356,  3514, -4356, -4356, -4356, -2408, -4356, -4356, -2597,
    2980, -4356, -2081, -4356, -4356, -2175, -4356, -4356, -2034,  1259,
   -4356, -4356,  -108,  -365, -4356, -1558, -2176, -2165, -4356, -4356,
   -4356, -2242, -2240,  -812,  2724, -1229, -2603, -4356, -4356, -4356,
   -4356, -4356,   -24,   351, -4356, -4356, -4356,   162,  1826,  2404,
   -4356, -2797, -4356, -4356,   893, -4356, -4356, -4356,  1081,   422,
    1082, -4356,   717,  2651, -1916, -4356, -4356, -4356, -4356, -4356,
   -4356,  -197,    35,  -275, -4356, -4290,   429, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -2988, -4356, -4356, -4356,  -399,
   -4356, -4356,  -340, -4356, -4356,  -374, -4356,   -98,  1482,  1085,
   -4356, -4356,   719, -3630, -4356, -4356,  2516, -1544, -4356,  -582,
   -4356,   387,  1870, -3015, -2152, -4356, -1025, -1024, -3247, -4356,
   -4356, -4356, -4356,  1368, -4356,   677,  1865, -2674, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -2662, -4356, -3264, -4356, -4356,
   -3521, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,  -335, -4356, -4356,   181,   -29, -4356,   127,
     906, -4356, -3292,  1265,   612, -4356, -4356, -4356, -4356, -3628,
   -2869,  -824, -4356,   155, -2846, -2757, -3713,   579, -4356, -4356,
     136, -4069, -3999,  -599, -2345, -2629,  -144, -4356, -4356,   140,
   -2403,  1997, -4356,   549, -1536, -2349,  1741, -4356, -4356,  1245,
   -4356, -1652,  1241, -4356, -4356, -4356,  1252, -4356,  -228, -4356,
   -4356, -4356, -4356, -3267, -4356, -1706, -3052, -4356, -4356,  4718,
    4719, -2827,  -168,  -166, -4356, -4356, -4356,   431, -4356, -4356,
   -2893,   -41,    81,    91, -2699, -3671,   271, -3365, -4356,   386,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,  1930,  -674,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -3529, -3157, -4356,
   -4356,  1434, -4355, -2255, -2250, -2639,  3728, -4356, -4356, -4356,
   -4356,  3664, -2460, -3104, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,  3202,  1233, -4356, -4356,  2102, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356,   416,  2179, -4356, -4356, -4356,
   -4356, -4356,  2506, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,   -83, -4356, -4356, -4356, -4356, -4356,   712,  3064, -4356,
   -4356, -4356, -4356,   -12, -4356, -4356, -4356, -4356,  2753, -4356,
   -4356, -4356, -4356,  3091, -4356, -4356, -4356, -4356, -4356, -4356,
    1712, -4356,  2230, -4356, -1676, -4356, -4356,  1220,  -148, -4356,
   -4356,  3713, -4356,   749, -4356,   -51, -4356,  1783, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,  2583, -3845,
   -1696, -4356, -1119, -1612, -4356, -4356, -3387, -4356,  3160, -1578,
   -3412,  2076,   517,  -142, -2731,  1276, -4356,  1701,   959,  4933,
   -4356, -1214, -1263, -4356, -4356,    -2, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356,  2439,  2445, -4077,  -670, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
    1771, -4356, -4356, -4356, -4356, -4356, -4356, -4356,  3504, -1320,
   -4356, -4356, -4356, -4356, -4356, -4356,  -965, -4356, -2285, -4356,
   -4356, -4356, -4356,  -510, -4356,  3619, -4356, -4356, -4356, -2557,
   -1556,  2131,  1654, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
    2140, -4356, -1745, -4356, -3037, -4356, -4356, -4356, -4356, -4356,
     829, -4356, -2389, -4356,  1305, -4356, -4356, -4356, -4356, -4356,
   -4356,  2153, -4356, -4356, -2182,   186, -4356,   346, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356,  -143,   984,  -137, -3064, -1225,
    1851, -4356, -4356, -1444,  3675, -1948, -4356, -4356, -4356,  2344,
   -4356,   914, -4356, -4356, -4356,   529,   532, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356,   618,    94, -4356, -4356, -4356,   770,
   -3293, -2202, -4356,   627, -3569, -1058, -4356, -1021, -4356, -1517,
    1715,   577, -4356,  -661, -1209, -1538, -3277, -2667, -4356,  1530,
    2656, -4356, -4356, -4356,   546, -4356, -4356, -4356,  1646, -4356,
   -1636, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
    -560,  -966, -4356, -4356,  2523, -1515,  -458,  4831,    -4, -4356,
   -4356,    15, -4356, -4356, -4356, -4356,  3474,  3431,  2315, -4356,
   -4356, -2720,  2272, -4356,   910,  -990,  -907,  1273, -4356, -4356,
    1277, -3485, -4356, -4356,    18, -4356, -4356, -4356,  1230, -4356,
      11,  4296,    19, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356,  3161, -1158,  4200, -4356, -4356, -4356, -4356, -4356, -4356,
    2748, -4356, -4356, -4356, -4356, -4356, -4356,  3371,  4312,  -617,
   -1425, -4356,  -842,  2750,  2224,  -972, -4356, -4356, -4356,  3818,
    4321, -4356, -4356,  4834, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,  2943,   808, -4356, -4356, -4356, -4356,  3453,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356,  1329,  -147, -4356,   401,  -167, -4356,   213,
   -4356, -4356, -4356, -4356, -4356,  -203, -4356, -4356,  -210, -4356,
   -1111,  4126, -1522, -4356, -1388, -2833, -4356, -1270,  1752, -4356,
   -4356, -4356,  2754, -4356, -4356, -4356, -4356,  1314,  2705, -3143,
    -731, -1271, -1292, -2748,   138, -4356, -4356,  3995,   114,  -502,
   -1952,    -6,  -881,   -68,  -644,  -638,  -858, -4356,  -573, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
    2275, -4356, -4356, -4356,  1303, -4356,  4357, -4356,  3044, -1505,
    4360,  -592,  2850,  2293,  2296, -4356, -4356, -4356, -4356, -1969,
   -4356, -4356,   178, -4356,  2926, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356, -4356,
   -4356, -4356,  3343,  -447,  -516,  3472,  4373,  3981, -4356,  3556,
   -4356, -4356, -4356, -4356, -4356,  1593, -4356,   492,  2324, -1338,
   -2679, -4356, -4356,  2679,  1087, -4356,  1893, -2126, -2469, -4356,
    2247,  -676, -4356, -4356,   499, -4356, -4356, -4356,  1598,   334,
    4378,  3991, -4356, -4356, -4356, -4356, -4356, -4197, -1654, -4356,
     -85, -4356, -3139, -4356, -1620,  1799, -3003, -4356, -2892, -2891,
    1325, -1202,  2290,   968, -4356, -4356, -2644, -4356, -4356, -4356,
      21,  4359,  4362,  4365, -4356,  -886, -4356, -4356, -4356, -4356,
   -4356,  -101, -4356, -4356, -4356,  3908, -4356, -4356, -4356, -4356,
   -4356, -4356,  3380,  3909, -4356, -4356, -4356, -4356, -4356,  3912,
   -4356, -4356, -4356, -4356, -4356,  1947, -4356, -4356, -4356, -4356,
   -4356, -4356, -4356, -4356, -4356
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2957
static const yytype_int16 yytable[] =
{
     545,   156,  1070,   691,  1679,   695,  2269,  1599,  2056,   577,
     543,  1671,   991,  1892,   576,  1920,  2013,  1816,   584,  1027,
    1066,   597,  1569,   977,  1865,  1465,  1032,  2391,   605,  1135,
     600,  1530,  1533,   977,  1826,  1136,  1919,  2332,   613,  1778,
    2131,   616,  1547,  2251,  1569,   613,  2165,  2266,    77,  1929,
     871,  2164,   632,  3276,  1256,  2889,  2781,  1465,  3248,  2252,
    2890,   614,  1202,  3357,   928,  2329,  3566,  2998,  1109,  1562,
    3680,  1110,  2258,   681,  1460,  1461,  1948,  1949,  1374,  3005,
    1952,  1953,  1954,  1955,  2012,  1957,  1958,  1960,  1962,  1963,
    1964,  1965,  1966,  2025,  1600,  2601,  3795,  2748,  1011,  2248,
    3100,   666,  2253,   881,   882,   883,  1706,  1707,   887,   888,
     889,  3452,  3856,   891,   892,   893,  1938,  2239,   159,  1621,
    3484,  2058,  3851,  1077,  1946,  3991,  1084,  3739,  2571,   672,
    1476,   545,  2824,   927,   545,   680,   686,  2674,  3292,  3387,
    3006,   674,  3482,  2825,   677,  1988,  2964,  3971,  2965,   696,
    3292,  3292,  3312,  2172,  1180,  2626,  2292,  1184,  2879,  3883,
    2270,  3991,   582,  2664,  3313,  3281,  3214,   927,   697,   692,
    4088,   698,   699,  2185,  3910,  3223,  1313,  1314,  1315,  3568,
    3569,  2188,  2189,  4457,  3690,  3396,  3205,  3796,  1357,  3321,
    2297,  1434,  2297,  3325,  4423,  3860,  1323,  1324,  1735,  2621,
    1093,  3932,  4205,  2954,  3341,  2557,  1323,  1324,  2893,   595,
    2380,  4052,  2961,  5085,  3304,  3305,  3352,   604,  4717,  2820,
    3549,  3361,   591,  2962,   621,  1601,  1650,  1659,  3477,  3478,
    4887,  1703,   718,  2237,  3486,  1428,  3488,  2369,  1785,  1786,
    1787,  3666,  4131,  3728,  3102,   665,   624,  1323,  1324,  1323,
    1324,  4370,  2510,  1323,  1324,  1805,  2807,  4112,  2526,  1323,
    1324,  2557,  4123,  -971,   934,  3244,  3767,  2074,  4234,  4026,
    1550,  1323,  1324,  3949, -2249,  5064,  1732,  1358,  1093,  1358,
    1434,  1323,  1324,  4747,  3292,  3292,  4128,  1323,  1324,  2764,
   -2822,  1615,  2706,  1875,  1550,  4243,  1879,  1323,  1324,  1757,
    1522,  1323,  1324,  2611,  2223,   983,  4572, -2805,  1036,  1017,
    1323,  1324,  4591,  1445,  1323,  1324,  1185,  2288, -2904,  4697,
    3998,  1634,  1903,  1904,  1985,  2297,  1908,  4234,  1703,  3868,
     694, -2663, -2828,  4534,  1643,   993, -1721,  4804,  3550,  1323,
    1324,  1449,  4235,  1922,  1923,  1323,  1324,  4806,  3458,  3459,
    2312,   667,   592,  1323,  1324,  1191,  4236,  1703,  3580,  4621,
    -600,  3464,  4334,  3390,  4603,  1323,  1324,  1036,  1017,  3239,
    1362,  4335,  4863,  1781,   296,  2315,   298,  2064,  1457,  2534,
     615,  4694,   977,   977,   946, -2448,   977,  1323,  1324,  -601,
    1094,  1095,  1323,  1324,  4313,   150,  1610,  1187,  4351,  4107,
    1323,  1324,  1323,  1324,  1231,  1293,  3173,  4718,  1323,  1324,
    1323,  1324,  1809,  3308,  2288,  2195,  2288,  2897,   977,  3561,
    1323,  1324,  2407,  1758,  3974,  1323,  1324,  1759,  3174,  4408,
   -2904,  3649, -2746,  2412,  3051,  2629,  1379,  3403,  4438,  4737,
   -2747,  1760,  3245,  2582,  1985,  1323,  1324,  1323,  1324,  2612,
     723,  2527,  1323,  1324,  1323,  1324,  1574,  3889,  4533,   158,
    3052,   890,  3142,  1323,  1324,  3175,  4604,  4537,  1094,  1095,
    2502,  2313,  3192,  3530,  4738,  4439,  4440,  3474,  1810,  1611,
    3890,   151,  2630,  2413,  1361,  2294,  1188,  3661,  3662,  3663,
    2487,   702,  1580,  4953,  2298,  4341,  2298,  2196,  1523,  1232,
    1294,  1494,  2316,  1824,   994,  3387,  1323,  1324,  1782,  4605,
    4361,  1811,   925,  1724,  4336, -2663,  2511,   937,  2217,  1990,
    4411,  1370,  1256,  4414,  4415,  1852,   668,  4303,  1853,  3549,
    2106,  3391,  1644,  1664,  1635,  1665,  1666,  1667,  1668,  2386,
    4427,  1985,  1604,  1458,  4873,  1624,   925,  3222,  2127,  2288,
    3999,  4773,   686,  4591, -2746, -1681,  1450,  2313,  1982,  4437,
    1616,  1594, -2747,   686, -1721,  2021,  4682,  1425,  3867,   936,
     158,  4573,   705,  3772,   680,   932,  4685,  1325,  1761,   680,
    1326,  1748,   944,  1812, -2822,  1323,  1324,  1325,  2707,  4079,
    1326,   984,  3950,  1986,  4390,  4974,   987,  3758, -1681,  2672,
    2167, -2805,   977,  2170,  1359,  4401,  1359,  2173,   680,  2176,
    1323,  1324,  1028,  4342,  4314,  3406,  2775,  2898,  4113,   988,
    5060,  3869,  1086,  1756,  2256,  1163,  4525,  1063,  1325,  2298,
    1325,  1326,  2558,  1326,  1186,  3387,  1551,  2191,  2192,  2193,
    1325,  1106,  3758,  1326,   935,  2824,  2065,  3550,  2789,  4315,
    4043,  2265,  1325,  2097,  4047,  1326,  2825,  2792,  3124,  2613,
    1551,  1569,  1325,   713,  1813,  1326,  1446,   680,  1325,  4526,
    1141,  1326,  1951,  2014,  2112,  2528,  4541,  4515,  1325,  1706,
    1707,  1326,  1325,  1762,  4483,  1326,  3551,   680,  2558,  1972,
     947,  1325,  2529,  2536,  1326,  1325,  3103,   666,  1326,  1173,
    1792,  1793,  2152,   945,  2539,  1157,  2013,  2542,   666,  4105,
   -1721,   666,  4076,  1986,  1141,  3246,  2964,  1754,  2965,  4888,
    1325,  1197,  3292,  1326,  1063,  4743,  1325,  2879,  1752,  1326,
    1851,   717,  2292,  3759,  1325,   622,   713,  1326,  3306,   713,
    1867,  4380,  1869,  1087,  4385,  4386,  1325,  1096,  2533,  1326,
    2823,  5086,   894,  1988,  1882,  1883,  1884,   625,  4326,  1645,
    2202,  2715,  2187,  1429,  2203,  1891,   593,  3201,  1325,  3667,
    4424,  1326,  3294,  1325,  2012,   978,  1326,  2231,  3460,  1257,
    4544,  1325,  2961,  1325,  1326,  -971,  1326,  1724,  2368,  1325,
    4719,  1325,  1326,  2962,  1326,  3292,  4561,  1323,  1324,  3362,
    4253,  1325,  2894,  4506,  1326,  2622,  1325,  3861,  1088,  1326,
    1986,   623,  1013,  2895,  1465,  2652,  2066,  2400,  1992,  2046,
    2380,  1373, -2828,  1323,  1324,  1301,  1325,  3884,  1325,  1326,
    2960,  1326,  2075,  1325,  1754,  1325,  1326,  3739,  1326,  2973,
    1435,  1170,  4943,  1327,  1325,  1320,  1321,  1326,  3307,  1323,
    1324,  4458, -2448,  1327, -2828,  1356,  1323,  1324, -1721,  3906,
    4027,  1323,  1324,  4714,  4237,  2522,  3907,  4419,  1135,  1158,
    3363,  2442,  2443,  3552,  2098,  1365,   545,  1367,  4306,  1369,
    1141,   545,  -600,   680,  4695,   545,  1366,  1325,  1323,  1324,
    1326,  1371,  1814,  1410,  1327,  1376,  1327,  2002,  3068,  3753,
    1327,  4004,  2293,  4517,  1372,  1605,  1327, -2448,  1377,  2459,
    2068,  -601,  2424,  2463,  2408,  2512,  3972,  2901,  1327, -2746,
   -1721,  1754,  2082,  4237,  2399,   927,  1646, -2747,  1327,  1435,
    1439,  4018,  1135,  3123,  1327,  3871,  2444,  2445,  2171,  1754,
    3067,  1575,  2489,  4365,  1327,   666,  2503,  1456,  1327,  3193,
     156,  1462,  3531,  1531, -2746,  1535,  2385,  1327,  1538,  1543,
    4392,  1327, -2747,  2425,  1815,  3760,  1325,  2488, -2956,  1326,
    1648,  1648,  2146,   695,  1565,  2491,  2492,  1581,  4489,  2508,
    2509,  4029,   680,   666,  4343, -1681,  1327, -2809,  1753,   666,
    3228,  1325,  1327,  2091,  1326,  3551,  1854,  2067,  1724,  1855,
    1327,  2684,  2638,  1340,  3077,  3078,  2107,  4320,  4321,  1028,
    3504,  3505,  1327,  2638,  4576,   680,  1595,   680,  3513,  3514,
     680,   680,  1426,  3467,  4397,  3469,  1323,  1324,  4115,  3407,
    3532,  3533,  1323,  1324,  1327,  3849,   680,  3688,  3689,  1327,
    3703,  4121,  1323,  1324,  1606,  4124,  4125,  1327,  3507,  1327,
    2827,  2026,  3575,  3576, -2808,  1327,  4527,  1327,  1928,  3387,
     160,  2294,  2226,  2227,  1323,  1324,  2398,  1327,  2416,  1607,
    2746,  1532,  1327,  2411,  2230,   927,  1403,  3482,  4717,   666,
    4879,  2100,  4881,  4882,  2516,  2415,  1628,  -492,   578,  1452,
    4944,  2418,  1327,  1152,  1327,  3913,  1323,  1324,  2553,  1327,
    4077,  1327,  1640,  5149,  4802,  1639,  2240,  1323,  1324,  2272,
    1327,  2421,  4334,  2422,  1323,  1324,  1672,   696,  2423,  1967,
    2430,  4335,  2680,  2711,  2889,  1641,  1642,  1479,  2417,  2890,
    4042,  2824,  3449,  1489,  4046,  1663,   697,  3340,  1674,   698,
     699,  2457,  2825,  4034,  1078,   666,  3568,  3569,  2317,  2386,
    1679,   680,  3761,  1327,  5037,   545,  4861,  4119,   666,  2967,
    1569,  1323,  1324, -2806,  4242,  1731,  3998,  3312,  1482,  3704,
    2284,  1144,  2431,  4245,   713,   977,   713,   666,  1325,  3313,
     549,  1326,  2165,  4807,  2165,  2165,  1809,  1774,  2897,  3197,
    3198,  -500,  2604,  3023,   927,  5145,  1706,  1707, -2043,  2123,
    2709,  2270,  1484,  3341,  1325,  4966,  4967,  1326,  1343,  4970,
    3669,  3938,  3279,  2714,   724,  4548,  2717,  2718,  4991,  2633,
    2634,  2964,  3637,  2965,  2571,  1145,  1754,  2879,  1257,  4992,
    1325,  3659,  1327,  1326,   296,  4569,   298,  1325,  2113,  2975,
    1326,  1153,  1325,  3110,  3846,  1326,   554,  1257,  2292,  1323,
    1324,  2438,  1810, -2807,  1934,   556,  -487,  1327,  4801,  2517,
    2154,  4523,  2639,  2823,  4336,  2781,  3914,  4718,  2114,  1325,
    2685,  3913,  1326,  2639,   725,  2124,  2447,  4975,  2027,  1673,
    1526, -2809,  2288,  3129,  2202,  1811,  4593,  2961,  2203,  1722,
    1971,  3202, -2904,  4039,  4808,  4406,  4406,  5029,  2962,  2541,
    1623,  1921,  3482,  -500,   925,  3482,  3482,  4745,  2101,  5150,
    1323,  1324,  3081,  3082,  1128,  2249,   680,  3076,  1146, -2812,
    2860,  2155,  3482,  4944,  3484,  3387,  1323,  1324,  3075,  2285,
    1943,  1772,  1361,  2652,  2852,  3876,  4434,  2015,  3085,  4673,
    1596,  3482,  4406,  4406,  4441,  4442,  1968,  3915, -2808,  1079,
    1323,  1324,   680,  1735,  1976,  2241,  1920,  1812,  1979,   557,
    1566,  3705,  2246,  2014,  2793,  2794,   680,  3387,  -487,   158,
    1969,   680,   666,  2863,  4394,  3371,  3207,  3185,  3154,  1323,
    1324,  2805,  2410,  1526,  1323,  1324,  4409,  4763,  2898,  4410,
    2817,  2818,  3436,  2654,  2548,  2380,  3999,  3450,  1257,   680,
    2960,  2549,  5038,   602, -2904,  1323,  1324,  1325,   617,  1985,
    1326,  1323,  1324,  1325,  3466,   726,  1326,   680,  3135,  4430,
    4431,  4432,  2028,  1325,  5146,   680,  1326,  4435,  2660,  3847,
    2039,  4997,  2042,  2560,  1527,  4443,  2115,   666,  1813,  1323,
    1324,  1920,  3914,  3186,  1327,  1325,  3616,  2640,  1326,  3558,
    2117,  4809,  2028,  2060,   925,  2247,  4993, -2806,  2640,  2655,
    1323,  1324,  3226,  2448,   666,  1202,  2949,  2950,  2951,  2952,
    1327,  4938,  1675,  3706,  1323,  1324,   666,  1325,  2293,   666,
    1326,  3987,  3988,  3989,  1323,  1324,  2575,  3877,  1325,  2449,
    3565,  1326,  2656,  2125,  2899,  1325,  1327,    14,  1326,  4892,
    1754,   588,  2567,  1327,  2228,   680,   680,  2724,  1327,  2103,
     713,  1323,  1324,  1323,  1324,  2453,   680,  2108,  3909,  2156,
    4939,  2637,  2465,  3918,  -498, -2921,   680,  2471,  1350,  1351,
    1352,  1353,  1354,  1355,  2691,  1327,   558,  1527,  2128,  1028,
    1147,  -212,  1325,  3118,  1970,  1326,  3451, -2807,  3187,   545,
     545,   545,   666,   545,   680,   666,  1129,  4196,  2048,  2147,
    2148,  2149,  2166,  2151,  2657,   626,  2385,  2168,   545,  3372,
     680,  1781,  4551,   925,   545,  3916,  2966,  2294,  2169,  2665,
    1569,  1489,  4552,  4960,  2175,  1130,   940,  4272,  3379,  -485,
    3683,  3733,  1063,   134,  4764,   666,  2232,   634,  4531,  2576,
    4976,  2654,   997,  4846,  3812,  4821,   713,  1323,  1324,  -492,
     589,  3765,  3765, -2812,  1148,    27,  1149,  1323,  1324,  2736,
    2654,  4980,  1757,  1489,  1566,  5051,  4822,  4847,  4571,  3188,
    1325,  4559,  3682,  1326,  2118,   680,   680,  4836,  4197,  4837,
     977,  4276,  2749,  2274,  1781,  2658,  2753,  2754,   927,  4722,
    4940,  5010,  5011,  4729,  2725,  1323,  1324,  3749,   680,  2233,
    2234,  2235,   666,  5043,  4810,  4395,  1814,  2655,  4786,  1724,
    2900,  2726,   644,  1327,  2165,  1323,  1324,  3284,  1986,  1327,
    1323,  1324,   941,  4579,  2727,  4581,  2655,  5173,  2901,  1327,
    4277,  1325,  2474,  2174,  1326,  1297,  2150,  2432,  3099,  2153,
    2656,  3179,  3880,  4765,  4977,   680,  1804,  1325,  2478,  3734,
    1326,  1327,  1224,  1225,  2806,   136,  4393,  1781,  3881,  2656,
    1706,  1707,  3273,   998,  2386,   645, -2280,  1323,  1324,  2967,
    2479,  1325,  2325,   666,  1326,  1939,  1675,  4978,  5041,  2186,
    2246,  3457,  2728,  1327,  1323,  1324,  1758,  4051,   666,  2823,
    1759,  3916,  4756,  4757,  1327,   942,  4084,  4085,  4384,  1569,
    1325,  1327,  2481,  1326,  1760,  1325,  3692,  2728,  1326,  1197,
    5072,  2397,  2657,  2482,  2013,  1781,  3607,  3608,  3609,  1874,
    2486,  3798,  2902,  4086,  3697,  3774,  1325,  1323,  1324,  1326,
    1298,  2657,  1325,  1323,  1324,  1326,  1304,  4759,  1323,  1324,
     647,   609,  1465,   999,  3285,  5044,  2236,  4553,  1327,  1990,
    3776,  4461,  3805,  3806,  3468,  5115,  5116,  3170,  1323,  1324,
    1325,  3789,  1570,  1326,  1566,  3793,  3794,  2504,  4722,  1323,
    1324,  2296,  3750,  2247,    42,  4729,  2544,  3807,  3854, -2440,
     670,  1325,  2012,  4787,  1326,  1323,  1324,  2786,    60,  2781,
    5053,  3059,  1878,  2658,  1920,  1325,  1674,  3189,  1326,   628,
    1323,  1324,  1419,  3799,  3080,  1325,  1257,  2458,  1326,  3574,
    4578,  3633,  2658,  2659,  3648,  3645, -1955,  2327,  1571,  4750,
   -2280,  2652,   673,  2548,  1566,   550,  1323,  1324,   551,  5045,
    4095,  2729,  1325,  4477,  1325,  1326,  1327,  1326,   675, -2280,
    3966,  1761,  3389,   676,  3968,  2960,  1323,  1324,  1323,  1324,
    1907,  3002,   689,  1323,  1324,  3511,  3007,  1323,  1324,  2005,
    3320,   154,   155,  3323,  3324,  2523,  3326, -1955,  1940,  3329,
    3330,  3014,  2392,  3333,  1323,  1324,  1675,  1724,  3343,  3123,
    1323,  1324, -1290,  3347,  3348,  3349,  3350,  3351,  1323,  1324,
    3854,  3355,  3356,   715,  3358,  1323,  1324,  1327,   136,  1656,
    3367,  3368,  3369,  3370,  3800,  2730,  3374,  3375,   629,  3377,
    1323,  1324,  3033,  1327,  2550,   666,  3512,  1323,  1324,  1673,
   -2467,  3419,  2787,  3154,  1323,  1324,    57,   666,  1325,  1323,
    1324,  1326,  3525, -2440,  2293,  4554,  1675,  1327,  1325,  2069,
     666,  1326,  2070,  1323,  1324,  1410,  1762,   693,  3119,  3693,
    1410,  2980, -2440,  2578,  5062,    60,  3535,  5066,  2330, -2587,
    2586,  2586,  3309,  2586,  1135,   991,  1327,   925,  3410,   977,
    3165,  1327,  1674,  2249,  3336,  4025,  1325,  3096,  3093,  1326,
     149,  2679,  2331,  4024,   680,   977,   977,   666,  5092,  3462,
    3536,   666,  1327,  4096,  1674,  3765,  1325,   701,  1327,  1326,
    1566,  1325,  1920,  4296,  1326,  1323,  1324,  2143,  2144,  2781,
    2433,   680,   680,   666,   666,   666,  3069,  4257,  4722,  4729,
    3233,  2659,  1566,  3811,  4918,   296,  1327,   298,  1257,   680,
    3411,  4644,  1710,  4646,  2586,  2586,  2586,  1027,  1028,  3602,
    2659,   705,  4717,   680,  1032,  4040,   927,  1327,  1325,  3292,
    4297,  1326,   706,  1582,  5126,   713,  1323,  1324, -2916,  2551,
    1028,  1327,   718,  3145,   720,  1325,  4973,  2313,  1326,   150,
    2450,  1327,   550,  3672, -2467,   551,  3340,  4229, -1643,  2437,
    2703,  2385,  5030,  3337,   721,  1583,  2966,  4951,  4952,  2446,
     138,  3299,  1941, -2467,  1323,  1324,   884,  2071,  1327,  2756,
    1327,  1323,  1324,   977,  2585,  2585,  4031,  2585,  1325,  1942,
    1569,  1326,  1675, -2587,  1325,  2769,  2451,  1326,  2461,  1325,
   -2916,   666,  1326,  2757,   886,  1465,  1645,  2708,   899,  2632,
    2330,  2609, -2587,  3292,  1675,  1452,   933,  2723,  1584,  1325,
    1480,  5079,  1326,  1585,  5081,   666,   154,   155,  1628,  2739,
    1325,  4616,  2297,  1326,  2331,   151,  2450,  1479,  2636,  2275,
    2751,   545,   550,  4263,   545,   551,  1325,  1323,  1324,  1326,
    3675,  2752,   949,  2276,  2967,  4037,  3696,   680,  2585,  2585,
    2585,  1325,   980,  2773,  1326,  3911,  1323,  1324,  3623,  3623,
    3623,  3623,   610,  5114,  1327,  2697,  2785,  2700,   296,   610,
     298,  3292,  3292,   982,  1327,  3432,  3433,  1325,  1004,  4062,
    1326,  3438,  2462,  1002,   603,  4122,  3940,  3941,  4425,  3446,
    3447,  4426,  2466,  3640,  1340,  3454,  1076,  1325,  1083,  1325,
    1326,  4718,  1326,  4063,  1325,   994,  1158,  1326,  1325,  1323,
    1324,  1326,  1327,  3955,  1323,  1324,  1105,   680,  1323,  1324,
    1614,   666,  1107,   666,  1115,  1325,  1619,  1620,  1326,  1120,
    2470,  1325,  1327,  1117,  1326,  2716,  3427,  1327,   550,  1325,
    2531,   551,  1326,  1125,  1323,  1324,  1325,  3963,  1118,  1326,
    2472,  1119,   977,   936,  1531,  2473,  1132,   977,  1151,  2735,
    1158,  1325, -2043,  1646,  1326,  1161,  1531,  2808,  1325,  1171,
    1920,  1326,  4305,  4271,  1586,  1325, -1955,   296,  1326,   298,
    1325,  1323,  1324,  1326,  1327,  3339,  1323,  1324,  3154,  1414,
    1175,  2652,  1179,  2969,  1325,  1192,  2972,  1326,  1199,  2796,
    1200,  1327,  2477,  1323,  1324, -2956,  2414,  1361,  2803,  2804,
    4025,  -890,  1920,  4312,  1719,  1720,   680,  1340,  4309,  2480,
    1201,  2277,  1203, -1182,  1323,  1324, -1182, -1955,   680,  1204,
    2725,  1205,  2974,  3226,  1208,  3787,  1323,  1324,  2373,  4009,
    1209,  2014,  1036,  1017,  1327, -1546,  2288,  2726,  1210,  3797,
    1327,  1587,  5174,  2271,  1360,  1327,  1325,   636,  1361,  1326,
    3219,  1769,  2483,  1323,  1324,  2908,  3073,  1368,  2495,  1323,
    1324,  1340,  1096,  2514,  1415,  1327,  1323,  1324,  1211,  1416,
    1724,  1724,  1724,  2809,  1323,  1324,  1327,  3493,  2419,  2420,
    3134,  1323,  1324,  3471,  4372,   925,  1212,  3098,  2278,  1343,
    2439,  1361,  1327,  1465,  3497,  1323,  1324,  1325,   637,  1268,
    1326,  1213,   154,   155,  1323,  1324,  1214,  1327,  1215,  1588,
    3503,  2022,  3083,  2279,  2023,  1417,  2298,  2024,   680,  2588,
    2476,  2589,  1135,  1135,  1135,  3506,  1292,  1364,  2098,  2098,
    2098,  1418,  1413,  1327,  1216,  1325,  4023,  3088,  1326,  1305,
    1306,  1217,  1325,  3094,  1218,  1326,   977,   680,  1219,   680,
     680,  3509,  1220,  1327,  1221,  1327,   977,   977,   977,   977,
    1327,  1222,  4617,  1985,  1327,  1226,  1323,  1324,  3573,  3496,
    1063,  3510,  1420,  3515,  4118,   680,   638,  1382,  3516,  2454,
    1361,  1327,  3520,  1228,  2280,  1101,  1102,  1327,  1103,  1411,
    1104,  1135,  2669,  2670,  2671,  1327,  2288,  3701,  1423,  3521,
    4234,  1229,  1327,  4958,  1422,  3522,  1230,  4957,  1325,  2455,
    1872,  1326,  1343,  3523,  1233,  4235,  4032,  1327,  2467,  1361,
    3524,  1234,  4416,  4421,  1327,  1235,  4422,  1325,  1431,  4236,
    1326,  1327,  3398,  3399,  1589,  3526,  1327,  3400,  3401,  3402,
    1036,  4417,  3158,  1340,  1236,  4433,  1237,  3161,  2810,  3529,
    1327,  2966,  1238,  1569,  3534,  4012,  1239,  3220,  1240,  2811,
    3729,   680,   680,  3775,  1241,  3777,  1343,  2812,  3537,   680,
    3043,  1686,  3788,  1242,  1590,  2468,  1361,  2646,  2647,  4570,
    1325,  1243,  2281,  1326,  3045,  1325,  1244,  3802,  1326,  1325,
    1028,  1245,  1326,  3047,  3813,  3815,    60,  3260,  2166,  4547,
    2166,  2166,  3839,  2469,  1361,  2165,  1246,  3832,  3834,  3836,
    4474,  4481,  1327,  3837,  3815,  1325,  1247,  2374,  1326,  1920,
    4568,    77,  3648,  1985,  2297,  2679,  1531,  1921,  1250,  3757,
    3539,  2730,  3786,  1251,  3764,  2251,  1252,  3864,  3865,  3866,
    3645,  2475,  1361,  3237,  1323,  1324,  1063,  3892,   545,  4618,
    3468,  4565,  1325,   666,   666,  1326,  1258,  1325,  3242,   680,
    1326,  3108,  3109,  1327,  3230,  3231,  3302,  3303,  3898,  3901,
    3904,  2813,  3492,  2420,  1325,  1345,  1346,  1326,  1259,  1686,
    2373,  3541,  1432,  3495,  1361,  3527,  1361,   680,   680,  3651,
    3652,  1260,  4564,  1261,  4566,  1325,   134,  3204,  1326,  2347,
    2348,  1327,  2375,  1809,  1262,   761,  1687,  1325,  1327,  1433,
    1326,  1352,  1353,  1354,  1355,  2361,  3657,  3658,  1440,  3543,
    1263,  4705,  4706,  1264,  -700,  1442,  3544,  1265,  3392,  1345,
    1346,  1266,  1986,  4254,  1325,  1036,  1017,  1326,  1920,  3309,
    1325,  3978,  1361,  1326,   639,  3992,  3993,  1325,  1343,  1448,
    1326,  3310,  1269,  4329,   977,  1325,  2590, -2070,  1326,  3811,
    2645,  2297,  1325,  1270, -2043,  1326,  3373,   640,  2819,  1810,
    2814,   768,  2591,  1444,  1327,  1271,  1325,  4221,  4222,  1326,
    3791,  3388,  1272,  2956,  4613,  1325,  1273,  1434,  1326,  1688,
     680,  4500,  3545,  1327,  4626,  1274,  3970,  3250,  3251,  1275,
     135,  4023,  1811,  4643,   641,  4645,  1063,  1276,  3417,  4223,
    4224,  3960,  3426,  1277,  1687,  1278,  2373,  2373,   136,  4225,
    4226,  1279,  3295,  3296,  3297,  3298,  1280,  3300,  3301,  2775,
    1348,  1349,  1350,  1351,  1352,  1353,  1354,  1355,  2592,  1466,
    2593,  4232,  4241,  4258,  1361,  4814,  1327,  1325,  2288,  2544,
    1326,  1327,  1281,  2363,  2364,  1327,  4273,  1361,  4744, -2951,
    -700,  2376,  4287,  4288,  3961,   642,   649,  2724,  1469,  3962,
    4299,  4300, -1721,  4251,  1812, -2070,   784,  4371,  4450,  4446,
    4447,  1327,  2646,  2647,  1348,  1349,  1350,  1351,  1352,  1353,
    1354,  1355,  1986,   137,  1473,  4542,  4543,  1688,  1491,  4256,
   -2043,    60,  4546,  4543,  3948,  4655,  4656,  2330,  4704,  3658,
    1282,  1345,  1346,  4716,  4543, -2071,  1135,  1283,  1327,  1284,
    2956,  1285,  2098,  1327,  4761,  4762,   138,  2648,  2298,  4769,
    4770,  2331, -1721,  2594,  4777,  4770,  4262,  1286,  3473,  1287,
    1327,  4264,  3434,  3435,  1288,  3437,  1289,  3439,  3440,  3441,
    3442,  3443,  3444,  3445,  1290,  1813,  3448,   801,  4265,  3453,
    1493,  1327,  1291,  3456,  2347,  2348,  3979,  1295, -1721,  2374,
   -1721,  1027,  1296,  1327,  4699,  1985,  2724,  1299,  1032,  4266,
    2361,   139,  4875,  4300,  2288,  2288,  4835, -1721,  2652,  1300,
    4900,  4267,  4909,  4910, -1721,  2595,  4920,  4921,  4803,  4114,
    1327,  1410,  1303,  2578,  4680,  1307,  1327,  1439,   680,   680,
     680, -1721,  1308,  1327,  2725,   666,  4936,  3658,  4575, -1721,
    3920,  1327,  3621,  1511,  4674,  1309, -1721,  3631,  1327,  4937,
    3658,  2726,  1310, -2071,  4129,   680, -1721,  4950,  3303,  3823,
    1921,  3824,  1327,  1311,  2727,  4133,  1910,  1911,  4135, -1721,
    1312,  1327,  4969,  4543, -1721,  1363,  1257,  4971,  4543,  1509,
     680,   680,   680, -1721,  4874,  2298,  1348,  1349,  1350,  1351,
    1352,  1353,  1354,  1355,  4972,  4543,  1512,  3921,  1513,  4651,
    3922,  4106,  2984,  1514,  4109,  4110,  3825,  1339,  3923,  1544,
    2166,  1521,  -700,  2769, -2070,  1548,  4237,  1549,  1689,  1690,
    1691,  1692,  1693,  1694,  1554,  2374,  2374,  3924,  2985,  1553,
    3826,  1985,  1985,  1327,  -716,  1566,  4418,  4183,  2363,  2364,
     140,  1695,  4628,  2725,  1576,  3699, -2070,  2728,  1577,   680,
    1578,   648, -1721,  4889,  1579,   545,  5027,  4543,  5028,  4543,
    2726,  4895,  1598,   666,  1603,  3709,   666,  3388,  3827,  1340,
    5031,  4543,  1602,  2727,  3925,   680, -1721,  4502,  1063,  3615,
    1617,  5035,  4300,  1555,  1608,  2986, -1721,  4629,  2987,  3746,
    1618,  3748,  5070,  5071,  1629,  3098,  2988,  4616,  5080,  4543,
    4987,  5101,  5102,  1814,  1630,   834,  5111,  3894,  4986,  1632,
    2375,  5162,  5163,   651,  5054,  2989,   141,  1556,  1831,  3626,
    3627,  1340,  4610, -1721,  3388,  1637,  1689,  1690,  1701,  1692,
    3773,  1694,  4285,  4286,  3771,  3388,  3783,  3926,  4610,  1702,
    1703,  3782,  1709,   649,  2724,  1711,  1713,  4630,  1716,  1695,
   -2951,  2596,  2597,  2598,  -700,  1717,  2728,   680,  3782,  1721,
    1729,  3808,  1738,  3804,  1986,  1730, -2070,  3819,  1921,  3309,
    1739,  2729, -2071,  3821,  3822,  1465, -1721,  1740,   666,  1749,
    4318,  3310,   142,  4746,  -920,  5047,  1766,  3398,  3399,  1767,
    3782,  1775,  3400,  3401,  3402, -2070,  1781,  3388,  3845,  -700,
    3463, -1721,  1777,  3858, -2071,  1358,  2275,  3712,  1788,  3745,
    3715,  1807,  1808,  1819,  1063,  1063,  1825,  1920,  4289,  1857,
    2276, -2070,  1871,  1873,  3874,  2990,  4631,  1835,  5048,  5049,
    1889,  1809,  1872, -1879,  1341,  3782,    60,  4680,  4813,   977,
    1894,  3927,  1900,  1901,  3928,  2730,  1918,  1927,  3633, -2951,
   -1721,  4676,  1950,   296,  5096,   298,  1340,  1931,  1342,  1956,
    1980,  1981,  5095,  3784,  3785, -2881,  1989,  1996,  1997,  2376,
    2000,  4371,  1998,  1999,  1343,  3905,  2001,  2003,  2004,  3908,
    2729,  2016,  3828,  2017,  2018,  2045,  2019,  -890,  1569,  5090,
    -700,  2725,  3818,  2049,  5123,  2054,   649,  1810,  1809,  2057,
    1986,  1986,  2059,  2062,  2077,  2063,  2078, -1721,  2726,  2079,
    2080,  2086, -2638,  2089,  2093,  2094,  2095,  2096, -1721, -1721,
    1523,  2727,  3820,  3857, -2071,  2104,  1343,  2109,  2132,  3929,
    3286,  3829,  2991,  2140,  1836,  5122,  2953,  2330,  1839, -1721,
   -1721,  4379, -1721,  2141,  1557,  1840,   154,   155,  2145,  1330,
    2177,  2179,  2178, -2071,  2730,  1465,  1435,  2180,  2182,  2183,
    2184,  2331,  2200,  2214,  1810,  2215,  2218,  2220,  3686, -1721,
   -1721,  2224,  2229, -1721, -1721,  2245,  2254,  1673,  4055, -2071,
    2259,  3898,  2264,  3901,  3977,  3904,  2273,  2295,   154,   155,
    1331, -2272,  2311,  2319,  3746,  4632,  2320,  3286,  2277,  2334,
    2337,  2335,  3287,  4633,  2728,  2338,  2371,   296,  2389,   298,
    4611,  4612,  2387,  2395,  2401,  4080,  2403,  2404,  2405,  2427,
    2428,  2429,  4492,  4615,  2434,   650,   733,  4919,  4322,  4488,
    2436,  4627,  1344,  1841,  2435,  2450,  2456,  1345,  1346,  4647,
    4648,  4866,  4867,  1920,  4869,  1332,  4469,  -147,  4617,  2525,
    2440,  2452,  2460,  3631,  4776,  2464,  1231,  2484,  1333,  2581,
    2485,  1343,  2490,  1355,  4813,  2493,  3158,   977,  4021,  3287,
     651,  3930,  4028, -1366,   680,  2278,  2494,  2505,  2506,  4890,
    2507,  1531,  2530,  3288,  1028,  1028,  2540,  2992,  1558,  1345,
    1346,  1340, -1516,  1293,  1843,  2553,  4493,   154,   155,  2556,
    2279,  3931,  1297,  3311,  2616,  1347,  2610,  1754,  1921,  2627,
    4494,  1559,  2653,  2661,  3745, -1881,  4059,   761,   570,  2666,
    2667,  2668,  -700,  2673,  4634,  1495,  2675,  2681,  2729,  2682,
    3388,   666,  2683,  2686,  2687,  1496,   977,  1560,  1531,  2698,
    4791,  5012,  2688,   680,  2689,  2690,  4798,  2702,  1334,  1497,
    3288,  2704,  2705,  1561,  4860,  1976,   652,  4094,  3309,  2993,
    2710,  1498,  1499,  1500,   653,  4101,  2719,  2720,  2733,  1340,
    3336,  2280,  4100,  2734,  2741,   766,  2759,  4963,  4108,  4964,
    4965,  1501,  2742,   768,  2760,  2762,  4111,  3782,  2771,  2994,
    3388,  2772,  5042,  1349,  1350,  1351,  1352,  1353,  1354,  1355,
     680,  4985,  2730,  3388,  3517,  3782,  2778,  3388,  3388,  1675,
    4033,  2782,  2795,  2797,  1434,  2798,   775,   776,  2799,  2800,
    5106,  3388,  3782,   651,  1345,  1346,  2801,  2802,  2909,  2913,
    2914,  4854,  2906,  3782,  2918,  4618,  3782,  2920,  2947,  1844,
    2923,  2978,  2948,  4916,  1348,  1349,  1350,  1351,  1352,  1353,
    1354,  1355,  2924,  2925,  2926,  2927,  1846,  2955,  2928,  2970,
    4138,  2929,  2930,   666,  2931,  2932,  2933,  2654,  4194,  2281,
    3814,  1920,  2934,  2935,  2936,  4070,  2983,  4093,  2937,  3337,
    2938,  2939,  2940,  3008,  5106,  1920,  4198,  2941,   784,  2942,
    2943,  1920,  5156,   545,  2944,  2945,  1343,  1920,  2946, -1721,
    3009,  4213,  3010,  4206, -1554,  2974,  5166,  2549,  3426,  -700,
    3024,  3289,  5156,  3025,  3038,  4628,   977,  3060,  5166,  3064,
    3069,  4120,  3079,  3090,  3111,  3091,  2330,  3101,  3106,  3107,
    3125,  4127,  3114,  2655,  3115,  3112,  4924,  4925,  3113,  2826,
    4928,  4929,  4930,  4931,  3116,  2827,  3121,  2828,  3126,  2829,
    2331,  3127,  3139,   795,  3141,  5094,  3133,  3136,  3147, -1721,
    4629,  2830,  3163,  2831,  3159,  3166,  2656,  3162,   800,   801,
    4616,  3167,  3168,  2117,  1343,  3171,  3172,  2118,  3289,  1348,
    1349,  1350,  1351,  1352,  1353,  1354,  1355,  3181,  3196,  3199,
    2202,  3215,  3216,  2832,  3217,  3232,  4195, -1721,  2833,  2834,
    3235,  4823,  3234,  3243,  2835,  2654,  3238,  4139,  3831,  4824,
    1502,  3249,  3261,  3265, -1721,  4293,  2836,  3631,  4346,  2265,
    4630, -1721,  3270,  3271,  2837,  1921,  3277,  3282,  1503,  3283,
    3309,  3322,  3327,  5024,  2838,  3331,  3328,  4825,  2657,  5008,
    5009,  3332,  5138,  3334,  3335,  3342, -1721,  3344,  5017,  1335,
    1336,  1337,  2839, -1721,  3345,  2654,  3346,  3354,  3833,  1345,
    1346,  3353,  3359, -1721,  3365,  3360,  1703,  2654,  3366,  2840,
    3835,  2655,  3393,  3376,  3394,  3395, -1721,  3408,  2841,  2842,
     680, -1721,  4350,  4350,  3421, -2043,  2843,  3388,  3420,  3429,
   -1721,  3461,  3338,  3465,  2844,  3430,  3431,  2396, -1000,  4834,
    2845,   977,  3487,  3474,  2656,  3489,  3479,   977,  3483,  3094,
    2846,  3339,  3490,  3491,  3498,  3499,  3546,  3556,  3563,  2658,
    4381,  2655,  3572,  3388,  3388,  3564,   296,  3557,   298,  3388,
    3578,  3782,  3577,  2655,  2847,  3570,  3388,  1345,  1346,  3582,
    3585,  3604,  3610,  3605,  1921,  3612,  3617,  3634,  3782,  3635,
     666,  2622,  3638,  3639,  2656,  3641,  3642,  3647,  3653, -1721,
    -890,  3650,  3660,  3654,  3664,  3676,  2656,  4826,  3668,  1504,
    3677,  3698,   296,   826,   298,  3665,  2657,  3679,  4495,  3239,
    2848,  4496,  2849, -1721,  3687,  3691,  3694,  3700,  3708,  2850,
    1531,  3711,   832, -1721,  4333,  2860,  5170,   834,  4497,  3732,
    3736,   835,  3737,  3741,  3768,  2851,  3854,  3790,  3792,   733,
    2830,  3859,  2831,  4955,  1348,  1349,  1350,  1351,  1352,  1353,
    1354,  1355,  3872,  3886,  4456,  3879,  2657,  3891,  3887,  2852,
   -1721,  3893,  1505,  3919,  3894,  4834,  3939,  3943,  2657,  3944,
    3951,  2166,  4080,  3952,  -860,  -860,  5167,  2833,  4827,  1506,
    3964,  2511,   680,  3973,  3551,  -860, -1652,  2658,  3980,  3981,
    3984,   154,   155,  2853,  3985,  2836,  3986,  4828,  4632,  3995,
    3997,  2069,  4001,  2837,  4002,  4044,  4633,  4003,  4006,  4493,
    4011,  4045,  2854, -1721,  4060,  4065,  2855,  4066,  4071,  4103,
    4829,  4068,  4069,  4494,  1350,  1351,  1352,  1353,  1354,  1355,
     761,  2839,  4104,  4200,  4201,  4072, -1833,  2658, -1721,  4126,
    4097,  4204,  4513,  4073,  4102,  1703,  4136,  4117,  2840,  2658,
    4130,  4617,  4137,  4208,  4212,  4207,  4211,  2856,  4216,  4217,
    4220,  4227,  2857,  4218,  4244,  4246,  4259,  4260,  3729,  3161,
    4667,  2858,  4452,  2859,  4230,  4059,  4231,  2659,  2860,  2845,
    4232,  2861,  4233,  4248,  4059,  4241,  4249, -1721,   766,  4270,
    4250,  4350,  4255,   901,  4261,  4275,   768,  4269,  4280,  4282,
    4292,  4283,  4288,  4295,  4301,  4304,  4095,  4325, -1621, -1626,
    4331,  1976,  4345,  4330,  4347,  4357,  2862,  4691,  4352,  4359,
    3388,  4363,  4366,  3388,   977,  4364,  4374,  4634,  4375,   775,
     776,  2863,  2864,  2865,  2866,  4376,  4595,  4367,  4382,  4387,
     666,  4388,  4389,   561, -1721,  4396,  4712,  4404,  4600,  4412,
    4413,   296,  4445,   298,  4429,  3406, -1721,  4451,  4453,  4462,
    2867,  2849,  4478,  4480,  4482,  4485,  4486,  4487,  2850,  4501,
    4086,  4507,  4491,  4509,  4508,  4518, -1721, -1721,  4520, -1721,
    4522,  4535,  4538,   902,  2851,  4540,  4536,  4567,  4545,  4649,
    4557,  4650,  1973,  1435,  2830,  4598,  2831,  4601,  4438,  4614,
    4668,   784,   562,  4669,  4665,  4641, -1721, -1721,  4664,  1063,
   -1721, -1721,  4670,  4682,  4672,  2659,   904,  2868,  2869,  2870,
    4675,  4681,  4683,  4685,  2871,  4686,  4830,  4687,  -860,  -860,
    4689,  2833,   905,  4693,  4701,  4703,   563,  4708,  4618,  -860,
    4834,  2872,  2853,  4709,  2873,  4715,  4726,  4732,  4733,  2836,
    4734,  4735,   666,  1674,  2030,  4751,  3758,  2837,  4753,  2031,
    4766,  2854,  4760,  4754,  2874,  2659,   795,  4755,  4772,  2875,
    3586,  2032,  4774,  4775,  4780,  4781,   564,  2659,  4782,  4785,
    3587,   800,   801,  2876,  4594,  2839,  4783,  4350,  4799,   977,
    4789,  4800,  4805,  4816,  3588,  4838,  4855,   909,  4862,  1703,
    4868,  4870,  2840,  4871,  4876,   879,  3589,  3590,  3591,  4877,
    4880,  2679,  4884,  1827,  1828,  1829,  1830,  1831,  4885,  4896,
    2858,  4897,  2859,  4899,   565,  4587,  3592,  4904,   910,  4907,
    2861,  4913,  4901,  2845,   911,  4914,  4915,   977,  4923,  4926,
    4927,   975,  4932,   879,  4935,  2852,  2827,  5018,  4990,  4968,
   -1000,   975,  4981,  5019,  5014,  4989,  4999,  5002,  5020,  5021,
    5023,  5025,  5026,  5036,  1073,  5039,  5040,  5050,  5055,  5056,
    5057,  5060,  3849,   680,  5082,   912,  5083,  5084,   879,  5118,
   -1247,  5097,  5098,  5099,  5051,  5131,  5110,  5124,  5133,  5127,
    5137,  5136,  5139,  5142,  5157,  5143,  4690,  3169,  1467,  5169,
    4792,  4796,  1994,  3583,  1597,   296,  4470,   298,  4472,  2867,
    3455,  1472,  4471,  4845,  3752,  2849,  4539,  1657,  4844,  1323,
    1324,  4949,  2850,  1832,  1833,  1834,  1835,  1384,  5077,  1715,
    5075,  4711,  4911,  1921,  4464,   620,  1075,  4820,  2851,  3600,
    2663,  5130,  2574,  4290,  2922,  3161,  3622,  3161,  3130,  1178,
    2309,  3132,  3252,   879,  3131,  1768,  2552,  4865,   -69,  4550,
    4132,  4731,  3380,   566,  2877,  4005,  2868,  2869,  2870,  4511,
    4294,  4010,  2625,  2871,  5001,  5059,  4815,   879,  5135,  4514,
    4771,  5109,   879,  5129,  4934,  3718,   826,  2745,  4020,  4308,
    2872,  4495,  4549,  2873,  4496,  4350,  2853,  4350,  4350,  3378,
    4356,  3844,  3385,  5119,  4898,   832,  4886,  4779,  3933,  4186,
     834,  4677,  4768,  2874,   835,  2854,  2033,   567,  4758,  4778,
    4894,  4420,  4444,  4998,  4784,   879,  1827,  1828,  1829,  1830,
    1831,  1385,  2876,  1836,  4476,  1837,  1838,  1839,   915,   568,
    3280,  4665,   879,  3548,  1840,  4664,  2034,  3969,  3967,  5078,
    3965,   657,   658,  5032,  2035,  3593,  5033,  1386,  4954,  4864,
    1387,  4577,  4859,  3843,  4725,  4625,  3382,  1622,  4597,  1723,
    2201,  3203,  3144,  3594,  2858,  2912,  2859,  4995,  4391,  2372,
    2326,  4853,  2635,  3614,  2861,   918,  3996,   666,  1700,  3122,
    3874,   879,   879,   879,   879,  3727,  4373,  3562,   919,  2036,
    4988,  1388,  2791,   879,  4962,   569,  3983,  2263,  3274,  3001,
     570,  2999,  3581,  5013,  1974,  3227,  3684,  4316,  3221,  3975,
    4350,  4350,  1870,  1389,  4350,  3211,  4707,  5073,  4219,   296,
     571,   298,  1841,  5076,  5074,  3086,  1832,  1833,  1834,  1835,
    4893,   879,  4840,  1402,  4274,  1806,  4563,  4499,  4562,  4912,
    4399,  2037,  4490,  4524,  4796,  3838,   572,  3731,  2774,  1921,
    4560,  3673,  2968,  2867,   659,  4820,  2084,  2047,  3120,  3150,
    4015,  4302,   573,  4014,  4050,   680,  4996,  1089,  1198,  1384,
    2712,  1069,   922,  2713,   879,  2158,  2394,  3200,  1390,  1669,
    1072,   664,  1842,  1843,  4403,  3595,  2092,  2568,  4000,  3098,
     975,   975,  4872,  5125,   975,   923,  4736,   924,  5134,  5171,
    5168,  1302,  4350,  1391,  3596,  3685,  4019,  2784,  2737,  3180,
    2868,  2869,  2870,  4030,  4961,  1030,  2524,  2871,  1031,  2693,
    3178,  4948,  3177,  2615,  2222,  2102,   975,  1012,  1510,  2038,
    3863,  3164,  2905,  1014,  2872,  3236,  1836,  2873,  1837,  1838,
    1839,  5108,  3601,  4688,  3875,  1516,  5120,  1840,  3681,  4317,
    4041,   680,  3213,  1112,  3426,  3426,  1113,  2874,  2341,  1114,
    5132,  1660,  1661,  2225,     0,  1662,     0,  3597,  5172,     0,
       0,     0,     0,  1385,     0,     0,  2876,     0,  5006,  5007,
       0,     0,     0,     0,  3598,     0,     0,     0,     0,     0,
    1325,     0,     0,  1326,     0,     0,     0,     0,     0,  1386,
       0,     0,  1387,   680,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3874,     0,  1392,     0,     0,     0,  5159,
       0,     0,     0,     0,  1393,  5161,     0,     0,  1844,     0,
       0,     0,     0,     0,     0,  1841,     0,  3253,     0,     0,
       0,  1394,     0,  1388,  1845,  1846,     0,     0,     0,     0,
    2342,     0,  2343,     0,     0,     0,     0,     0,     0,  1395,
       0,     0,  5067,  5068,     0,  1389,     0,     0,     0,     0,
       0,   296,     0,   298,     0,     0,     0,  1921,     0,     0,
       0,   680,     0,     0,     0,     0,     0,   680,     0,     0,
       0,  1921,     0,     0,     0,  1842,  1843,  1921,     0,     0,
       0,     0,     0,  1921,  1396,     0,   879,  1397,     0,   879,
     975,     0,  2344,  2345,     0,  2346,  2347,  2348,  2349,  2350,
       0,  2351,  2352,  2353,  2354,  2355,  2356,  2357,  2358,  2359,
    1390,  2360,  2361,  2362,   879,   879,     0,  1398,     0,  5117,
       0,     0,     0,   879,   879,   879,   879,   879,   879,   879,
     879,   879,   879,   879,   879,  1391,     0,   550,     0,     0,
     551,     0,     0,     0,   879,   879,     0,   879,   879,     0,
       0,     0,     0,   879,   879,   879,     0,     0,   879,   879,
     879,   879,   879,   879,     0,   879,   879,   879,     0,     0,
       0,     0,     0,     0,   879,   879,     0,   879,   879,   879,
     879,   879,     0,     0,   879,   879,   879,   879,     0,   879,
     879,   879,   879,     0,   879,   879,   879,   879,   879,     0,
       0,   879,     0,     0,   879,   879,     0,     0,     0,   879,
       0,     0,     0,   879,   879,   879,     0,     0,     0,     0,
       0,  1844,     0,     0,     0,   879,   879,   879,     0,     0,
       0,     0,     0,     0,     0,   879,  1327,  1845,  1846,     0,
       0,     0,   879,   879,   879,   879,     0,  1392,     0,     0,
    2363,  2364,     0,   879,   879,   879,  1393,   879,   879,   879,
     879,   879,     0,   879,   879,   879,   879,   879,   879,   879,
     879,     0,     0,  1394,   879,     0,   879,     0,     0,     0,
       0,     1,     0,     2,     0,  2830,     0,  2831,     0,     0,
       0,  1395,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     3,     0,     0,     0,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
       6,     0,  2833,     7,     0,     0,     0,     8,     0,     0,
       0,     0,     9,    10,     0,     0,  1396,     0,     0,  1397,
    2836,     0,     0,     0,     0,     0,     0,     0,  2837,     0,
       0,     0,    11,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   879,     0,     0,     0,     0,     0,     0,  1398,
       0,    12,     0,     0,     0,     0,  2839,     0,   879,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1703,     0,     0,  2840,     0,     0,    13,     0,     0,     0,
       0,     0,     0,     0,    14,  3841,    15,    16,     0,     0,
       0,  2827,     0,  2828,     0,     0,     0,     0,     0,    17,
      18,     0,     0,     0,  2845,     0,     0,  2830,     0,  2831,
       0,     0,    19,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   879,     0,    20,     0,     0,
       0,   979,     0,     0,     0,     0,     0,     0,     0,  2832,
       0,     0,   879,     0,  2833,    21,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2836,    22,     0,    23,  1091,     0,     0,     0,
    2837,    24,     0,     0,     0,    25,   296,     0,   298,     0,
    2838,     0,     0,     0,     0,     0,  2849,     0,     0,    26,
       0,     0,     0,  2850,     0,     0,     0,     0,  2839,     0,
       0,     0,    27,   879,    28,     0,     0,     0,     0,  2851,
       0,     0,  1703,     0,     0,  2840,     0,     0,     0,     0,
       0,    29,     0,     0,  2841,     0,     0,     0,     0,     0,
       0,     0,  3842,     0,     0,     0,     0,     0,     0,    30,
    2844,  1177,     0,    31,     0,     0,  2845,     0,     0,     0,
      32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2853,     0,     0,
    1206,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2847,     0,     0,     0,     0,     0,  2854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1249,     0,     0,     0,     0,   296,     0,
     298,     0,     0,     0,     0,     0,     0,     0,  2849,     0,
    1267,     0,     0,     0,     0,  2850,     0,     0,     0,     0,
       0,    33,     0,   975,     0,  2858,     0,  2859,     0,     0,
       0,  2851,     0,     0,     0,  2861,     0,     0,     0,     0,
      34,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2852,     0,     0,    36,     0,
       0,     0,  1317,   879,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2853,
       0,     0,     0,    38,     0,     0,    39,     0,    40,     0,
      41,    42,     0,     0,    43,    44,     0,     0,  2854,  1381,
       0,     0,  2855,     0,  2867,    45,     0,     0,    46,     0,
       0,     0,     0,     0,     0,     0,     0,    47,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    48,     0,     0,     0,     0,    49,    50,    51,     0,
       0,     0,  1441,     0,     0,     0,     0,     0,  2857,     0,
       0,     0,     0,     0,     0,     0,     0,  2858,     0,  2859,
       0,  2868,  2869,  2870,     0,     0,     0,  2861,  2871,    52,
       0,     0,     0,     0,     0,     0,     0,    53,   879,   879,
     879,     0,     0,     0,     0,  2872,     0,     0,  2873,     0,
       0,     0,     0,   879,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2874,     0,
       0,     0,     0,     0,     0,   879,     0,     0,  2864,     0,
       0,   879,     0,    54,   879,     0,   879,  2876,     0,     0,
       0,     0,   879,     0,   879,   879,    55,     0,     0,     0,
      56,     0,     0,    57,     0,     0,  2867,     0,    58,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,     0,     0,     0,     0,     0,     0,     0,  1402,
       0,    59,    60,     0,     0,     0,     0,     0,     0,    61,
       0,     0,     0,     0,     0,    62,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2868,  2869,  2870,     0,     0,     0,     0,
    2871,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2872,     0,     0,
    2873,     0,     0,     0,     0,     0,     0,     0,     0,   879,
       0,     0,     0,     0,     0,     0,     0,     0,   879,     0,
    2874,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2876,
       0,   879,     0,     0,  1746,     0,     0,  1747,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   879,     0,     0,     0,     0,     0,     0,     0,
     879,     0,  1779,  1780,     0,     0,     0,     0,     0,   879,
       0,  1790,  1791,     0,     0,  1794,  1795,  1796,  1797,  1800,
    1801,  1802,  1803,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1820,  1821,     0,  1822,  1823,     0,     0,     0,
       0,  1849,  1850,     0,     0,     0,  1859,  1860,  1861,  1862,
    1863,  1864,     0,  1866,  1868,     0,     0,     0,     0,     0,
       0,     0,  1876,  1877,     0,  1880,  1881,     0,     0,     0,
       0,     0,  1885,  1886,  1887,  1888,     0,  1890,   975,     0,
    1893,     0,  1895,  1896,  1897,  1898,  1899,     0,     0,  1902,
       0,     0,  1905,  1906,     0,     0,     0,  1909,     0,     0,
       0,  1912,  1916,  1917,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1924,  1925,  1926,     0,     0,     0,     0,
       0,     0,     0,  1930,     0,     0,     0,   879,     0,     0,
    1935,  1936,  1937,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1977,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2892,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2830,
     879,  2831,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -860,  -860,     0,  2833,     0,     0,     0,
       0,     0,     0,     0,  -860,     0,     0,     0,     0,     0,
    2051,     0,     0,     0,  2836,     0,     0,     0,     0,     0,
       0,     0,  2837,   879,     0,     0,  2061,   879,     0,     0,
       0,     0,   879,   879,     0,     0,     0,     0,     0,     0,
       0,   879,     0,   879,     0,   879,   879,   879,   879,     0,
    2839,   879,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   879,     0,   879,  1703,   879,   879,  2840,   879,     0,
     879,     0,   879,   879,   879,   879,     0,   879,   879,     0,
       0,   879,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,     0,  2111,     0,     0,   879,     0,  2845,   879,
       0,   879,     0,   879,   879,     0,   879,   879,     0,     0,
    2138,   879,   879,   879,     0,     0,     0,   879,   879,   879,
       0,   879,     0,   879,     0,   879,     0,   879,     0,   879,
       0,     0,     0,     0,   879,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,     0,     0,     0,     0,   879,     0,     0,   879,
       0,     0,     0,     0,     0,   879,     0,     0,     0,   879,
     296,  2190,   298,   879,     0,     0,     0,     0,     0,     0,
    2849,     0,     0,     0,     0,     0,     0,  2850,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2851,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   975,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   975,   975,   879,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2853,     0,     0,     0,     1,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2854,     0,     0,     0,     0,     3,     0,     0,     0,     4,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     5,     6,     0,     0,     7,     0,     0,
       0,     8,     0,     0,     0,     0,     9,    10,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,     0,     0,  2858,
       0,  2859,     0,     0,     0,     0,     0,     0,     0,  2861,
       0,  2406,     0,     0,     0,    12,     0,     0,     0,     0,
       0,   975,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,     0,     0,     0,     0,     0,  2892,     0,    14,     0,
      15,    16,     0,     0,     0,   879,     0,     0,     0,     0,
       0,     0,   879,    17,    18,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2867,     0,
    3293,    20,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3293,  3293,     0,     0,     0,     0,     0,    21,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    22,     0,    23,
       0,     0,     0,     0,     0,    24,  2497,  2499,  2501,    25,
       0,     0,     0,     0,     0,  2868,  2869,  2870,     0,     0,
       0,     0,  2871,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2892,     0,    27,     0,    28,  2872,
       0,     0,  2873,  2532,     0,     0,     0,     0,     0,     0,
       0,     0,  2537,     0,  2538,    29,     0,     0,     0,     0,
       0,     0,  2874,     0,     0,     0,     0,     0,     0,     0,
     975,     0,     0,    30,     0,   975,   879,    31,     0,     0,
       0,  2876,     0,     0,    32,     0,     0,     0,  2565,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3293,  3293,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   879,     0,     0,     0,   879,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   879,   879,     0,  2631,     0,     0,
       0,     0,     0,     0,     0,    33,  2644,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   879,
       0,     0,     0,     0,    34,     0,    35,     0,   879,  2138,
     879,     0,   879,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
    2692,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   879,     0,     0,     0,  2701,   879,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      39,     0,    40,     0,    41,    42,   879,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,    46,     0,   975,     0,     0,     0,     0,     0,
       0,    47,     0,     0,   975,   975,   975,   975,     0,   879,
       0,     0,     0,     0,     0,    48,     0,     0,     0,     0,
      49,    50,    51,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    52,   879,     0,     0,     0,     0,     0,
       0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2783,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      55,     0,     0,     0,    56,     0,     0,    57,     0,     0,
       0,     0,    58,  2892,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   879,     0,     0,  2919,     0,
       0,     0,     0,     0,     0,    59,    60,     0,     0,     0,
       0,     0,     0,    61,     0,     0,     0,     0,     0,    62,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2977,     0,     0,     0,  2979,     0,     0,     0,     0,
    2981,  2982,     0,     0,     0,     0,     0,     0,     0,  1797,
       0,  3000,     0,  1797,     0,  3003,  3004,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3011,
       0,  3012,     0,  3013,  2892,     0,  3015,     0,  3016,     0,
    3017,  3018,  3019,  3020,     0,  3021,  3022,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3026,     0,
       0,     0,     0,     0,  3027,     0,     0,  3028,     0,  3029,
       0,  3030,  3031,     0,  3032,     0,     0,     0,     0,  3035,
    3036,  3037,   975,     0,     0,  3039,  3040,  3041,     0,  3042,
       0,  3044,     0,  3046,     0,  3048,     0,  3049,     0,     0,
       0,     0,  3050,     0,     0,     0,     0,     1,     0,     2,
       0,     0,     0,     0,     0,     0,     0,  3293,  3074,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   879,     0,
       0,     4,     0,  3084,     0,     0,     0,  3089,     0,     0,
       0,     0,     0,     0,     0,     5,     6,     0,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     9,    10,
     879,     0,     0,     0,     0,     0,   879,   879,     0,   879,
       0,     0,     0,     0,     0,     0,     0,     0,    11,     0,
     879,     0,     0,     0,     0,   879,     0,     0,   879,     0,
     879,   879,     0,     0,     0,     0,     0,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1091,     0,     0,     0,     0,     0,     0,
       0,     0,    13,     0,     0,     0,     0,     0,     0,     0,
      14,   879,    15,    16,     0,     0,     0,     0,     0,  1033,
       0,     0,     0,     0,     0,    17,    18,     0,     0,     0,
       0,     0,  1034,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   983,  1035,   879,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1036,  1017,
       0,    21,     0,     0,     0,     0,     0,     0,     0,     0,
    1037,   879,     0,     0,     0,     0,     0,     0,     0,    22,
       0,    23,     0,     0,     0,     0,     0,    24,     0,     0,
       0,    25,     0,     0,     0,     0,  1038,     0,  1039,     0,
    1040,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1041,     0,     0,     0,     0,    27,     0,
      28,   879,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3262,     0,    15,    16,    29,     0,     0,
    3269,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2892,     0,     0,    30,     0,   879,     0,    31,
       0,     0, -2043,  1042,     0,   879,     0,  1043,     0,     0,
    1044,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1045,     0,  1046,     0,     0,     0,     0,
       0,     0,     0,  1047,     0,  1048,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   296,     0,   298,     0,     0,
       0,     0,     0,     0,  1049,  1050,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,    35,     0,
       0,     0,     0,     0,  3428,     0,     0,     0,     0,  1052,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,   879,   879,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1053,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,    39,     0,    40,     0,     0,    42,     0,  3470,
      43,    44,     0,  3472,     0,     0,     0,     0,     0,     0,
       0,    45,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,    47,     0,     0,     0,     0,   879,     0,
       0,     0,  3501,  3502,     0,     0,     0,    48,     0,     0,
       0,     0,    49,    50,    51,     0,     0,     0,     0,  1054,
       0,     0,     0,     0,     0,     0,     0,  3528,     0,     0,
       0,     0,     0,  4140,  4141,   879,  3538,     0,  3540,  4142,
    3542,  4143,     0,  4144,  4145,    52,     0,   975,  1055,     0,
       0,     0,     0,    53,     0,     0,     0,     0,     0,     0,
    3920,  1056,  1057,     0,     0,  1058,  1059,   879,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1060,     0,
       0,     0,     0,     0,  2565,     0,     0,     0,     0,    54,
       0,     0,     0,   879,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,     0,     0,    56,  4146,     0,    57,
    4147,     0,     0,     0,    58,     0,     0,     0,  4148,     0,
       0,     0,     0,     0,     0,   879,     0,  1061,     0,     0,
       0,   879,     0,     0,     0,     0,     0,  4149,    60,     0,
    1062,     0,     0,     0,     0,    61,     0,   879,     0,     0,
       0,    62,     0,     0,     0,  4150,     0,     0,     0,     0,
       0,     0,  2138,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2682,     0,     0,     0,  1063,     0,     0,
       0,     0,  4151,     0,  4152,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1064,     0,     0,     0,
    4153,  4154,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4155,     0,     0,
       0,     0,     0,  3262,     0,     0, -2682,     0,     0,     0,
       0,     0,     0,     0,  1065,   975,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4156,     0,     0,
       0,     0,     0,     0,     0,     0,  4157,  4158,     0,  4159,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   879,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     879,     0,     0,     0,  4160,  4161,  4162,     0,     0,     0,
       0,     0,     0,   879,   975,     0,     0,     0,     0,     0,
       0,     0,     0,  4163,  4164,  4165,     0,     0,     0,     0,
       0,  4166,     0,     0,  4167,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4168,     0,  4169,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2892,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4170,  4171,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   879,     0,     0,     0,     0,  4172,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3912,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4624,     0,     0,     0,     0,     0,     0,
       0,  4624,     0,     0,     0,     0,     0,     0,  3942,     0,
       0,     0,     0,     0,  3946,  3947,     0,  4173,     0,     0,
       0,  4174,     0,     0,     0,     0,     0,   879,  3954,     0,
       0,     0,     0,  3956,   975,  4175,  3957,     0,  3958,  3959,
       0,     0,     0,     0,     0,     0,     0,   879,     0,     0,
       0,     0,     0,     0,     0,  4140,  4141,     0,     0,     0,
       0,  4142,     0,  4143,     0,  4144,  4145,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3920,     0,   879,     0,   879,     0,     0,     0,
       0,     0,     0,     0,  4176,     0,     0,     0,  4177,     0,
       0,  4178,  4179,  4180,  4181,     0,     0,  4724,     0,     0,
       0,  4724,     0,  2565,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4146,
       0,     0,  4147,     0,     0,  4182,  4183,     0,     0,  2565,
    4148,     0,   879,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4149,
       0,     0,     0,  4184,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4624,     0,  4150,     0,     0,
       0,     0,     0,     0,     0,   879,     0,     0,     0,  2565,
       0,     0,     0,  4624,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4151,     0,  4152,     0,     0,   975,
       0,     0,     0,     0,     0,   975,     0,     0,     0,     0,
       0,     0,  4153,  4154,     0,  3262,     0,     0,     0,     0,
       0,     0,     0,  4089,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   879,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4155,
       0,  4724,     0,     0,     0,     0,  4724,     0,     0,     0,
       0,     0,     0,  4724,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4156,
       0,     0,     0,     0,     0,     0,     0,     0,  4157,  4158,
     879,  4159,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   879,     0,  4160,  4161,  4162,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4163,  4164,  4165,     0,  4202,
    4203,     0,     0,  4166,     0,     0,  4167,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4168,     0,  4169,     0,     0,     0,     0,
       0,     0,     0,     0,  4724,     0,     0,     0,     0,     0,
    4956,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4170,  4171,     0,  3262,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4172,   879,     0,     0,     0,     0,     0,     0,     0,
       0,   879,     0,  3262,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   975,     0,     0,  2565,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4174,  4724,     0,  4724,  4724,   879,     0,
       0,     0,     0,     0,     0,     0,     0,  4175,     0,     0,
       0,  4324,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4362,     0,     0,     0,     0,     0,  3262,
       0,     0,     0,  4724,     0,     0,  4724,     0,     0,     0,
       0,     0,     0,     0,     0,  4378,  4176,     0,     0,     0,
    4177,     0,     0,  4178,  4179,  4180,  4181,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   879,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4724,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4182,  4183,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   975,     0,     0,
       0,     0,     0,     0,     0,  4184,     0,     0,     0,     0,
       0,     0,   879,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   975,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   879,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
    4484,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,  3262,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,  2565,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,  1016,  1017,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,  1018,   236,     0,   237,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
    1019,     0,   287,     0,     0,  4666,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,  3262,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,  4700,   316,  4702,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,  1020,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
    1317,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,  1021,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,  1022,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,  1023,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,  1024,   460,     0,     0,  4883,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,  4906,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,  1025,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,     0,     0,     0,     0,
       0,   537,   538,     0,   539,   540,   541,     0,     0,   542,
    4994,     0,     0,     0,     0,     0,     0,     0,     0,  2565,
       0,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,  1026,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,  1913,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,  5034,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,     0,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,   780,  2565,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,  1914,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,   797,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,  1915,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,  2134,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,  2135,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,  2136,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,     0,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,   780,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,   797,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
    2137,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     836,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,   849,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,  2496,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,   780,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,   797,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,   732,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,   762,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,  2498,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,   780,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,   797,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     836,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,   849,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,  2500,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,   780,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,   797,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,   732,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,  2561,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,     0,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,  2562,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,   780,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,   797,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     836,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,   849,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,     0,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,   780,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,   797,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,   732,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,   762,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,     0,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,   780,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,   797,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     836,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,  1248,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,  1944,
       0,   168,     0,     0,     0,  1945,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,     0,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,   780,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,     0,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,   732,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,   762,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,     0,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,   780,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,   797,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
    2050,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,   849,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,     0,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,  2976,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,   797,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,   732,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,   762,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,     0,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,  3034,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,   797,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     836,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,   849,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,     0,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,   780,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,  5103,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,     0,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,   732,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,   762,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,     0,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,   780,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,     0,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     836,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,   849,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,   732,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,     0,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,  1959,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
     796,     0,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
     846,   847,     0,     0,     0,     0,   848,   849,     0,     0,
     850,   851,     0,     0,   852,   853,   161,     0,   162,   729,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   730,     0,   171,   172,   173,   174,   175,
     176,   177,   731,   179,     0,   180,     0,     0,   732,   181,
     733,   734,   735,   182,   736,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   737,   738,   190,
     191,     0,   192,   739,   740,   194,   195,     0,   196,   197,
     198,   199,   741,   201,     0,   742,   203,   743,   744,   745,
     746,   747,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   748,   223,
       0,   224,   749,   750,   225,     0,     0,   226,   751,   752,
     227,   753,   754,   228,     0,   229,   755,   756,     0,   230,
     231,   232,   757,   758,   759,     0,     0,     0,     0,   760,
     235,   761,     0,     0,   762,   236,     0,   237,     0,   763,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,   764,     0,   264,   265,   266,   267,   765,   766,
     268,   269,     0,   270,   767,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   769,   277,     0,   278,     0,
     279,     0,   280,   281,   770,   283,   771,   285,   286,     0,
     287,     0,   772,   773,   774,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   777,   295,
     296,   297,   298,   778,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,   779,   304,   305,  1961,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   781,     0,
       0,   316,     0,   782,   317,   318,     0,     0,     0,     0,
       0,   783,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   785,   346,
     347,   348,   349,   786,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   787,   358,     0,     0,   788,
     360,   789,   361,     0,   362,   790,   791,   792,   793,   794,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,   796,     0,   798,   378,   379,
       0,   799,   800,   801,   380,     0,   802,   381,   382,   803,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,   804,   394,     0,   395,     0,   396,   397,   805,
     806,   399,   400,   401,   402,   807,   808,   405,   809,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   810,   418,   419,     0,   811,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,   812,   813,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   814,     0,
     815,   444,   445,   446,   447,   816,     0,   817,   450,   818,
     451,   452,   453,   454,     0,   819,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,   820,
     821,   483,   484,   485,     0,   486,   487,   822,   489,   490,
     491,   823,   824,   492,   493,   494,   495,   825,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,   827,   828,   829,   830,     0,     0,     0,     0,
       0,   509,   510,   511,     0,   831,   832,   833,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     836,   527,     0,     0,   837,   838,   839,   840,   528,     0,
       0,   529,   841,     0,   842,   530,   531,   532,   533,   534,
     843,   844,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   845,     0,     0,
       0,     0,     0,     0,     0,   846,   847,     0,     0,     0,
       0,   848,   849,     0,     0,   850,   851,     0,     0,   852,
     853,   161,     0,   162,   729,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   730,     0,
     171,   172,   173,   174,   175,   176,   177,   731,   179,     0,
     180,     0,     0,     0,   181,   733,   734,   735,   182,   736,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,   737,   738,   190,   191,     0,   192,   739,   740,
     194,   195,     0,   196,   197,   198,   199,   741,   201,     0,
     742,   203,   743,   744,   745,   746,   747,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   748,   223,     0,   224,   749,   750,   225,
       0,     0,   226,   751,   752,   227,   753,   754,   228,     0,
     229,   755,   756,     0,   230,   231,   232,   757,   758,   759,
       0,     0,     0,     0,   760,   235,   761,     0,     0,   762,
     236,     0,   237,     0,   763,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,   764,     0,   264,
     265,   266,   267,   765,   766,   268,   269,     0,   270,   767,
     271,   272,   768,     0,   273,   274,   275,     0,     0,     0,
     769,   277,     0,   278,     0,   279,     0,   280,   281,   770,
     283,   771,   285,   286,     0,   287,     0,   772,   773,   774,
     288,   289,   290,     0,   291,   775,   776,     0,   292,   293,
       0,     0,     0,   777,   295,   296,   297,   298,   778,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,   779,   304,   305,  4584,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   781,     0,     0,   316,     0,   782,   317,
     318,     0,     0,     0,     0,     0,   783,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,   784,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   785,   346,   347,   348,   349,   786,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     787,   358,     0,     0,   788,   360,   789,   361,     0,   362,
     790,   791,   792,   793,   794,   367,   368,   369,   370,   371,
     372,     0,   795,   373,     0,     0,   374,   375,   376,   377,
       0,     0,   798,   378,   379,     0,   799,   800,   801,   380,
       0,   802,   381,   382,   803,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,   804,   394,     0,
     395,     0,   396,   397,   805,   806,   399,   400,   401,   402,
     807,   808,   405,   809,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   810,
     418,   419,     0,   811,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,   812,
     813,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   814,     0,   815,   444,   445,   446,   447,
     816,     0,   817,   450,   818,   451,   452,   453,   454,     0,
     819,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,   820,   821,   483,   484,   485,     0,
     486,   487,   822,   489,   490,   491,   823,   824,   492,   493,
     494,   495,   825,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   826,   502,   503,     0,   504,   827,   828,   829,
     830,     0,     0,     0,     0,     0,   509,   510,   511,     0,
     831,   832,   833,   513,   514,   515,   834,   516,   517,   518,
     835,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   836,   527,     0,     0,   837,
     838,   839,   840,   528,     0,     0,   529,   841,     0,   842,
     530,   531,   532,   533,   534,   843,   844,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   845,     0,     0,     0,     0,     0,     0,     0,
    4585,  4586,     0,     0,     0,     0,     0,  4587,     0,     0,
       0,   851,     0,     0,   852,   853,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
     733,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,  2007,     0,     0,     0,     0,   234,
     235,   761,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,   766,
     268,   269,     0,   270,     0,   271,   272,   768,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
     775,   776,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,   784,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   795,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,   800,   801,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   826,   502,   503,
       0,   504,  2008,   506,   507,  2009,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,   832,   512,   513,   514,
     515,   834,   516,   517,   518,   835,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,   852,
     853,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,     0,   542,     0,     0,     0,     0,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,  1537,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
     678,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,   158,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,     0,     0,
       0,     0,     0,   537,   538,     0,   539,   540,   541,     0,
       0,   542,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,  1932,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,   678,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,   158,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
    2765,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,  1016,
    1017,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
    1018,   236,     0,   237,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,  1019,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
    1020,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,  1021,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,  1022,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,  1023,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,  1024,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
       0,     0,     0,     0,     0,   537,   538,     0,   539,   540,
     541,     0,     0,   542,     0,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,  1026,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,     0,   202,   203,   204,
     205,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,     0,   217,   218,     0,   219,   220,   221,
     222,   223,     0,   224,     0,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,   229,     0,     0,
       0,   230,   231,   232,     0,     0,   233,     0,     0,     0,
       0,   234,   235,     0,     0,     0,     0,   236,     0,   237,
       0,     0,     0,     0,   238,     0,   239,   240,   241,   242,
     243,     0,     0,     0,     0,   244,     0,     0,   245,   246,
     247,     0,     0,     0,   248,     0,   249,   250,     0,   251,
     252,   253,     0,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,     0,     0,   264,   265,   266,   267,
       0,     0,   268,   269,     0,   270,     0,   271,   272,     0,
       0,   273,   274,   275,     0,     0,     0,   276,   277,     0,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,     0,   287,     0,     0,     0,     0,   288,   289,   290,
       0,   291,     0,     0,     0,   292,   293,     0,     0,     0,
     294,   295,   296,   297,   298,     0,     0,     0,   299,   300,
     301,   302,     0,     0,   303,     0,     0,     0,     0,   304,
     305,     0,     0,     0,   306,     0,   307,   308,     0,   309,
     310,     0,     0,   311,     0,   312,     0,     0,   313,   314,
     315,     0,     0,   316,     0,     0,   317,   318,     0,     0,
       0,     0,     0,   319,   320,     0,   321,     0,   322,     0,
     323,   324,     0,     0,     0,     0,     0,     0,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
       0,   346,   347,   348,   349,     0,   350,   351,   352,     0,
       0,     0,     0,   353,   354,   355,   356,   357,   358,     0,
       0,   359,   360,     0,   361,     0,   362,     0,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,     0,
     373,     0,     0,   374,   375,   376,   377,     0,     0,     0,
     378,   379,     0,     0,     0,     0,   380,     0,     0,   381,
     382,   383,     0,   384,   385,   386,   387,     0,   388,   389,
       0,     0,     0,     0,     0,   390,     0,     0,     0,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,   398,     0,   399,   400,   401,   402,   403,   404,   405,
       0,   406,   407,     0,   408,   409,   410,     0,   411,     0,
     412,   413,   414,   415,   416,     0,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,   422,     0,   423,
     424,   425,     0,     0,   426,   427,   428,   429,   430,     0,
     431,   432,     0,   433,   434,   435,     0,     0,   436,     0,
     437,     0,   438,   439,     0,   440,   441,     0,   442,     0,
     443,     0,     0,   444,   445,   446,   447,   448,     0,   449,
     450,     0,   451,   452,   453,   454,     0,   455,   456,     0,
       0,     0,   457,   458,   459,   460,     0,     0,     0,   461,
       0,     0,     0,   462,     0,   463,   464,   465,   466,   467,
     468,     0,   469,   470,   471,   472,   473,   474,     0,     0,
       0,     0,     0,     0,   475,   476,     0,   477,     0,     0,
     478,     0,     0,     0,   479,   480,   481,     0,     0,     0,
     482,     0,     0,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,     0,     0,   492,   493,   494,   495,     0,
     496,   497,     0,     0,   498,   499,   500,   501,     0,     0,
     502,   503,     0,   504,   505,   506,   507,   508,     0,     0,
       0,     0,     0,   509,   510,   511,     0,     0,     0,   512,
     513,   514,   515,     0,   516,   517,   518,     0,   519,   520,
       0,   521,   522,     0,     0,   523,     0,     0,   524,     0,
     525,     0,   526,   527,     0,     0,     0,     0,     0,     0,
     528,     0,     0,   529,     0,     0,     0,   530,   531,   532,
     533,   534,   535,   536,     0,     0,     0,     0,     0,     0,
       0,   537,   538,     0,   539,   540,   541,     0,     0,   542,
       0,     0,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,  5152,   168,     0,     0,     0,
     169,   852,  5153,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,  1404,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
    1405,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
       0,   202,   203,   204,   205,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,     0,   217,   218,
       0,   219,   220,   221,   222,   223,     0,   224,     0,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,   229,     0,     0,     0,   230,   231,   232,     0,     0,
     233,     0,     0,     0,     0,   234,   235,     0,     0,     0,
       0,   236,     0,   237,     0,     0,     0,     0,   238,     0,
     239,   240,   241,   242,   243,     0,     0,     0,     0,   244,
       0,     0,   245,   246,   247,     0,     0,     0,   248,     0,
     249,   250,     0,   251,   252,   253,     0,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,     0,     0,
     264,   265,   266,   267,     0,     0,   268,   269,     0,   270,
       0,   271,   272,     0,     0,   273,   274,   275,     0,     0,
       0,   276,   277,     0,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,     0,   287,     0,     0,     0,
       0,   288,   289,   290,     0,   291,     0,     0,     0,   292,
     293,     0,     0,     0,   294,   295,   296,   297,   298,     0,
       0,     0,   299,   300,   301,   302,     0,     0,   303,     0,
       0,     0,     0,   304,   305,     0,     0,     0,   306,     0,
     307,   308,     0,   309,   310,     0,     0,   311,     0,   312,
       0,     0,   313,   314,   315,     0,     0,   316,     0,     0,
     317,   318,     0,     0,     0,     0,     0,   319,   320,     0,
     321,     0,   322,     0,   323,   324,     0,     0,     0,     0,
       0,     0,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,     0,   346,   347,   348,   349,     0,
     350,   351,   352,     0,     0,     0,     0,   353,   354,   355,
     356,   357,   358,     0,     0,   359,   360,     0,   361,     0,
     362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,     0,   373,     0,     0,   374,   375,   376,
     377,     0,     0,     0,   378,   379,     0,     0,     0,     0,
     380,     0,     0,   381,   382,   383,     0,   384,   385,   386,
     387,     0,   388,   389,     0,     0,     0,     0,     0,   390,
       0,     0,     0,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,   398,     0,   399,   400,   401,
     402,   403,   404,   405,     0,   406,   407,     0,   408,   409,
     410,     0,   411,     0,   412,   413,   414,   415,   416,     0,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,   422,     0,   423,   424,   425,     0,     0,   426,   427,
     428,   429,   430,     0,   431,   432,     0,   433,   434,   435,
       0,     0,   436,     0,   437,     0,   438,   439,     0,   440,
     441,     0,   442,     0,   443,     0,     0,   444,   445,   446,
     447,   448,     0,   449,   450,     0,   451,   452,   453,   454,
       0,   455,   456,     0,     0,     0,   457,   458,   459,   460,
       0,     0,     0,   461,     0,     0,     0,   462,     0,   463,
     464,   465,   466,   467,   468,     0,   469,   470,   471,   472,
     473,   474,     0,     0,     0,     0,     0,     0,   475,   476,
       0,   477,     0,     0,   478,     0,     0,     0,   479,   480,
     481,     0,     0,     0,   482,     0,     0,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,     0,     0,   492,
     493,   494,   495,     0,   496,   497,     0,     0,   498,   499,
     500,   501,     0,     0,   502,   503,     0,   504,   505,   506,
     507,   508,     0,     0,     0,     0,     0,   509,   510,   511,
       0,     0,     0,   512,   513,   514,   515,     0,   516,   517,
     518,     0,   519,   520,     0,   521,   522,     0,     0,   523,
       0,     0,   524,     0,   525,     0,   526,   527,     0,     0,
       0,     0,     0,     0,   528,     0,     0,   529,     0,     0,
       0,   530,   531,   532,   533,   534,   535,   536,     0,     0,
       0,     0,     0,     0,     0,   537,   538,     0,   539,   540,
     541,     0,     0,   542,     0,     0,     0,     0,     0,     0,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,   852,  5153,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,     0,   202,
     203,   204,   205,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,     0,   217,   218,     0,   219,
     220,   221,   222,   223,     0,   224,     0,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,   229,
       0,     0,     0,   230,   231,   232,     0,     0,   233,     0,
       0,     0,     0,   234,   235,     0,     0,     0,     0,   236,
       0,   237,     0,     0,     0,     0,   238,     0,   239,   240,
     241,   242,   243,     0,     0,     0,     0,   244,     0,     0,
     245,   246,   247,     0,     0,     0,   248,     0,   249,   250,
       0,   251,   252,   253,     0,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,     0,     0,   264,   265,
     266,   267,     0,     0,   268,   269,     0,   270,     0,   271,
     272,     0,     0,   273,   274,   275,     0,     0,     0,   276,
     277,     0,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,     0,   287,     0,     0,     0,     0,   288,
     289,   290,     0,   291,     0,     0,     0,   292,   293,     0,
       0,     0,   294,   295,   296,   297,   298,     0,     0,     0,
     299,   300,   301,   302,     0,     0,   303,     0,     0,     0,
       0,   304,   305,     0,     0,     0,   306,     0,   307,   308,
       0,   309,   310,     0,     0,   311,     0,   312,     0,     0,
     313,   314,   315,     0,     0,   316,     0,     0,   317,   318,
       0,     0,     0,     0,     0,   319,   320,     0,   321,     0,
     322,     0,   323,   324,     0,     0,     0,     0,     0,     0,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,     0,   346,   347,   348,   349,     0,   350,   351,
     352,     0,     0,     0,     0,   353,   354,   355,   356,   357,
     358,     0,     0,   359,   360,     0,   361,     0,   362,     0,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
       0,     0,   373,     0,     0,   374,   375,   376,   377,     0,
       0,     0,   378,   379,     0,     0,     0,     0,   380,     0,
       0,   381,   382,   383,     0,   384,   385,   386,   387,     0,
     388,   389,     0,     0,     0,     0,     0,   390,     0,     0,
       0,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,   398,     0,   399,   400,   401,   402,   403,
     404,   405,     0,   406,   407,     0,   408,   409,   410,     0,
     411,     0,   412,   413,   414,   415,   416,     0,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,   422,
       0,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,   431,   432,     0,   433,   434,   435,     0,     0,
     436,     0,   437,     0,   438,   439,     0,   440,   441,     0,
     442,     0,   443,     0,     0,   444,   445,   446,   447,   448,
       0,   449,   450,     0,   451,   452,   453,   454,     0,   455,
     456,     0,     0,     0,   457,   458,   459,   460,     0,     0,
       0,   461,     0,     0,     0,   462,     0,   463,   464,   465,
     466,   467,   468,     0,   469,   470,   471,   472,   473,   474,
       0,     0,     0,     0,     0,     0,   475,   476,     0,   477,
       0,     0,   478,     0,     0,     0,   479,   480,   481,     0,
       0,     0,   482,     0,     0,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,     0,     0,   492,   493,   494,
     495,     0,   496,   497,     0,     0,   498,   499,   500,   501,
       0,     0,   502,   503,     0,   504,   505,   506,   507,   508,
       0,     0,     0,     0,     0,   509,   510,   511,     0,     0,
       0,   512,   513,   514,   515,     0,   516,   517,   518,     0,
     519,   520,     0,   521,   522,     0,     0,   523,     0,     0,
     524,     0,   525,     0,   526,   527,     0,     0,     0,     0,
       0,     0,   528,     0,     0,   529,     0,     0,     0,   530,
     531,   532,   533,   534,   535,   536,     0,     0,     0,     0,
       0,     0,     0,   537,   538,     0,   539,   540,   541,     0,
       0,   542,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,  1405,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,  3716,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,   649,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
    2330,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,  2331,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,  3717,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456, -2218,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,   651,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,    60,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,  3384,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,  3716,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,   649,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,  2330,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,  2331,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,   651,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   542,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,  3384,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,    60,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,  3151,     0,   169,     0,     0,   170,   852,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   542,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,  1253,     0,     0,
     169,     0,     0,   170,   852,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
    1485,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,   581,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   542,     0,     0,     0,     0,     0,     0,     0,
       0,   161,  2584,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,   581,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   542,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,  3383,     0,     0,
     169,     0,     0,   170,  3384,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,  3754,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,  3384,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   542,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,   581,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   660,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   661,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   662,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,   581,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   542,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,   852,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,     0,   202,   203,   204,   205,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,     0,   217,   218,     0,   219,   220,   221,   222,   223,
       0,   224,     0,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,   229,     0,     0,     0,   230,
     231,   232,     0,     0,   233,     0,     0,     0,     0,   234,
     235,     0,     0,     0,     0,   236,     0,   237,     0,     0,
       0,     0,   238,     0,   239,   240,   241,   242,   243,     0,
       0,     0,     0,   244,     0,     0,   245,   246,   247,     0,
       0,     0,   248,     0,   249,   250,     0,   251,   252,   253,
       0,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,     0,     0,   264,   265,   266,   267,     0,     0,
     268,   269,     0,   270,     0,   271,   272,     0,     0,   273,
     274,   275,     0,     0,     0,   276,   277,     0,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,     0,
     287,     0,     0,     0,     0,   288,   289,   290,     0,   291,
       0,     0,     0,   292,   293,     0,     0,     0,   294,   295,
     296,   297,   298,     0,     0,     0,   299,   300,   301,   302,
       0,     0,   303,     0,     0,     0,     0,   304,   305,     0,
       0,     0,   306,     0,   307,   308,     0,   309,   310,     0,
       0,   311,     0,   312,     0,     0,   313,   314,   315,     0,
       0,   316,     0,     0,   317,   318,     0,     0,     0,     0,
       0,   319,   320,     0,   321,     0,   322,     0,   323,   324,
       0,     0,     0,     0,     0,     0,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,     0,   346,
     347,   348,   349,     0,   350,   351,   352,     0,     0,     0,
       0,   353,   354,   355,   356,   357,   358,     0,     0,   359,
     360,     0,   361,     0,   362,     0,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,     0,   373,     0,
       0,   374,   375,   376,   377,     0,     0,     0,   378,   379,
       0,     0,     0,     0,   380,     0,     0,   381,   382,   383,
       0,   384,   385,   386,   387,     0,   388,   389,     0,     0,
       0,     0,     0,   390,     0,     0,     0,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,   398,
       0,   399,   400,   401,   402,   403,   404,   405,     0,   406,
     407,     0,   408,   409,   410,     0,   411,     0,   412,   413,
     414,   415,   416,     0,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,   422,     0,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,   431,   432,
       0,   433,   434,   435,     0,     0,   436,     0,   437,     0,
     438,   439,     0,   440,   441,     0,   442,     0,   443,     0,
       0,   444,   445,   446,   447,   448,     0,   449,   450,     0,
     451,   452,   453,   454,     0,   455,   456,     0,     0,     0,
     457,   458,   459,   460,     0,     0,     0,   461,     0,     0,
       0,   462,     0,   463,   464,   465,   466,   467,   468,     0,
     469,   470,   471,   472,   473,   474,     0,     0,     0,     0,
       0,     0,   475,   476,     0,   477,     0,     0,   478,     0,
       0,     0,   479,   480,   481,     0,     0,     0,   482,     0,
       0,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,     0,     0,   492,   493,   494,   495,     0,   496,   497,
       0,     0,   498,   499,   500,   501,     0,     0,   502,   503,
       0,   504,   505,   506,   507,   508,     0,     0,     0,     0,
       0,   509,   510,   511,     0,     0,     0,   512,   513,   514,
     515,     0,   516,   517,   518,     0,   519,   520,     0,   521,
     522,     0,     0,   523,     0,     0,   524,     0,   525,     0,
     526,   527,     0,     0,     0,     0,     0,     0,   528,     0,
       0,   529,     0,     0,     0,   530,   531,   532,   533,   534,
     535,   536,     0,     0,     0,     0,     0,     0,     0,   537,
     538,     0,   539,   540,   541,     0,     0,   542,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,     0,  3384,
     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
     952,     0,     0,     0,     0,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,     0,     0,     0,
       0,   189,     7,     0,   190,   191,     0,   192,     0,     0,
       0,     0,     0,   196,   197,   198,   953,   200,   201,     0,
     202,   203,     0,     0,     0,     0,     0,     0,   209,     0,
     211,     0,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,     0,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,     0,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,     0,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,     0,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,     0,     0,     0,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,   954,   270,     0,
     271,   272,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,     0,   286,     0,   287,     0,     0,     0,     0,
       0,   289,   290,     0,     0,     0,     0,     0,     0,   293,
       0,     0,     0,   294,   295,   296,   297,   298,    26,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,     0,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,   955,     0,   311,     0,   312,     0,
       0,     0,   314,   315,     0,     0,   316,   956,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,    32,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,     0,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   957,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   392,   393,     0,     0,     0,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,     0,     0,     0,     0,     0,     0,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,     0,     0,   433,     0,   435,    41,
       0,   436,     0,     0,     0,   438,     0,     0,   440,   441,
       0,   442,   958,   443,     0,     0,   444,     0,   446,   447,
     448,     0,   449,   450,     0,   451,     0,   453,   454,     0,
     455,     0,     0,     0,     0,   457,   458,   459,     0,     0,
       0,     0,   461,     0,     0,     0,     0,     0,     0,   464,
       0,     0,   467,   468,     0,   469,     0,   471,     0,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,     0,   481,
       0,     0,     0,   482,     0,     0,     0,   484,     0,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,     0,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,     0,   513,   514,   515,     0,     0,   517,   518,
       0,   519,   520,     0,     0,     0,     0,     0,   523,     0,
       0,   524,     0,     0,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
      59,     0,     0,     0,   537,     0,     0,   539,     0,   541,
       0,   161,   542,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,  4797,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,  1133,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,   678,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   158,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,   161,   542,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,  1303,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,   161,   542,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,  1973,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,   161,   542,   162,   163,   164,   165,   166,   167,     0,
       0,   168,  2396,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,   161,   542,   162,   163,   164,   165,   166,   167,     0,
       0,   168,  3606,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,   161,   542,   162,   163,   164,   165,   166,   167,     0,
       0,   168,  3747,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,     0,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,     0,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,     0,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,     0,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,   161,   542,   162,   163,   164,   165,   166,   167,     0,
       0,   168,  4368,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,  1524,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,     0,
     202,   203,   204,   205,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,     0,   217,   218,     0,
     219,   220,   221,   222,   223,     0,   224,     0,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
     229,     0,     0,     0,   230,   231,   232,     0,     0,   233,
       0,     0,     0,     0,   234,   235,     0,     0,     0,  1525,
     236,     0,   237,     0,     0,     0,     0,   238,     0,   239,
     240,   241,   242,   243,     0,     0,     0,     0,   244,     0,
       0,   245,   246,   247,     0,     0,     0,   248,     0,   249,
     250,     0,   251,   252,   253,     0,   254,   255,     0,   256,
     257,   258,   259,   260,   261,   262,   263,     0,     0,   264,
     265,   266,   267,     0,     0,   268,   269,     0,   270,     0,
     271,   272,     0,     0,   273,   274,   275,     0,     0,     0,
     276,   277,     0,   278,     0,   279,     0,   280,   281,   282,
     283,   284,   285,   286,     0,   287,     0,     0,     0,     0,
     288,   289,   290,     0,   291,     0,     0,     0,   292,   293,
       0,     0,     0,   294,   295,   296,   297,   298,     0,     0,
       0,   299,   300,   301,   302,     0,     0,   303,     0,     0,
       0,     0,   304,   305,     0,     0,     0,   306,     0,   307,
     308,     0,   309,   310,     0,     0,   311,     0,   312,     0,
       0,   313,   314,   315,     0,     0,   316,     0,     0,   317,
     318,   678,     0,     0,     0,     0,   319,   320,     0,   321,
       0,   322,     0,   323,   324,     0,     0,     0,     0,     0,
       0,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,     0,   346,   347,   348,   349,     0,   350,
     351,   352,     0,     0,     0,     0,   353,   354,   355,   356,
     357,   358,     0,     0,   359,   360,     0,   361,     0,   362,
       0,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,     0,   373,     0,     0,   374,   375,   376,   377,
       0,     0,     0,   378,   379,     0,     0,     0,     0,   380,
       0,     0,   381,   382,   383,     0,   384,   385,   386,   387,
       0,   388,   389,     0,     0,     0,     0,     0,   390,     0,
       0,     0,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,   398,     0,   399,   400,   401,   402,
     403,   404,   405,     0,   406,   407,     0,   408,   409,   410,
       0,   411,     0,   412,   413,   414,   415,   416,     0,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
     422,     0,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,   431,   432,     0,   433,   434,   435,     0,
       0,   436,     0,   437,     0,   438,   439,     0,   440,   441,
       0,   442,     0,   443,     0,     0,   444,   445,   446,   447,
     448,     0,   449,   450,     0,   451,   452,   453,   454,     0,
     455,   456,     0,     0,     0,   457,   458,   459,   460,     0,
       0,  1526,   461,     0,     0,     0,   462,     0,   463,   464,
     465,   466,   467,   468,     0,   469,   470,   471,   472,   473,
     474,     0,     0,     0,     0,     0,     0,   475,   476,     0,
     477,     0,     0,   478,     0,     0,     0,   479,   480,   481,
       0,     0,     0,   482,     0,     0,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,     0,     0,   492,   493,
     494,   495,     0,   496,   497,     0,     0,   498,   499,   500,
     501,     0,   158,   502,   503,     0,   504,   505,   506,   507,
     508,     0,     0,     0,     0,     0,   509,   510,   511,     0,
       0,     0,   512,   513,   514,   515,     0,   516,   517,   518,
       0,   519,   520,     0,   521,   522,     0,     0,   523,     0,
       0,   524,     0,   525,     0,   526,   527,     0,     0,     0,
       0,     0,     0,   528,     0,     0,   529,     0,     0,     0,
     530,   531,   532,   533,   534,   535,   536,     0,     0,     0,
       0,     0,     0,     0,   537,   538,     0,   539,   540,   541,
       0,     0,   542,     0,   161,  1527,   162,   163,   164,   165,
     166,   167,   900,   901,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,   902,     0,   226,     0,     0,   227,     0,
     903,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,   904,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,   905,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   906,   259,   260,   261,   262,   907,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   908,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,   909,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,   910,     0,
     303,     0,     0,     0,   911,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,   912,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   913,   413,   414,   415,
     914,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,   915,     0,
     426,   427,   428,   429,   430,     0,   916,   432,     0,   433,
     434,   435,     0,     0,   917,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,   918,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,   919,   920,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   921,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,   922,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,   923,   525,   924,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,  1006,   163,   164,   165,
     166,   167,  1007,   901,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,   902,     0,   226,     0,     0,   227,     0,
     903,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,   904,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,   905,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   906,   259,   260,   261,   262,   907,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   908,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,   909,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,   910,     0,
     303,     0,     0,     0,   911,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,   912,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   913,   413,   414,   415,
    1008,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,   915,     0,
     426,   427,   428,   429,   430,     0,   916,   432,     0,   433,
     434,   435,     0,     0,   917,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,   918,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,   919,   920,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   921,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,   922,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,   923,   525,   924,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,  2654,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,  2655,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,  2656,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    2657,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,   154,   155,     0,   378,   379,     0,     0,
       0,  2658,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,  4658,   609,  4659,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  2659,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,  1809,
       0,     0,  3855,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,  1810,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,  3286,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    3287,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,  3288,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  3289,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,  1809,
       0,     0,  4891,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,  1810,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,  3286,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    3287,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,  3288,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  3289,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,  1809,
       0,     0,  4959,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,  1810,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,  3286,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    3287,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,  3288,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  3289,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    2159,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,  2160,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
     804,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,  2161,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  2162,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    2159,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,  2160,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
     804,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,  4473,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  2162,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,  1133,
     903,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,  1539,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  1540,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,  1093,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,  1094,  1095,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,  1096,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
    2159,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,  2160,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
     804,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,  2162,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,  1524,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  1525,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,  1133,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,  1563,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
     903,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  2676,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,  1524,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,   678,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,  3413,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,  3414,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,  3743,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,   609,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,  1193,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  1517,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  1517,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,  2129,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  2323,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,  3422,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  3770,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,  3778,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,  3803,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,   158,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,  4793,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   575,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,     0,   202,   203,   204,   205,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,   222,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,   235,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,   244,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,   249,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,  2040,   272,     0,     0,   273,   274,   275,
       0,     0,     0,   276,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,   285,   286,     0,   287,     0,
       0,     0,     0,   288,   289,   290,     0,   291,     0,     0,
       0,   292,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,   305,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,   313,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
    2041,   376,   377,     0,     0,     0,   378,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   387,     0,   388,   389,     0,     0,     0,     0,
       0,   390,     0,     0,     0,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,   405,     0,   406,   407,     0,
     408,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,   432,     0,   433,
     434,   435,     0,     0,   436,     0,   437,     0,   438,   439,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
     445,   446,   447,   448,     0,   449,   450,     0,   451,   452,
     453,   454,     0,   455,   456,     0,     0,     0,   457,   458,
     459,   460,     0,     0,     0,   461,     0,     0,     0,   462,
       0,   463,   464,   465,   466,   467,   468,     0,   469,   470,
     471,   472,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,   480,   481,     0,     0,     0,   482,     0,     0,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,   504,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,   512,   513,   514,   515,     0,
     516,   517,   518,     0,   519,   520,     0,   521,   522,     0,
       0,   523,     0,     0,   524,     0,   525,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,   538,     0,
     539,   540,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,  -343,  -343,
     248,     0,  -343,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,  -363,     0,
     248,     0,  -363,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
    -363,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,  -360,     0,
     248,     0,  -360,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
    -360,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,  1464,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,  -365,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,  3229,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,  3418,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,  -347,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,     0,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   953,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,     0,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
     954,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,   955,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
     956,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,   957,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,  1483,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   952,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,     0,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,     0,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,    26,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,    32,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,    41,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,   958,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,    59,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,   161,   542,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     0,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,     0,
     200,   201,     0,   202,   203,     0,     0,     0,     0,     0,
       0,   209,     0,   211,     0,   213,   214,   215,   216,     0,
     217,   218,     0,   219,   220,   221,     0,   223,     0,   224,
       0,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,   229,     0,     0,     0,   230,   231,   232,
       0,     0,   233,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,   236,     0,   237,     0,     0,     0,     0,
     238,     0,   239,   240,   241,   242,   243,     0,     0,     0,
       0,     0,     0,     0,   245,   246,   247,     0,     0,     0,
     248,     0,     0,   250,     0,   251,   252,   253,     0,   254,
     255,     0,   256,   257,   258,   259,   260,     0,     0,     0,
       0,     0,   264,   265,   266,   267,     0,     0,   268,   269,
       0,   270,     0,   271,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,     0,   278,     0,   279,     0,
     280,   281,   282,   283,   284,     0,   286,     0,   287,     0,
       0,     0,     0,     0,   289,   290,     0,     0,     0,     0,
       0,     0,   293,     0,     0,     0,   294,   295,   296,   297,
     298,     0,     0,     0,   299,   300,   301,   302,     0,     0,
     303,     0,     0,     0,     0,   304,     0,     0,     0,     0,
     306,     0,   307,   308,     0,   309,   310,     0,     0,   311,
       0,   312,     0,     0,     0,   314,   315,     0,     0,   316,
       0,     0,   317,   318,     0,     0,     0,     0,     0,   319,
     320,     0,   321,     0,   322,     0,   323,   324,     0,     0,
       0,     0,     0,     0,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,     0,   346,   347,   348,
     349,     0,   350,   351,   352,     0,     0,     0,     0,   353,
     354,   355,   356,   357,   358,     0,     0,   359,   360,     0,
     361,     0,   362,     0,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,     0,     0,   373,     0,     0,   374,
     375,   376,   377,     0,     0,     0,     0,   379,     0,     0,
       0,     0,   380,     0,     0,   381,   382,   383,     0,   384,
     385,   386,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   392,   393,     0,
       0,     0,     0,   395,     0,   396,   397,   398,     0,   399,
     400,   401,   402,   403,   404,     0,     0,     0,     0,     0,
       0,   409,   410,     0,   411,     0,   412,   413,   414,   415,
     416,     0,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,   422,     0,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,     0,   431,     0,     0,   433,
       0,   435,     0,     0,   436,     0,     0,     0,   438,     0,
       0,   440,   441,     0,   442,     0,   443,     0,     0,   444,
       0,   446,   447,   448,     0,   449,   450,     0,   451,     0,
     453,   454,     0,   455,     0,     0,     0,     0,   457,   458,
     459,     0,     0,     0,     0,   461,     0,     0,     0,     0,
       0,     0,   464,     0,     0,   467,   468,     0,   469,     0,
     471,     0,   473,   474,     0,     0,     0,     0,     0,     0,
     475,   476,     0,   477,     0,     0,   478,     0,     0,     0,
     479,     0,   481,     0,     0,     0,   482,     0,     0,     0,
     484,     0,     0,   486,   487,   488,   489,   490,   491,     0,
       0,   492,   493,   494,   495,     0,   496,   497,     0,     0,
     498,   499,   500,   501,     0,     0,   502,   503,     0,     0,
     505,   506,   507,   508,     0,     0,     0,     0,     0,   509,
     510,   511,     0,     0,     0,     0,   513,   514,   515,     0,
       0,   517,   518,     0,   519,   520,     0,     0,     0,     0,
       0,   523,     0,     0,   524,     0,     0,     0,   526,   527,
       0,     0,     0,     0,     0,     0,   528,     0,     0,   529,
       0,     0,     0,   530,   531,   532,   533,   534,   535,   536,
       0,     0,     0,     0,     0,     0,     0,   537,     0,     0,
     539,     0,   541,     0,     0,   542
};

static const yytype_int16 yycheck[] =
{
       6,     3,   619,   145,  1123,   153,  1702,  1065,  1452,    21,
       6,  1122,   606,  1276,    20,  1307,  1404,  1226,    24,   618,
     619,    33,  1043,   596,  1249,   959,   618,  1772,    40,   673,
      36,  1021,  1022,   606,  1236,   673,  1307,  1743,    44,  1197,
    1545,    47,  1032,  1679,  1065,    51,  1568,  1701,     0,  1319,
     560,  1568,    58,  2784,   785,  2310,  2258,   991,  2757,  1679,
    2310,    45,   732,  2860,   580,  1741,  3069,  2412,   650,  1041,
    3209,   653,  1684,   141,   955,   956,  1339,  1340,   890,  2424,
    1343,  1344,  1345,  1346,  1404,  1348,  1349,  1350,  1351,  1352,
    1353,  1354,  1355,  1431,  1066,  2043,  3343,  2223,   614,  1677,
    2560,   107,  1680,   561,   562,   563,  1131,  1131,   566,   567,
     568,  2944,  3389,   571,   572,   573,  1330,  1673,     4,  1085,
    2989,  1455,  3386,   622,  1338,  3610,   625,  3270,  2011,   135,
     988,   137,  2308,   580,   140,   141,   142,  2106,  2805,  2887,
    2425,   137,  2988,  2308,   140,  1374,  2388,  3559,  2388,   153,
    2817,  2818,  2826,  1578,   714,  2071,  1714,   717,  2310,    13,
    1704,  3646,    24,  2094,  2826,  2794,  2723,   614,   153,   148,
    3739,   153,   153,  1598,  3467,  2732,   846,   847,   848,  3071,
    3071,  1606,  1607,    13,  3221,    18,  2720,  3344,   858,  2828,
      27,    20,    27,  2832,    63,    20,    17,    18,  1164,    75,
      39,  3493,  3878,  2378,  2843,    54,    17,    18,    50,    31,
    1768,  3696,  2388,    83,  2817,  2818,  2855,    39,    83,  2300,
      21,    20,   119,  2388,    13,  1067,  1112,  1113,  2985,  2986,
     137,   133,    18,   154,  2991,   117,  2993,   203,  1203,  1204,
    1205,    84,  3811,  3258,   203,   107,    13,    17,    18,    17,
      18,  4096,    20,    17,    18,  1220,  2290,   153,   188,    17,
      18,    54,  3791,   165,    70,    49,  3318,    33,    22,  3656,
     286,    17,    18,    46,   393,   336,  1162,    73,    39,    73,
      20,    17,    18,  4573,  2951,  2952,  3807,    17,    18,  2241,
     389,   391,   387,  1258,   286,  3923,  1261,    17,    18,    61,
     490,    17,    18,   304,  1642,    37,   416,   389,    62,    63,
      17,    18,  4389,    91,    17,    18,    59,   251,   287,  4516,
     244,   269,  1287,  1288,   378,    27,  1291,    22,   133,   382,
     152,   266,   165,  4332,    11,   135,   165,   200,   139,    17,
      18,    89,    37,  1308,  1309,    17,    18,   200,  2951,  2952,
     476,   506,   249,    17,    18,   720,    51,   133,  3089,  4428,
     165,  2958,   253,   418,   522,    17,    18,    62,    63,   485,
     872,   262,  4727,    13,   239,   134,   241,    34,   206,   173,
      46,   133,   955,   956,   225,   165,   959,    17,    18,   165,
     229,   230,    17,    18,  4024,   293,   557,   377,  4069,  3764,
      17,    18,    17,    18,   586,   586,   450,   272,    17,    18,
      17,    18,   130,  2821,   251,   465,   251,    67,   991,  3063,
      17,    18,   159,   185,  3563,    17,    18,   189,   472,  4142,
     399,  3151,   165,   632,    37,   226,   894,  2906,   642,   550,
     165,   203,   226,   655,   378,    17,    18,    17,    18,   450,
     558,   381,    17,    18,    17,    18,    72,    90,  4331,   586,
      63,   569,   206,    17,    18,   509,   624,  4340,   229,   230,
     206,   683,   171,   203,   585,  4188,  4189,   681,   196,   640,
     113,   379,   273,   682,   683,  1714,   466,  3166,  3167,  3168,
     206,   157,    72,  4848,   331,   137,   331,   547,   688,   681,
     681,  1003,   261,  1234,   304,  3253,    17,    18,   148,   667,
    4079,   229,   580,  1157,   405,   450,   284,   585,  1629,  1377,
    4148,   886,  1253,  4151,  4152,   120,   681,  4012,   123,    21,
    1520,   586,   209,  1115,   482,  1117,  1118,  1119,  1120,  1768,
    4168,   378,    75,   371,  4741,   152,   614,  2729,  1538,   251,
     474,  4620,   558,  4630,   287,   201,   304,   683,  1370,  4187,
     660,  1060,   287,   569,   304,  1423,   429,    69,  3401,   688,
     586,   681,   688,  3321,   580,   581,   429,   398,   340,   585,
     401,  1175,   588,   301,   683,    17,    18,   398,   683,  3732,
     401,   323,   365,   647,  4115,  4885,   602,    66,   244,  2104,
    1572,   683,  1175,  1575,   400,  4134,   400,  1579,   614,  1581,
      17,    18,   618,   255,  4026,    87,  2252,   267,   514,   603,
     681,   674,   628,  1183,  1682,   693,   201,   561,   398,   331,
     398,   401,   481,   401,   377,  3383,   652,  1609,  1610,  1611,
     398,   647,    66,   401,   450,  2821,   303,   139,  2268,  4036,
    3687,   620,   398,  1511,  3691,   401,  2821,  2269,  2610,   660,
     652,  1682,   398,   549,   382,   401,   444,   673,   398,   244,
     676,   401,  1342,  1404,  1532,   605,  4347,  4307,   398,  1704,
    1704,   401,   398,   445,  4253,   401,   487,   693,   481,  1359,
     531,   398,   622,  1956,   401,   398,   655,   703,   401,   705,
    1210,  1211,  1560,   589,  1967,   689,  2094,  1970,   714,  3761,
     450,   717,  3727,   647,   720,   499,  2958,   683,  2958,   626,
     398,   727,  3389,   401,   561,  4570,   398,  2879,   185,   401,
    1240,   553,  2290,   202,   398,   524,   622,   401,  2819,   625,
    1250,  4106,  1252,   629,  4109,  4110,   398,   586,  1950,   401,
    2308,   621,   574,  1982,  1264,  1265,  1266,   524,  4051,   436,
     681,  2186,  1604,   645,   685,  1275,   663,  2715,   398,   612,
     639,   401,  2806,   398,  2094,   597,   401,  1663,  2953,   785,
    4349,   398,  2958,   398,   401,   687,   401,  1431,  1754,   398,
     655,   398,   401,  2958,   401,  3462,  4365,    17,    18,   598,
    3943,   398,   644,  4288,   401,   681,   398,   632,   630,   401,
     647,   600,   598,   655,  1748,  2085,   473,  1782,  1378,   589,
    2378,   889,   655,    17,    18,   586,   398,   681,   398,   401,
    2388,   401,   598,   398,   683,   398,   401,  3980,   401,  2395,
     669,   703,  4841,   664,   398,   851,   852,   401,   683,    17,
      18,   681,   632,   664,   687,   857,    17,    18,   687,  3462,
    3657,    17,    18,  4539,   618,   686,  3463,  4159,  1512,   546,
     669,   682,   683,   674,  1512,   881,   882,   883,  4017,   885,
     886,   887,   687,   889,   636,   891,   882,   398,    17,    18,
     401,   887,   610,   899,   664,   891,   664,  1396,  2518,  3307,
     664,  3632,  1714,  4315,   888,   438,   664,   687,   892,  1874,
    1470,   687,   632,  1878,   651,   683,  3560,   567,   664,   652,
     660,   683,  1482,   618,   682,  1372,   603,   652,   664,   669,
     936,  3651,  1576,  2609,   664,  3404,   682,   683,  1576,   683,
    2518,   557,  1907,  4086,   664,   951,   682,   953,   664,   648,
     952,   957,   682,  1021,   687,  1023,  1768,   664,  1026,  1027,
    4117,   664,   687,   683,   682,   434,   398,   683,   645,   401,
    1112,  1113,  1554,  1121,  1042,   682,   683,   557,  4271,   682,
     683,  3660,   988,   989,   626,   631,   664,   389,   445,   995,
    2735,   398,   664,  1492,   401,   487,   591,   654,  1642,   594,
     664,   391,   185,   149,   682,   683,  1522,  4044,  4045,  1015,
     682,   683,   664,   185,  4379,  1021,   233,  1023,   682,   683,
    1026,  1027,   524,  2971,  4128,  2973,    17,    18,  3776,   501,
     682,   683,    17,    18,   664,   459,  1042,  3219,  3220,   664,
     131,  3789,    17,    18,   577,  3793,  3794,   664,   399,   664,
      12,   209,   682,   683,   389,   664,   631,   664,   683,  3807,
     249,  2290,  1644,  1645,    17,    18,   683,   664,   683,   602,
     655,   203,   664,   682,  1656,  1522,   898,  3923,    83,  1085,
    4751,   209,  4753,  4754,   506,   682,  1092,   165,   109,   951,
    4842,   683,   664,   244,   664,   130,    17,    18,   683,   664,
    3729,   664,  1108,   289,  4673,  1107,   155,    17,    18,  1708,
     664,   683,   253,   683,    17,    18,  1122,  1121,   683,    35,
     683,   262,  2112,  2181,  3379,  1109,  1110,   989,   682,  3379,
    3687,  3307,   112,   995,  3691,  1114,  1121,  2843,   259,  1121,
    1121,  1872,  3307,  3677,   450,  1151,  4038,  4038,  1730,  2378,
    2269,  1157,   621,   664,   133,  1161,  4725,  3786,  1164,  2388,
    2181,    17,    18,   389,  3921,  1161,   244,  3841,   990,   260,
     456,     6,   683,  3930,  1060,  1748,  1062,  1183,   398,  3841,
     323,   401,  2704,   109,  2706,  2707,   130,  1193,    67,  2706,
    2707,   287,  2050,  2456,  1641,   199,  2221,  2221,   167,   217,
    2172,  2745,   992,  3842,   398,  4876,  4877,   401,   354,  4880,
    3179,  3496,  2790,  2185,   244,  4354,  2188,  2189,    55,  2077,
    2078,  3463,  3138,  3463,  3107,    60,   683,  3379,  1234,    66,
     398,  3162,   664,   401,   239,  4374,   241,   398,   388,  2397,
     401,   392,   398,  2581,     9,   401,   658,  1253,  2806,    17,
      18,   683,   196,   389,  1322,   297,   287,   664,  4670,   681,
     298,  4325,   445,  2821,   405,  3467,   301,   272,   418,   398,
     660,   130,   401,   445,   304,   293,   683,    54,   436,   206,
     515,   683,   251,  2617,   681,   229,  4390,  3463,   685,  1151,
    1358,  2716,   287,  3682,   220,  4141,  4142,  4968,  3463,  1969,
    1090,  1307,  4148,   399,  1372,  4151,  4152,  4571,   436,   495,
      17,    18,  2537,  2538,   342,   436,  1322,  2531,   153,   389,
     415,   359,  4168,  5075,  4193,  4073,    17,    18,  2530,   615,
    1332,  1193,   683,  2603,   296,    24,  4182,  1405,  2540,  4482,
     557,  4187,  4188,  4189,  4190,  4191,   262,   382,   683,   655,
      17,    18,  1358,  2319,  1360,   404,  2648,   301,  1364,   401,
     287,   452,   203,  2094,  2271,  2272,  1372,  4115,   399,   586,
     286,  1377,  1378,   468,  4122,   147,   506,   130,  2648,    17,
      18,  2288,    20,   515,    17,    18,  4143,   207,   267,  4146,
    2297,  2298,  2930,   130,   681,  2953,   474,   377,  1404,  1405,
    2958,   688,   381,   500,   399,    17,    18,   398,   553,   378,
     401,    17,    18,   398,  2970,   445,   401,  1423,  2627,  4176,
    4177,  4178,   580,   398,   428,  1431,   401,  4184,  2089,   194,
    1436,  4916,  1438,  1993,   669,  4192,   586,  1443,   382,    17,
      18,  2733,   301,   196,   664,   398,  3122,   630,   401,  3061,
     266,   377,   580,  1459,  1522,   296,   293,   683,   630,   196,
      17,    18,  2733,   683,  1470,  2135,  2373,  2374,  2375,  2376,
     664,   220,   399,   564,    17,    18,  1482,   398,  2290,  1485,
     401,  3607,  3608,  3609,    17,    18,   383,   176,   398,   683,
    3068,   401,   229,   511,   373,   398,   664,   137,   401,  4776,
     683,   423,  2001,   664,  1646,  1511,  1512,   105,   664,  1515,
    1396,    17,    18,    17,    18,   683,  1522,  1523,  3466,   557,
     269,  2081,   683,   382,   620,   655,  1532,   683,   674,   675,
     676,   677,   678,   679,  2126,   664,   578,   669,  1544,  1545,
     375,   682,   398,  2601,   460,   401,   526,   683,   301,  1555,
    1556,  1557,  1558,  1559,  1560,  1561,   584,   301,  1444,  1555,
    1556,  1557,  1568,  1559,   301,   580,  2378,  1573,  1574,   341,
    1576,    13,   162,  1641,  1580,   610,  2388,  2806,  1574,  2095,
    2601,  1443,   172,  4860,  1580,   613,   135,  3976,   683,   620,
    3210,    21,   561,    12,   414,  1601,  1664,   455,  4329,   496,
     377,   130,   323,   608,   133,   262,  1492,    17,    18,   687,
     532,  3317,  3318,   683,   449,   255,   451,    17,    18,  2213,
     130,  4888,    61,  1485,   287,   620,   283,   632,  4376,   382,
     398,  4362,  3210,   401,   450,  1641,  1642,  4701,   382,  4703,
    2213,   446,  2224,  1711,    13,   382,  2228,  2229,  2095,  4542,
     399,  4928,  4929,  4546,   252,    17,    18,   506,  1664,  1665,
    1666,  1667,  1668,   420,   590,  4125,   610,   196,   506,  2313,
     549,   269,     0,   664,  3196,    17,    18,   134,   647,   664,
      17,    18,   231,  4382,   282,  4384,   196,  5172,   567,   664,
     495,   398,   683,  1579,   401,   586,  1558,   682,  2556,  1561,
     229,  2691,   145,   523,   481,  1711,   148,   398,   683,   139,
     401,   664,   753,   754,   683,   134,  4119,    13,   161,   229,
    2745,  2745,  2780,   444,  2953,   165,   515,    17,    18,  2958,
     683,   398,  1738,  1739,   401,   188,   399,   514,   682,  1601,
     203,  2950,   365,   664,    17,    18,   185,  3695,  1754,  3307,
     189,   610,  4585,  4586,   664,   304,   656,   657,   608,  2780,
     398,   664,   683,   401,   203,   398,   389,   365,   401,  1775,
    5017,  1777,   301,   683,  3162,    13,  3114,  3115,  3116,   148,
     683,   194,   661,   683,  3228,  3323,   398,    17,    18,   401,
     681,   301,   398,    17,    18,   401,   837,  4594,    17,    18,
     431,   538,  2736,   524,   261,   562,  1668,   397,   664,  2667,
    3325,  4214,  3350,  3351,  2972,  5082,  5083,  2675,    17,    18,
     398,  3336,   206,   401,   287,  3340,  3341,   683,  4721,    17,
      18,  1717,   681,   296,   474,  4728,  1978,  3352,   688,   515,
     669,   398,  3162,   681,   401,    17,    18,    13,   655,  4051,
    4989,  2512,   148,   382,  3146,   398,   259,   610,   401,   423,
      17,    18,   903,   276,  2534,   398,  1872,  1873,   401,  3083,
     608,  3134,   382,   610,   681,  3146,   632,  1739,   262,  4578,
     669,  3151,   669,   681,   287,   577,    17,    18,   580,   646,
     688,   489,   398,  4238,   398,   401,   664,   401,   181,   688,
    3552,   340,  2892,   220,  3556,  3463,    17,    18,    17,    18,
     148,  2421,   629,    17,    18,   683,  2426,    17,    18,  1402,
    2827,   374,   375,  2830,  2831,  1931,  2833,   683,   381,  2836,
    2837,  2441,   688,  2840,    17,    18,   399,  2581,  2845,  3615,
      17,    18,   175,  2850,  2851,  2852,  2853,  2854,    17,    18,
     688,  2858,  2859,   645,  2861,    17,    18,   664,   134,   209,
    2867,  2868,  2869,  2870,   377,   563,  2873,  2874,   532,  2876,
      17,    18,  2482,   664,  1980,  1981,   683,    17,    18,   206,
     515,  2915,   148,  3253,    17,    18,   626,  1993,   398,    17,
      18,   401,   683,   669,  2806,   585,   399,   664,   398,   288,
    2006,   401,   291,    17,    18,  2011,   445,   669,  2602,   632,
    2016,   589,   688,  2019,  5002,   655,   683,  5005,   249,   515,
    2026,  2027,    81,  2029,  2668,  2619,   664,  2095,    13,  2602,
    2668,   664,   259,   436,    93,  3655,   398,  2553,  2548,   401,
     204,  2109,   273,  3655,  2050,  2618,  2619,  2053,  5051,  2956,
     683,  2057,   664,  3749,   259,  3761,   398,    25,   664,   401,
     287,   398,  3354,   226,   401,    17,    18,  1550,  1551,  4271,
     682,  2077,  2078,  2079,  2080,  2081,   620,   683,  4971,  4972,
    2741,   610,   287,  3354,  4815,   239,   664,   241,  2094,  2095,
      75,  4440,  1133,  4442,  2100,  2101,  2102,  2696,  2104,   655,
     610,   688,    83,  2109,  2696,  3683,  2553,   664,   398,  4776,
     273,   401,   651,    13,  5102,  2001,    17,    18,   620,  1981,
    2126,   664,    18,   163,   220,   398,   683,   683,   401,   293,
     675,   664,   577,  3191,   669,   580,  3842,   682,   682,   682,
    2146,  2953,  4969,   202,   474,    45,  2958,  4846,  4847,   682,
     242,  2812,   605,   688,    17,    18,   242,   446,   664,   608,
     664,    17,    18,  2736,  2026,  2027,  3671,  2029,   398,   622,
    3191,   401,   399,   669,   398,  2243,   682,   401,   682,   398,
     682,  2187,   401,   632,   220,  3119,   436,  2171,   143,  2075,
     249,  2053,   688,  4860,   399,  2057,   393,  2203,    98,   398,
     645,  5028,   401,   103,  5031,  2211,   374,   375,  2214,  2215,
     398,    83,    27,   401,   273,   379,   675,  2079,  2080,    83,
    2226,  2227,   577,   682,  2230,   580,   398,    17,    18,   401,
    3202,  2227,   259,    97,  3463,  3679,  3226,  2243,  2100,  2101,
    2102,   398,    50,  2249,   401,  3470,    17,    18,  3129,  3130,
    3131,  3132,    44,  5080,   664,  2141,  2262,  2143,   239,    51,
     241,  4928,  4929,   206,   664,  2926,  2927,   398,   514,     9,
     401,  2932,   682,   637,   629,  3790,  3501,  3502,   639,  2940,
    2941,   642,   682,  3141,   149,  2946,   525,   398,   525,   398,
     401,   272,   401,    33,   398,   304,   546,   401,   398,    17,
      18,   401,   664,  3528,    17,    18,   687,  2313,    17,    18,
    1077,  2317,   242,  2319,   512,   398,  1083,  1084,   401,   580,
     682,   398,   664,   249,   401,  2187,  2920,   664,   577,   398,
      18,   580,   401,   681,    17,    18,   398,  3546,   249,   401,
     682,   249,  2915,   688,  2412,   682,   627,  2920,   580,  2211,
     546,   398,   167,   603,   401,   175,  2424,   116,   398,   681,
    3652,   401,  4016,  3975,   264,   398,   632,   239,   401,   241,
     398,    17,    18,   401,   664,   434,    17,    18,  3648,   493,
     159,  3651,   598,  2389,   398,     6,  2392,   401,   681,  2275,
     681,   664,   682,    17,    18,   645,   682,   683,  2284,  2285,
    4020,   273,  3694,  4023,  1145,  1146,  2412,   149,  4020,   682,
     681,   275,   681,   577,    17,    18,   580,   683,  2424,   681,
     252,   681,   688,  3694,   681,  3332,    17,    18,    83,  3638,
     681,  3162,    62,    63,   664,   406,   251,   269,   681,  3346,
     664,   341,  5173,    73,   406,   664,   398,    34,   683,   401,
     282,  1192,   682,    17,    18,  2317,  2524,   181,   682,    17,
      18,   149,   586,   682,   578,   664,    17,    18,   681,   583,
    3114,  3115,  3116,   232,    17,    18,   664,    20,   682,   683,
    2622,    17,    18,   682,  4096,  2553,   681,  2555,   352,   354,
     682,   683,   664,  3427,   682,    17,    18,   398,    85,   798,
     401,   681,   374,   375,    17,    18,   681,   664,   681,   409,
     682,  1424,    18,   377,  1427,   629,   331,  1430,  2524,  2027,
     262,  2029,  3166,  3167,  3168,   682,   825,   688,  3166,  3167,
    3168,   645,   493,   664,   681,   398,  3655,  2543,   401,   838,
     839,   681,   398,  2549,   681,   401,  3119,  2553,   681,  2555,
    2556,   682,   681,   664,   681,   664,  3129,  3130,  3131,  3132,
     664,   681,   434,   378,   664,   681,    17,    18,  3078,    20,
     561,   682,   396,   682,  3783,  2581,   163,   632,   682,   682,
     683,   664,   682,   681,   448,   638,   639,   664,   641,   435,
     643,  3235,  2100,  2101,  2102,   664,   251,  3235,   389,   682,
      22,   681,   664,  4858,   577,   682,   681,  4857,   398,   682,
     683,   401,   354,   682,   681,    37,  3674,   664,   682,   683,
     682,   681,  4158,  4159,   664,   681,  4162,   398,   598,    51,
     401,   664,   328,   329,   534,   682,   664,   333,   334,   335,
      62,    63,  2648,   149,   681,  4181,   681,  2653,   407,   682,
     664,  3463,   681,  3674,   682,  3645,   681,   489,   681,   418,
    3259,  2667,  2668,  3324,   681,  3326,   354,   426,   682,  2675,
     206,    13,  3333,   681,   574,   682,   683,   636,   637,  4375,
     398,   681,   546,   401,   206,   398,   681,  3348,   401,   398,
    2696,   681,   401,   206,  3355,  3356,   655,  2765,  2704,  4353,
    2706,  2707,  3376,   682,   683,  4227,   681,  3368,  3369,  3370,
    4227,  4247,   664,  3374,  3375,   398,   681,   372,   401,  4011,
    4374,  2673,   681,   378,    27,  2793,  2794,  2733,   681,  3311,
     682,   563,  3331,   681,  3316,  4371,   681,  3398,  3399,  3400,
    4011,   682,   683,  2749,    17,    18,   561,  3421,  2754,   621,
    3908,  4371,   398,  2759,  2760,   401,   681,   398,  2754,  2765,
     401,   682,   683,   664,   682,   683,   682,   683,  3429,  3430,
    3431,   530,   682,   683,   398,   517,   518,   401,   681,    13,
      83,   682,   389,   682,   683,   682,   683,  2793,  2794,   682,
     683,   681,  4370,   681,  4372,   398,    12,   307,   401,   309,
     310,   664,   457,   130,   681,   130,   148,   398,   664,   683,
     401,   676,   677,   678,   679,   325,   682,   683,   163,   682,
     681,  4527,  4528,   681,    66,   244,   682,   681,  2896,   517,
     518,   681,   647,  3944,   398,    62,    63,   401,  4130,    81,
     398,   682,   683,   401,   431,   159,   160,   398,   354,    52,
     401,    93,   681,  4055,  3427,   398,   194,   137,   401,  4130,
     514,    27,   398,   681,   167,   401,  2872,   454,   683,   196,
     629,   196,   210,   532,   664,   681,   398,   682,   683,   401,
    3338,  2887,   681,   186,  4420,   398,   681,    20,   401,   231,
    2896,  4279,   682,   664,  4430,   681,  3557,  2759,  2760,   681,
     116,  4020,   229,  4439,   491,  4441,   561,   681,  2914,   682,
     683,   682,  2918,   681,   148,   681,    83,    83,   134,   682,
     683,   681,  2808,  2809,  2810,  2811,   681,  2813,  2814,  4565,
     672,   673,   674,   675,   676,   677,   678,   679,   276,   687,
     278,   682,   683,   682,   683,  4690,   664,   398,   251,  3091,
     401,   664,   681,   463,   464,   664,   682,   683,  4570,   175,
     202,   616,   682,   683,   682,   552,   208,   105,   690,   682,
     682,   683,   105,   682,   301,   255,   301,  4096,  4203,   682,
     683,   664,   636,   637,   672,   673,   674,   675,   676,   677,
     678,   679,   647,   209,   298,   682,   683,   231,    52,   682,
     167,   655,   682,   683,  3514,   682,   683,   249,   682,   683,
     681,   517,   518,   682,   683,   137,  3660,   681,   664,   681,
     186,   681,  3660,   664,   682,   683,   242,   681,   331,   682,
     683,   273,   165,   371,   682,   683,   682,   681,   589,   681,
     664,   682,  2928,  2929,   681,  2931,   681,  2933,  2934,  2935,
    2936,  2937,  2938,  2939,   681,   382,  2942,   382,   682,  2945,
     683,   664,   681,  2949,   309,   310,  3576,   681,   201,   372,
     203,  3670,   681,   664,  4518,   378,   105,   681,  3670,   682,
     325,   297,   682,   683,   251,   251,  4698,   220,  4358,   681,
    4786,   682,   682,   683,   227,   433,   682,   683,  4676,  3773,
     664,  3107,   681,  3109,  4492,   681,   664,  3113,  3114,  3115,
    3116,   244,   681,   664,   252,  3121,   682,   683,   682,   252,
      63,   664,  3128,   389,   682,   681,   259,  3133,   664,   682,
     683,   269,   681,   255,  3808,  3141,   269,   682,   683,    86,
    3146,    88,   664,   681,   282,  3819,  1295,  1296,  3822,   282,
     681,   664,   682,   683,   287,   681,  3162,   682,   683,   396,
    3166,  3167,  3168,   296,  4742,   331,   672,   673,   674,   675,
     676,   677,   678,   679,   682,   683,   206,   120,   389,  4449,
     123,  3763,    37,   500,  3766,  3767,   133,    35,   131,   688,
    3196,   514,   434,  3261,   474,   525,   618,   174,   540,   541,
     542,   543,   544,   545,   116,   372,   372,   150,    63,   681,
     157,   378,   378,   664,    20,   287,   638,   639,   463,   464,
     436,   563,    28,   252,   203,  3231,   506,   365,   557,  3235,
     577,   116,   365,  4769,   532,  3241,   682,   683,   682,   683,
     269,  4777,   557,  3249,   166,  3241,  3252,  3253,   195,   149,
     682,   683,   298,   282,   197,  3261,   389,   218,   561,  3121,
      92,   682,   683,   175,   203,   120,   399,    73,   123,  3275,
     683,  3277,   682,   683,   683,  3343,   131,    83,   682,   683,
    4900,   682,   683,   610,   390,   610,   682,   683,  4900,   573,
     457,   682,   683,   535,  4990,   150,   512,   209,   128,  3131,
    3132,   149,  4413,   436,  3310,   165,   540,   541,   682,   543,
    3322,   545,  3988,  3989,  3320,  3321,  3328,   260,  4429,   506,
     133,  3327,   119,   208,   105,   689,     6,   133,   395,   563,
     546,   669,   670,   671,    66,   118,   365,  3343,  3344,     4,
     505,  3353,   262,  3349,   647,   645,   626,  3359,  3354,    81,
     683,   489,   474,  3365,  3366,  4289,   489,   415,  3364,   163,
     389,    93,   578,  4572,   249,  4985,    59,   328,   329,   466,
    3376,   683,   333,   334,   335,   655,    13,  3383,  3384,   621,
     683,   514,   688,  3389,   506,    73,    83,  3249,   651,  3275,
    3252,   682,   682,   682,   561,   561,   682,  4689,  3992,   148,
      97,   681,    10,   688,  3406,   260,   212,   237,  4986,  4987,
     682,   130,   683,   629,   262,  3421,   655,  4805,  4689,  3992,
     682,   364,   682,   682,   367,   563,   682,   682,  4691,   645,
     563,  4489,   681,   239,  5054,   241,   149,   688,   286,   286,
     688,   389,  5054,  3329,  3330,   142,   167,   298,   298,   616,
      52,  4570,   298,   298,   354,  3461,   298,   298,   683,  3465,
     489,   683,   409,   669,   577,   242,   681,   273,  4489,  5047,
     202,   252,  3358,   238,  5094,   293,   208,   196,   130,   683,
     647,   647,   206,   303,   683,   687,   598,   620,   269,   683,
     598,   415,   690,   598,   683,   669,   203,   683,   631,   632,
     688,   282,  3364,  3389,   626,   683,   354,    73,   683,   452,
     229,   458,   367,   557,   344,  5093,   683,   249,   348,   652,
     653,  4103,   655,   262,   436,   355,   374,   375,   676,   169,
     263,   190,   575,   655,   563,  4469,   669,   203,   683,   174,
     557,   273,   529,   683,   196,   681,   421,   181,   686,   682,
     683,   209,   175,   686,   687,    50,   652,   206,  3700,   681,
     676,  4222,   682,  4224,  3570,  4226,   144,   681,   374,   375,
     210,   240,   240,   683,  3580,   381,   420,   229,   275,   682,
      56,   683,   301,   389,   365,   651,   627,   239,   683,   241,
    4414,  4415,   631,   206,   682,  3737,   682,   682,   682,   682,
     676,   682,    35,  4427,   682,   490,    39,  4816,   389,  4270,
     206,  4435,   460,   443,   682,   675,   681,   517,   518,  4443,
    4444,  4732,  4733,  4915,  4735,   265,  4220,   512,   434,   515,
     683,   683,   682,  3639,  4624,   682,   586,   682,   278,   598,
     682,   354,   682,   679,  4915,   683,  3652,  4220,  3654,   301,
     535,   594,  3658,   681,  3660,   352,   683,   682,   682,  4770,
     682,  3729,   681,   382,  3670,  3671,   681,   522,   580,   517,
     518,   149,   682,   586,   504,   683,   109,   374,   375,   683,
     377,   624,   586,   415,   259,   533,   250,   683,  3694,   416,
     123,   603,   681,    13,  3580,   580,  3702,   130,   583,   218,
     206,   683,   434,   203,   510,    58,   203,   681,   489,   681,
    3716,  3717,   284,   683,   683,    68,  4289,   629,  3786,   206,
    4654,  4930,   688,  3729,   688,   688,  4660,   682,   368,    82,
     382,   178,   495,   645,  4724,  3741,   621,  3743,    81,   594,
     444,    94,    95,    96,   629,  3757,   683,   625,   514,   149,
      93,   448,  3754,   683,   683,   188,   389,  4868,  3764,  4870,
    4871,   114,   203,   196,   389,   586,  3768,  3773,   626,   624,
    3776,   262,  4981,   673,   674,   675,   676,   677,   678,   679,
    3786,  4900,   563,  3789,   262,  3791,   220,  3793,  3794,   399,
    3676,   683,   363,   546,    20,   546,   229,   230,   546,   546,
    5063,  3807,  3808,   535,   517,   518,   546,   505,   389,   203,
     132,  4718,   655,  3819,   681,   621,  3822,   589,   683,   649,
     669,   682,   627,  4813,   672,   673,   674,   675,   676,   677,
     678,   679,   669,   669,   669,   669,   666,   297,   669,   632,
    3846,   669,   669,  3849,   669,   669,   669,   130,  3854,   546,
     133,  5143,   669,   669,   669,  3717,   163,  3743,   669,   202,
     669,   669,   669,   682,  5127,  5157,  3872,   669,   301,   669,
     669,  5163,  5143,  3879,   669,   669,   354,  5169,   669,   105,
     258,  3887,   258,  3879,   406,   688,  5157,   688,  3894,   621,
     682,   610,  5163,   682,   682,    28,  4469,   682,  5169,   681,
     620,  3787,   682,   682,     7,   683,   249,   683,   669,   683,
     660,  3797,   598,   196,   598,   688,  4823,  4824,   688,     6,
    4827,  4828,  4829,  4830,   598,    12,   683,    14,   293,    16,
     273,    89,    12,   366,   598,  5054,   681,   569,   681,   165,
      73,    28,   396,    30,   506,   206,   229,   669,   381,   382,
      83,   206,   206,   266,   354,   586,   586,   450,   610,   672,
     673,   674,   675,   676,   677,   678,   679,   683,   178,   382,
     681,   269,   269,    60,   403,    20,  3862,   203,    65,    66,
       7,    83,   345,   202,    71,   130,   681,  3849,   133,    91,
     343,   389,   683,   516,   220,  4001,    83,  4003,  4066,   620,
     133,   227,    50,   227,    91,  4011,   688,   119,   361,   119,
      81,   415,   415,  4947,   101,   598,   415,   119,   301,  4926,
    4927,   144,  5133,   271,   578,   271,   252,   415,  4935,   669,
     670,   671,   119,   259,   578,   130,   144,    50,   133,   517,
     518,   415,   415,   269,   415,   417,   133,   130,   415,   136,
     133,   196,   586,   415,   586,   586,   282,   469,   145,   146,
    4066,   287,  4068,  4069,   681,   167,   153,  4073,   687,   681,
     296,   220,   415,   688,   161,   681,   681,   676,   165,  4696,
     167,  4654,   260,   681,   229,   260,   681,  4660,   681,  4095,
     177,   434,   682,   682,   682,   682,   681,   683,   682,   382,
    4106,   196,   682,  4109,  4110,   506,   239,   683,   241,  4115,
     415,  4117,   682,   196,   201,   688,  4122,   517,   518,   682,
     450,   396,   681,   676,  4130,   389,   244,    50,  4134,   681,
    4136,   681,   669,   681,   229,   360,   473,   683,   506,   365,
     273,   682,   206,   688,   682,   669,   229,   249,   450,   502,
     683,   654,   239,   586,   241,   682,   301,   682,   591,   485,
     247,   594,   249,   389,   269,   269,   683,   681,   681,   256,
    4238,   119,   605,   399,  4060,   415,  5166,   610,   611,   683,
     351,   614,   681,   653,   242,   272,   688,   273,   273,    39,
      28,   586,    30,  4854,   672,   673,   674,   675,   676,   677,
     678,   679,   681,   224,  4210,   598,   301,   687,   683,   296,
     436,   682,   565,   382,   683,  4832,   682,    50,   301,   508,
     682,  4227,  4364,   655,    62,    63,  5160,    65,   330,   582,
     682,   284,  4238,   682,   487,    73,   620,   382,    50,   399,
     184,   374,   375,   330,   296,    83,   218,   349,   381,   156,
     280,   288,   683,    91,   682,   269,   389,   683,   415,   109,
     683,   269,   349,   489,   532,   389,   353,   659,   682,   273,
     372,   681,   681,   123,   674,   675,   676,   677,   678,   679,
     130,   119,   273,    20,   432,   682,   682,   382,   514,   655,
     681,   389,  4298,   683,   681,   133,   681,   683,   136,   382,
     683,   434,   682,    83,   203,   389,   248,   394,   203,   203,
     589,   287,   399,   682,    63,   260,   351,   275,  4917,  4325,
    4468,   408,  4208,   410,   682,  4331,   682,   610,   415,   167,
     682,   418,   682,   682,  4340,   683,   682,   563,   188,   683,
     682,  4347,   682,    14,   444,    50,   196,   682,    18,   396,
     259,   655,   683,   682,   682,   682,   688,   681,   632,   632,
     683,  4367,   501,   682,   681,    20,   453,  4509,   682,    75,
    4376,   682,    20,  4379,  4947,   683,   682,   510,   506,   229,
     230,   468,   469,   470,   471,   181,  4398,   683,   632,   181,
    4396,   133,   133,   116,   620,   580,  4538,   681,  4404,   430,
     681,   239,   688,   241,   681,    87,   632,   524,   152,   133,
     497,   249,    37,   382,   683,   351,   183,   682,   256,   145,
     683,   273,   682,   681,   580,   682,   652,   653,   632,   655,
     632,   682,   389,   104,   272,   395,   683,   682,   681,  4445,
     289,  4447,   681,   669,    28,   682,    30,   327,   642,   642,
     178,   301,   175,   495,  4460,   548,   682,   683,  4460,   561,
     686,   687,   484,   429,   682,   610,   137,   554,   555,   556,
     682,   494,   179,   429,   561,    64,   578,   396,    62,    63,
     626,    65,   153,   681,   681,   681,   209,   682,   621,    73,
    5107,   578,   330,   485,   581,   681,   382,    50,    50,    83,
     162,    50,  4508,   259,   175,   681,    66,    91,   681,   180,
     389,   349,   259,   681,   601,   610,   366,   681,   273,   606,
      58,   192,   273,   381,    15,   626,   249,   610,   133,   669,
      68,   381,   382,   620,  4396,   119,    20,  4543,   205,  5112,
     551,   178,    18,   568,    82,   203,   412,   218,   682,   133,
      50,    50,   136,    50,   681,   560,    94,    95,    96,   681,
     681,  4629,   682,   124,   125,   126,   127,   128,   681,   376,
     408,   637,   410,   382,   297,   681,   114,   655,   249,   164,
     418,   494,   681,   167,   255,   402,   683,  5160,   588,   144,
     144,   596,   681,   598,   167,   296,    12,    50,   506,   681,
     687,   606,   681,    50,   569,   682,   682,   681,   681,   681,
     142,   203,   152,     5,   619,   389,   389,   682,    66,   396,
      66,   681,   459,  4629,   626,   296,   137,   682,   633,   273,
     620,   396,   396,   495,   620,   158,   682,   240,    50,   683,
     494,   682,   244,   382,   514,   681,  4508,  2673,   964,   683,
    4656,  4657,  1380,  3101,  1062,   239,  4222,   241,  4226,   497,
    2947,   982,  4224,  4715,  3303,   249,  4345,  1113,  4713,    17,
      18,  4844,   256,   234,   235,   236,   237,    37,  5026,  1142,
    5022,  4536,  4797,  4689,  4216,    51,   620,  4693,   272,  3107,
    2093,  5112,  2016,  3993,  2339,  4701,  3129,  4703,  2618,   709,
    1720,  2620,   286,   708,  2619,  1191,  1982,  4731,   431,  4358,
    3817,  4549,  2886,   436,  2310,  3634,   554,   555,   556,  4297,
    4003,  3639,  2071,   561,  4921,  5000,  4691,   732,  5127,  4300,
    4616,  5071,   737,  5107,  4832,  3253,   586,  2221,  3653,  4020,
     578,   591,  4355,   581,   594,  4751,   330,  4753,  4754,  2879,
    4073,  3383,  2887,  5088,  4783,   605,  4762,  4630,  3493,  3853,
     610,   611,  4607,   601,   614,   349,   437,   490,  4587,  4629,
    4776,  4159,  4193,  4917,  4638,   780,   124,   125,   126,   127,
     128,   141,   620,   344,  4235,   346,   347,   348,   459,   512,
    2793,  4797,   797,  3052,   355,  4797,   467,  3556,  3553,  5027,
    3548,    83,    83,  4971,   475,   343,  4972,   167,  4849,  4728,
     170,  4380,  4721,  3379,  4543,  4429,  2886,  1089,  4402,  1155,
    1618,  2719,  2643,   361,   408,  2319,   410,  4910,  4116,  1765,
    1739,  4717,  2079,  3121,   418,   506,  3616,  4843,  1125,  2609,
    4842,   846,   847,   848,   849,   683,  4097,  3064,   519,   520,
    4901,   211,  2269,   858,  4860,   578,  3580,  1697,  2782,  2420,
     583,  2416,  3091,  4931,  1360,  2734,  3212,  4038,  2728,  3564,
    4876,  4877,  1253,   233,  4880,  2722,  4530,  5020,  3894,   239,
     603,   241,   443,  5025,  5021,  2541,   234,   235,   236,   237,
    4776,   896,  4706,   898,  3980,  1220,  4367,  4279,  4366,  4805,
    4130,   572,  4275,  4326,  4910,  3375,   629,  3261,  2252,  4915,
    4364,  3196,  2389,   497,    83,  4921,  1485,  1443,  2603,  2647,
    3647,  4011,   645,  3646,  3694,  4931,  4915,   631,   728,    37,
    2182,   619,   603,  2183,   939,  1564,  1775,  2713,   298,  1121,
     619,   107,   503,   504,  4136,   483,  1493,  2004,  3619,  5017,
     955,   956,  4739,  5100,   959,   626,  4555,   628,  5125,  5169,
    5163,   835,  4968,   323,   502,  3213,  3652,  2262,  2214,  2694,
     554,   555,   556,  3670,  4860,   618,  1932,   561,   618,  2129,
    2687,  4843,  2686,  2057,  1641,  1513,   991,   614,  1007,  1433,
    3397,  2667,  2313,   615,   578,  2748,   344,   581,   346,   347,
     348,  5069,  3109,  4504,  3406,  1014,  5091,   355,  3209,  4041,
    3685,  5017,  2722,   654,  5020,  5021,   654,   601,   151,   654,
    5121,  1113,  1113,  1643,    -1,  1113,    -1,   565,  5170,    -1,
      -1,    -1,    -1,   141,    -1,    -1,   620,    -1,  4924,  4925,
      -1,    -1,    -1,    -1,   582,    -1,    -1,    -1,    -1,    -1,
     398,    -1,    -1,   401,    -1,    -1,    -1,    -1,    -1,   167,
      -1,    -1,   170,  5069,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5075,    -1,   435,    -1,    -1,    -1,  5147,
      -1,    -1,    -1,    -1,   444,  5153,    -1,    -1,   649,    -1,
      -1,    -1,    -1,    -1,    -1,   443,    -1,   681,    -1,    -1,
      -1,   461,    -1,   211,   665,   666,    -1,    -1,    -1,    -1,
     243,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,   479,
      -1,    -1,  5008,  5009,    -1,   233,    -1,    -1,    -1,    -1,
      -1,   239,    -1,   241,    -1,    -1,    -1,  5143,    -1,    -1,
      -1,  5147,    -1,    -1,    -1,    -1,    -1,  5153,    -1,    -1,
      -1,  5157,    -1,    -1,    -1,   503,   504,  5163,    -1,    -1,
      -1,    -1,    -1,  5169,   524,    -1,  1171,   527,    -1,  1174,
    1175,    -1,   305,   306,    -1,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     298,   324,   325,   326,  1199,  1200,    -1,   557,    -1,  5085,
      -1,    -1,    -1,  1208,  1209,  1210,  1211,  1212,  1213,  1214,
    1215,  1216,  1217,  1218,  1219,   323,    -1,   577,    -1,    -1,
     580,    -1,    -1,    -1,  1229,  1230,    -1,  1232,  1233,    -1,
      -1,    -1,    -1,  1238,  1239,  1240,    -1,    -1,  1243,  1244,
    1245,  1246,  1247,  1248,    -1,  1250,  1251,  1252,    -1,    -1,
      -1,    -1,    -1,    -1,  1259,  1260,    -1,  1262,  1263,  1264,
    1265,  1266,    -1,    -1,  1269,  1270,  1271,  1272,    -1,  1274,
    1275,  1276,  1277,    -1,  1279,  1280,  1281,  1282,  1283,    -1,
      -1,  1286,    -1,    -1,  1289,  1290,    -1,    -1,    -1,  1294,
      -1,    -1,    -1,  1298,  1299,  1300,    -1,    -1,    -1,    -1,
      -1,   649,    -1,    -1,    -1,  1310,  1311,  1312,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1320,   664,   665,   666,    -1,
      -1,    -1,  1327,  1328,  1329,  1330,    -1,   435,    -1,    -1,
     463,   464,    -1,  1338,  1339,  1340,   444,  1342,  1343,  1344,
    1345,  1346,    -1,  1348,  1349,  1350,  1351,  1352,  1353,  1354,
    1355,    -1,    -1,   461,  1359,    -1,  1361,    -1,    -1,    -1,
      -1,    14,    -1,    16,    -1,    28,    -1,    30,    -1,    -1,
      -1,   479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      53,    -1,    65,    56,    -1,    -1,    -1,    60,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,   524,    -1,    -1,   527,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1447,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,   104,    -1,    -1,    -1,    -1,   119,    -1,  1463,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     133,    -1,    -1,   136,    -1,    -1,   129,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   137,     6,   139,   140,    -1,    -1,
      -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,   152,
     153,    -1,    -1,    -1,   167,    -1,    -1,    28,    -1,    30,
      -1,    -1,   165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1530,    -1,   180,    -1,    -1,
      -1,   598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      -1,    -1,  1547,    -1,    65,   198,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    83,   216,    -1,   218,   633,    -1,    -1,    -1,
      91,   224,    -1,    -1,    -1,   228,   239,    -1,   241,    -1,
     101,    -1,    -1,    -1,    -1,    -1,   249,    -1,    -1,   242,
      -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,   119,    -1,
      -1,    -1,   255,  1608,   257,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   133,    -1,    -1,   136,    -1,    -1,    -1,    -1,
      -1,   274,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,   292,
     161,   708,    -1,   296,    -1,    -1,   167,    -1,    -1,    -1,
     303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   330,    -1,    -1,
     737,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,   349,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   780,    -1,    -1,    -1,    -1,   239,    -1,
     241,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,    -1,
     797,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
      -1,   394,    -1,  1748,    -1,   408,    -1,   410,    -1,    -1,
      -1,   272,    -1,    -1,    -1,   418,    -1,    -1,    -1,    -1,
     413,    -1,   415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,    -1,    -1,   431,    -1,
      -1,    -1,   849,  1788,    -1,    -1,    -1,    -1,    -1,   442,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   330,
      -1,    -1,    -1,   466,    -1,    -1,   469,    -1,   471,    -1,
     473,   474,    -1,    -1,   477,   478,    -1,    -1,   349,   896,
      -1,    -1,   353,    -1,   497,   488,    -1,    -1,   491,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,    -1,    -1,   519,   520,   521,    -1,
      -1,    -1,   939,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,    -1,   410,
      -1,   554,   555,   556,    -1,    -1,    -1,   418,   561,   552,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   560,  1913,  1914,
    1915,    -1,    -1,    -1,    -1,   578,    -1,    -1,   581,    -1,
      -1,    -1,    -1,  1928,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   601,    -1,
      -1,    -1,    -1,    -1,    -1,  1950,    -1,    -1,   469,    -1,
      -1,  1956,    -1,   606,  1959,    -1,  1961,   620,    -1,    -1,
      -1,    -1,  1967,    -1,  1969,  1970,   619,    -1,    -1,    -1,
     623,    -1,    -1,   626,    -1,    -1,   497,    -1,   631,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1995,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2004,
      -1,   654,   655,    -1,    -1,    -1,    -1,    -1,    -1,   662,
      -1,    -1,    -1,    -1,    -1,   668,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   578,    -1,    -1,
     581,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2074,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2083,    -1,
     601,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   620,
      -1,  2106,    -1,    -1,  1171,    -1,    -1,  1174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2135,    -1,  1199,  1200,    -1,    -1,    -1,    -1,    -1,  2144,
      -1,  1208,  1209,    -1,    -1,  1212,  1213,  1214,  1215,  1216,
    1217,  1218,  1219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1229,  1230,    -1,  1232,  1233,    -1,    -1,    -1,
      -1,  1238,  1239,    -1,    -1,    -1,  1243,  1244,  1245,  1246,
    1247,  1248,    -1,  1250,  1251,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1259,  1260,    -1,  1262,  1263,    -1,    -1,    -1,
      -1,    -1,  1269,  1270,  1271,  1272,    -1,  1274,  2213,    -1,
    1277,    -1,  1279,  1280,  1281,  1282,  1283,    -1,    -1,  1286,
      -1,    -1,  1289,  1290,    -1,    -1,    -1,  1294,    -1,    -1,
      -1,  1298,  1299,  1300,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1310,  1311,  1312,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1320,    -1,    -1,    -1,  2262,    -1,    -1,
    1327,  1328,  1329,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1361,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2310,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
    2335,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    63,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
    1447,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    91,  2398,    -1,    -1,  1463,  2402,    -1,    -1,
      -1,    -1,  2407,  2408,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2416,    -1,  2418,    -1,  2420,  2421,  2422,  2423,    -1,
     119,  2426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2436,    -1,  2438,   133,  2440,  2441,   136,  2443,    -1,
    2445,    -1,  2447,  2448,  2449,  2450,    -1,  2452,  2453,    -1,
      -1,  2456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2465,    -1,    -1,  1530,    -1,    -1,  2471,    -1,   167,  2474,
      -1,  2476,    -1,  2478,  2479,    -1,  2481,  2482,    -1,    -1,
    1547,  2486,  2487,  2488,    -1,    -1,    -1,  2492,  2493,  2494,
      -1,  2496,    -1,  2498,    -1,  2500,    -1,  2502,    -1,  2504,
      -1,    -1,    -1,    -1,  2509,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2525,    -1,    -1,    -1,    -1,    -1,  2531,    -1,    -1,  2534,
      -1,    -1,    -1,    -1,    -1,  2540,    -1,    -1,    -1,  2544,
     239,  1608,   241,  2548,    -1,    -1,    -1,    -1,    -1,    -1,
     249,    -1,    -1,    -1,    -1,    -1,    -1,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2618,  2619,  2620,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   330,    -1,    -1,    -1,    14,    -1,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     349,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    53,    -1,    -1,    56,    -1,    -1,
      -1,    60,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,   408,
      -1,   410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   418,
      -1,  1788,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,
      -1,  2736,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     129,    -1,    -1,    -1,    -1,    -1,  2761,    -1,   137,    -1,
     139,   140,    -1,    -1,    -1,  2770,    -1,    -1,    -1,    -1,
      -1,    -1,  2777,   152,   153,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,    -1,
    2805,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2817,  2818,    -1,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,   218,
      -1,    -1,    -1,    -1,    -1,   224,  1913,  1914,  1915,   228,
      -1,    -1,    -1,    -1,    -1,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   242,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2879,    -1,   255,    -1,   257,   578,
      -1,    -1,   581,  1950,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1959,    -1,  1961,   274,    -1,    -1,    -1,    -1,
      -1,    -1,   601,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2915,    -1,    -1,   292,    -1,  2920,  2921,   296,    -1,    -1,
      -1,   620,    -1,    -1,   303,    -1,    -1,    -1,  1995,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2951,  2952,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2976,    -1,    -1,    -1,  2980,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3009,  3010,    -1,  2074,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,  2083,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3034,
      -1,    -1,    -1,    -1,   413,    -1,   415,    -1,  3043,  2106,
    3045,    -1,  3047,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2127,    -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3078,    -1,    -1,    -1,  2144,  3083,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,    -1,    -1,
     469,    -1,   471,    -1,   473,   474,  3101,    -1,   477,   478,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,
      -1,    -1,   491,    -1,  3119,    -1,    -1,    -1,    -1,    -1,
      -1,   500,    -1,    -1,  3129,  3130,  3131,  3132,    -1,  3134,
      -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,    -1,    -1,
     519,   520,   521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   552,  3179,    -1,    -1,    -1,    -1,    -1,
      -1,   560,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2262,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     619,    -1,    -1,    -1,   623,    -1,    -1,   626,    -1,    -1,
      -1,    -1,   631,  3258,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3270,    -1,    -1,  2335,    -1,
      -1,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,    -1,
      -1,    -1,    -1,   662,    -1,    -1,    -1,    -1,    -1,   668,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2398,    -1,    -1,    -1,  2402,    -1,    -1,    -1,    -1,
    2407,  2408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2416,
      -1,  2418,    -1,  2420,    -1,  2422,  2423,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2436,
      -1,  2438,    -1,  2440,  3379,    -1,  2443,    -1,  2445,    -1,
    2447,  2448,  2449,  2450,    -1,  2452,  2453,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2465,    -1,
      -1,    -1,    -1,    -1,  2471,    -1,    -1,  2474,    -1,  2476,
      -1,  2478,  2479,    -1,  2481,    -1,    -1,    -1,    -1,  2486,
    2487,  2488,  3427,    -1,    -1,  2492,  2493,  2494,    -1,  2496,
      -1,  2498,    -1,  2500,    -1,  2502,    -1,  2504,    -1,    -1,
      -1,    -1,  2509,    -1,    -1,    -1,    -1,    14,    -1,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3462,  2525,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3473,    -1,
      -1,    38,    -1,  2540,    -1,    -1,    -1,  2544,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    65,    66,
    3505,    -1,    -1,    -1,    -1,    -1,  3511,  3512,    -1,  3514,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,
    3525,    -1,    -1,    -1,    -1,  3530,    -1,    -1,  3533,    -1,
    3535,  3536,    -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2620,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,  3576,   139,   140,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,   152,   153,    -1,    -1,    -1,
      -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,  3610,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
      -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,  3646,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,
      -1,   218,    -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,
      -1,   228,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,   255,    -1,
     257,  3696,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2770,    -1,   139,   140,   274,    -1,    -1,
    2777,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3727,    -1,    -1,   292,    -1,  3732,    -1,   296,
      -1,    -1,   166,   167,    -1,  3740,    -1,   171,    -1,    -1,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   207,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,    -1,   219,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   239,    -1,   241,    -1,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   413,    -1,   415,    -1,
      -1,    -1,    -1,    -1,  2921,    -1,    -1,    -1,    -1,   293,
      -1,    -1,    -1,    -1,   431,    -1,    -1,    -1,    -1,    -1,
      -1,  3876,  3877,    -1,    -1,   442,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   323,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,
      -1,    -1,   469,    -1,   471,    -1,    -1,   474,    -1,  2976,
     477,   478,    -1,  2980,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   488,    -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   500,    -1,    -1,    -1,    -1,  3943,    -1,
      -1,    -1,  3009,  3010,    -1,    -1,    -1,   514,    -1,    -1,
      -1,    -1,   519,   520,   521,    -1,    -1,    -1,    -1,   393,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3034,    -1,    -1,
      -1,    -1,    -1,    36,    37,  3980,  3043,    -1,  3045,    42,
    3047,    44,    -1,    46,    47,   552,    -1,  3992,   422,    -1,
      -1,    -1,    -1,   560,    -1,    -1,    -1,    -1,    -1,    -1,
      63,   435,   436,    -1,    -1,   439,   440,  4012,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,    -1,
      -1,    -1,    -1,    -1,  3101,    -1,    -1,    -1,    -1,   606,
      -1,    -1,    -1,  4048,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   619,    -1,    -1,    -1,   623,   120,    -1,   626,
     123,    -1,    -1,    -1,   631,    -1,    -1,    -1,   131,    -1,
      -1,    -1,    -1,    -1,    -1,  4080,    -1,   511,    -1,    -1,
      -1,  4086,    -1,    -1,    -1,    -1,    -1,   150,   655,    -1,
     524,    -1,    -1,    -1,    -1,   662,    -1,  4102,    -1,    -1,
      -1,   668,    -1,    -1,    -1,   168,    -1,    -1,    -1,    -1,
      -1,    -1,  3179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,    -1,   561,    -1,    -1,
      -1,    -1,   195,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,    -1,
     213,   214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,    -1,    -1,
      -1,    -1,    -1,  3270,    -1,    -1,   640,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   648,  4220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   299,   300,    -1,   302,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4275,    -1,    -1,    -1,   337,   338,   339,    -1,    -1,    -1,
      -1,    -1,    -1,  4288,  4289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   356,   357,   358,    -1,    -1,    -1,    -1,
      -1,   364,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   384,    -1,   386,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4355,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   424,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4389,    -1,    -1,    -1,    -1,   452,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3473,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4428,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4436,    -1,    -1,    -1,    -1,    -1,    -1,  3505,    -1,
      -1,    -1,    -1,    -1,  3511,  3512,    -1,   510,    -1,    -1,
      -1,   514,    -1,    -1,    -1,    -1,    -1,  4462,  3525,    -1,
      -1,    -1,    -1,  3530,  4469,   528,  3533,    -1,  3535,  3536,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4482,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    37,    -1,    -1,    -1,
      -1,    42,    -1,    44,    -1,    46,    47,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    -1,  4519,    -1,  4521,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   587,    -1,    -1,    -1,   591,    -1,
      -1,   594,   595,   596,   597,    -1,    -1,  4542,    -1,    -1,
      -1,  4546,    -1,  3610,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
      -1,    -1,   123,    -1,    -1,   638,   639,    -1,    -1,  3646,
     131,    -1,  4587,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   150,
      -1,    -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4620,    -1,   168,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4630,    -1,    -1,    -1,  3696,
      -1,    -1,    -1,  4638,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   195,    -1,   197,    -1,    -1,  4654,
      -1,    -1,    -1,    -1,    -1,  4660,    -1,    -1,    -1,    -1,
      -1,    -1,   213,   214,    -1,  3732,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3740,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4691,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,
      -1,  4716,    -1,    -1,    -1,    -1,  4721,    -1,    -1,    -1,
      -1,    -1,    -1,  4728,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   290,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,   300,
    4755,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4789,    -1,   337,   338,   339,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   356,   357,   358,    -1,  3876,
    3877,    -1,    -1,   364,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   384,    -1,   386,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4849,    -1,    -1,    -1,    -1,    -1,
    4855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   424,   425,    -1,  3943,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   452,  4907,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4916,    -1,  3980,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4947,    -1,    -1,  4012,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   514,  4969,    -1,  4971,  4972,  4973,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,
      -1,  4048,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4080,    -1,    -1,    -1,    -1,    -1,  4086,
      -1,    -1,    -1,  5028,    -1,    -1,  5031,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4102,   587,    -1,    -1,    -1,
     591,    -1,    -1,   594,   595,   596,   597,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5063,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5080,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   638,   639,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5112,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   666,    -1,    -1,    -1,    -1,
      -1,    -1,  5127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5160,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  5172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
    4257,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,  4275,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,  4288,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,   133,   134,    -1,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,    -1,   152,    -1,    -1,   155,   156,
     157,    -1,    -1,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,   184,   185,   186,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,   195,    -1,
      -1,   198,   199,   200,    -1,    -1,    -1,   204,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,    -1,  4462,    -1,   224,   225,   226,
      -1,   228,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,   238,   239,   240,   241,  4482,    -1,    -1,   245,   246,
     247,   248,    -1,    -1,   251,    -1,    -1,    -1,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,   263,   264,    -1,   266,
     267,    -1,    -1,   270,    -1,   272,    -1,    -1,   275,   276,
     277,    -1,  4519,   280,  4521,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,   290,   291,    -1,   293,    -1,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,    -1,   333,   334,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,   343,   344,   345,    -1,
    4587,   348,   349,    -1,   351,    -1,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,    -1,    -1,
     367,    -1,    -1,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,    -1,    -1,    -1,    -1,   383,    -1,    -1,   386,
     387,   388,    -1,   390,   391,   392,   393,    -1,   395,   396,
      -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,
     407,   408,   409,    -1,    -1,   412,    -1,   414,    -1,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,    -1,   431,   432,   433,    -1,   435,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,    -1,
      -1,    -1,   449,    -1,    -1,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,   470,   471,   472,    -1,    -1,   475,    -1,
     477,    -1,   479,   480,    -1,   482,   483,    -1,   485,    -1,
     487,    -1,    -1,   490,   491,   492,   493,   494,    -1,   496,
     497,    -1,   499,   500,   501,   502,    -1,   504,   505,    -1,
      -1,    -1,   509,   510,   511,   512,    -1,    -1,  4755,   516,
      -1,    -1,    -1,   520,    -1,   522,   523,   524,   525,   526,
     527,    -1,   529,   530,   531,   532,   533,   534,    -1,    -1,
      -1,    -1,    -1,    -1,   541,   542,    -1,   544,    -1,    -1,
     547,    -1,  4789,    -1,   551,   552,   553,    -1,    -1,    -1,
     557,    -1,    -1,   560,   561,   562,    -1,   564,   565,   566,
     567,   568,   569,    -1,    -1,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,   581,   582,   583,   584,    -1,    -1,
     587,   588,    -1,   590,   591,   592,   593,   594,    -1,    -1,
      -1,    -1,    -1,   600,   601,   602,    -1,    -1,    -1,   606,
     607,   608,   609,    -1,   611,   612,   613,    -1,   615,   616,
      -1,   618,   619,    -1,    -1,   622,    -1,    -1,   625,    -1,
     627,    -1,   629,   630,    -1,    -1,    -1,    -1,    -1,    -1,
     637,    -1,    -1,   640,    -1,    -1,    -1,   644,   645,   646,
     647,   648,   649,   650,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   658,   659,    -1,   661,   662,   663,    -1,    -1,   666,
    4907,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4916,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   689,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,  4973,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,  5172,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,   279,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,   599,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,   206,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,   244,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    13,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,   680,   681,    -1,    -1,
     684,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,   133,   134,    -1,   136,    -1,   138,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,   255,   256,   257,   258,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,   282,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
      -1,   380,   381,   382,   383,    -1,   385,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,   411,   412,    -1,   414,    -1,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,   447,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,   496,   497,   498,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,   558,
     559,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   575,   576,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,   633,   634,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   674,   675,    -1,    -1,    -1,
      -1,   680,   681,    -1,    -1,   684,   685,    -1,    -1,   688,
     689,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    -1,    -1,   133,
     134,    -1,   136,    -1,   138,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,   181,    -1,   183,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,   255,   256,   257,   258,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,   282,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,   301,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,   366,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,   376,   377,   378,    -1,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,   411,   412,    -1,
     414,    -1,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,   447,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,   496,   497,   498,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,   558,   559,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,   633,
     634,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     674,   675,    -1,    -1,    -1,    -1,    -1,   681,    -1,    -1,
      -1,   685,    -1,    -1,   688,   689,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      39,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,   130,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,   188,
     189,   190,    -1,   192,    -1,   194,   195,   196,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
     229,   230,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,   301,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,   366,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,   381,   382,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,   688,
     689,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,    -1,   666,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   689,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,    -1,
     155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,   164,
      -1,   166,   167,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,    -1,   183,   184,
     185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,   194,
     195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,   204,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,    -1,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,   264,
      -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,    -1,
     275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,   284,
     285,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,    -1,
     295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,    -1,   333,   334,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,   344,
     345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
      -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,    -1,
      -1,   386,   387,   388,    -1,   390,   391,   392,   393,    -1,
     395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,
      -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,   414,
      -1,   416,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,    -1,   431,   432,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,   454,
      -1,   456,   457,   458,    -1,    -1,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,   470,   471,   472,    -1,    -1,
     475,    -1,   477,    -1,   479,   480,    -1,   482,   483,    -1,
     485,    -1,   487,    -1,    -1,   490,   491,   492,   493,   494,
      -1,   496,   497,    -1,   499,   500,   501,   502,    -1,   504,
     505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,    -1,
      -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,   524,
     525,   526,   527,    -1,   529,   530,   531,   532,   533,   534,
      -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,   544,
      -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,   564,
     565,   566,   567,   568,   569,    -1,    -1,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,   581,   582,   583,   584,
      -1,   586,   587,   588,    -1,   590,   591,   592,   593,   594,
      -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,
      -1,   606,   607,   608,   609,    -1,   611,   612,   613,    -1,
     615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,    -1,
     625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,    -1,
      -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,   644,
     645,   646,   647,   648,   649,   650,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,    -1,
      -1,   666,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   689,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,   285,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,   586,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     689,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
     133,   134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,
      -1,    -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,    -1,
     183,   184,   185,   186,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,
      -1,   204,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,   224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
     263,   264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,
      -1,    -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,
     283,   284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,
     293,    -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,    -1,
     333,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,
     383,    -1,    -1,   386,   387,   388,    -1,   390,   391,   392,
     393,    -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,
      -1,    -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,
      -1,   414,    -1,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,    -1,   431,   432,
     433,    -1,   435,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,
     453,   454,    -1,   456,   457,   458,    -1,    -1,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,   470,   471,   472,
      -1,    -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,
     483,    -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,
     493,   494,    -1,   496,   497,    -1,   499,   500,   501,   502,
      -1,   504,   505,    -1,    -1,    -1,   509,   510,   511,   512,
      -1,    -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,
     523,   524,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,   534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,
      -1,   544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,
      -1,   564,   565,   566,   567,   568,   569,    -1,    -1,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,   581,   582,
     583,   584,    -1,    -1,   587,   588,    -1,   590,   591,   592,
     593,   594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,
      -1,    -1,    -1,   606,   607,   608,   609,    -1,   611,   612,
     613,    -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,
      -1,    -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,
      -1,    -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,
      -1,   644,   645,   646,   647,   648,   649,   650,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,
     663,    -1,    -1,   666,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   689,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,    -1,   109,    -1,    -1,   112,    -1,   114,    -1,    -1,
      -1,   118,   119,   120,    -1,    -1,   123,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,    -1,    -1,   134,    -1,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,   144,   145,   146,
     147,    -1,    -1,    -1,    -1,   152,    -1,    -1,   155,   156,
     157,    -1,    -1,    -1,   161,    -1,   163,   164,    -1,   166,
     167,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,    -1,   183,   184,   185,   186,
      -1,    -1,   189,   190,    -1,   192,    -1,   194,   195,    -1,
      -1,   198,   199,   200,    -1,    -1,    -1,   204,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,   226,
      -1,   228,    -1,    -1,    -1,   232,   233,    -1,    -1,    -1,
     237,   238,   239,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,    -1,    -1,   251,    -1,    -1,    -1,    -1,   256,
     257,    -1,    -1,    -1,   261,    -1,   263,   264,    -1,   266,
     267,    -1,    -1,   270,    -1,   272,    -1,    -1,   275,   276,
     277,    -1,    -1,   280,    -1,    -1,   283,   284,    -1,    -1,
      -1,    -1,    -1,   290,   291,    -1,   293,    -1,   295,    -1,
     297,   298,    -1,    -1,    -1,    -1,    -1,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,    -1,   333,   334,   335,    -1,
      -1,    -1,    -1,   340,   341,   342,   343,   344,   345,    -1,
      -1,   348,   349,    -1,   351,    -1,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,    -1,    -1,
     367,    -1,    -1,   370,   371,   372,   373,    -1,    -1,    -1,
     377,   378,    -1,    -1,    -1,    -1,   383,    -1,    -1,   386,
     387,   388,    -1,   390,   391,   392,   393,    -1,   395,   396,
      -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,
     407,   408,   409,    -1,    -1,   412,    -1,   414,    -1,   416,
     417,   418,    -1,   420,   421,   422,   423,   424,   425,   426,
      -1,   428,   429,    -1,   431,   432,   433,    -1,   435,    -1,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,    -1,
      -1,    -1,   449,    -1,    -1,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,   470,   471,   472,    -1,    -1,   475,    -1,
     477,    -1,   479,   480,    -1,   482,   483,    -1,   485,    -1,
     487,    -1,    -1,   490,   491,   492,   493,   494,    -1,   496,
     497,    -1,   499,   500,   501,   502,    -1,   504,   505,    -1,
      -1,    -1,   509,   510,   511,   512,    -1,    -1,    -1,   516,
      -1,    -1,    -1,   520,    -1,   522,   523,   524,   525,   526,
     527,    -1,   529,   530,   531,   532,   533,   534,    -1,    -1,
      -1,    -1,    -1,    -1,   541,   542,    -1,   544,    -1,    -1,
     547,    -1,    -1,    -1,   551,   552,   553,    -1,    -1,    -1,
     557,    -1,    -1,   560,   561,   562,    -1,   564,   565,   566,
     567,   568,   569,    -1,    -1,   572,   573,   574,   575,    -1,
     577,   578,    -1,    -1,   581,   582,   583,   584,    -1,    -1,
     587,   588,    -1,   590,   591,   592,   593,   594,    -1,    -1,
      -1,    -1,    -1,   600,   601,   602,    -1,    -1,    -1,   606,
     607,   608,   609,    -1,   611,   612,   613,    -1,   615,   616,
      -1,   618,   619,    -1,    -1,   622,    -1,    -1,   625,    -1,
     627,    -1,   629,   630,    -1,    -1,    -1,    -1,    -1,    -1,
     637,    -1,    -1,   640,    -1,    -1,    -1,   644,   645,   646,
     647,   648,   649,   650,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   658,   659,    -1,   661,   662,   663,    -1,    -1,   666,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,   682,    15,    -1,    -1,    -1,
      19,   688,   689,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,    -1,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     689,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,
      -1,   114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,
      -1,   134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,
     143,   144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,
      -1,    -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,
     163,   164,    -1,   166,   167,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,    -1,
     183,   184,   185,   186,    -1,    -1,   189,   190,    -1,   192,
      -1,   194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,
      -1,   204,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,
      -1,   224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,
     233,    -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,
      -1,    -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,
     263,   264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,
      -1,    -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,
     283,   284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,
     293,    -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,
      -1,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,    -1,
     333,   334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,
     343,   344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,
     373,    -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,
     383,    -1,    -1,   386,   387,   388,    -1,   390,   391,   392,
     393,    -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,
      -1,    -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,
      -1,   414,    -1,   416,   417,   418,    -1,   420,   421,   422,
     423,   424,   425,   426,    -1,   428,   429,    -1,   431,   432,
     433,    -1,   435,    -1,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,
     453,   454,    -1,   456,   457,   458,    -1,    -1,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,   470,   471,   472,
      -1,    -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,
     483,    -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,
     493,   494,    -1,   496,   497,    -1,   499,   500,   501,   502,
      -1,   504,   505,    -1,    -1,    -1,   509,   510,   511,   512,
      -1,    -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,
     523,   524,   525,   526,   527,    -1,   529,   530,   531,   532,
     533,   534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,
      -1,   544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,
     553,    -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,
      -1,   564,   565,   566,   567,   568,   569,    -1,    -1,   572,
     573,   574,   575,    -1,   577,   578,    -1,    -1,   581,   582,
     583,   584,    -1,    -1,   587,   588,    -1,   590,   591,   592,
     593,   594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,
      -1,    -1,    -1,   606,   607,   608,   609,    -1,   611,   612,
     613,    -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,
      -1,    -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,
      -1,    -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,
      -1,   644,   645,   646,   647,   648,   649,   650,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,
     663,    -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,   688,   689,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,   114,
      -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,   134,
      -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,   144,
     145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,    -1,
     155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,   164,
      -1,   166,   167,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,    -1,   183,   184,
     185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,   194,
     195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,   204,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,    -1,
      -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,    -1,
      -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,   264,
      -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,    -1,
     275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,   284,
      -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,    -1,
     295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,    -1,   333,   334,
     335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,   344,
     345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
      -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,    -1,
      -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,    -1,
      -1,   386,   387,   388,    -1,   390,   391,   392,   393,    -1,
     395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,    -1,
      -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,   414,
      -1,   416,   417,   418,    -1,   420,   421,   422,   423,   424,
     425,   426,    -1,   428,   429,    -1,   431,   432,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,   454,
      -1,   456,   457,   458,    -1,    -1,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,   470,   471,   472,    -1,    -1,
     475,    -1,   477,    -1,   479,   480,    -1,   482,   483,    -1,
     485,    -1,   487,    -1,    -1,   490,   491,   492,   493,   494,
      -1,   496,   497,    -1,   499,   500,   501,   502,    -1,   504,
     505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,    -1,
      -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,   524,
     525,   526,   527,    -1,   529,   530,   531,   532,   533,   534,
      -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,   544,
      -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,    -1,
      -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,   564,
     565,   566,   567,   568,   569,    -1,    -1,   572,   573,   574,
     575,    -1,   577,   578,    -1,    -1,   581,   582,   583,   584,
      -1,    -1,   587,   588,    -1,   590,   591,   592,   593,   594,
      -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,    -1,
      -1,   606,   607,   608,   609,    -1,   611,   612,   613,    -1,
     615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,    -1,
     625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,    -1,
      -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,   644,
     645,   646,   647,   648,   649,   650,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,    -1,
      -1,   666,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   689,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,   208,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,   273,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,   286,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,   506,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,   535,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,    -1,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,   655,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   688,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,   273,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,   535,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   688,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,    -1,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,   655,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,   682,    -1,    19,    -1,    -1,    22,   688,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,   681,    -1,    -1,
      19,    -1,    -1,    22,   688,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
     259,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,    -1,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   688,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     5,   676,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,   688,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,   681,    -1,    -1,
      19,    -1,    -1,    22,   688,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,   242,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,    -1,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   688,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   688,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,    -1,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   688,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   688,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,    -1,
     109,    -1,    -1,   112,    -1,   114,    -1,    -1,    -1,   118,
     119,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,   128,
     129,    -1,    -1,    -1,    -1,   134,    -1,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,   144,   145,   146,   147,    -1,
      -1,    -1,    -1,   152,    -1,    -1,   155,   156,   157,    -1,
      -1,    -1,   161,    -1,   163,   164,    -1,   166,   167,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,    -1,    -1,
     189,   190,    -1,   192,    -1,   194,   195,    -1,    -1,   198,
     199,   200,    -1,    -1,    -1,   204,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,   226,    -1,   228,
      -1,    -1,    -1,   232,   233,    -1,    -1,    -1,   237,   238,
     239,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
      -1,    -1,   251,    -1,    -1,    -1,    -1,   256,   257,    -1,
      -1,    -1,   261,    -1,   263,   264,    -1,   266,   267,    -1,
      -1,   270,    -1,   272,    -1,    -1,   275,   276,   277,    -1,
      -1,   280,    -1,    -1,   283,   284,    -1,    -1,    -1,    -1,
      -1,   290,   291,    -1,   293,    -1,   295,    -1,   297,   298,
      -1,    -1,    -1,    -1,    -1,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,    -1,   333,   334,   335,    -1,    -1,    -1,
      -1,   340,   341,   342,   343,   344,   345,    -1,    -1,   348,
     349,    -1,   351,    -1,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    -1,    -1,   367,    -1,
      -1,   370,   371,   372,   373,    -1,    -1,    -1,   377,   378,
      -1,    -1,    -1,    -1,   383,    -1,    -1,   386,   387,   388,
      -1,   390,   391,   392,   393,    -1,   395,   396,    -1,    -1,
      -1,    -1,    -1,   402,    -1,    -1,    -1,    -1,   407,   408,
     409,    -1,    -1,   412,    -1,   414,    -1,   416,   417,   418,
      -1,   420,   421,   422,   423,   424,   425,   426,    -1,   428,
     429,    -1,   431,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,    -1,    -1,    -1,
     449,    -1,    -1,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,   462,   463,   464,   465,    -1,   467,   468,
      -1,   470,   471,   472,    -1,    -1,   475,    -1,   477,    -1,
     479,   480,    -1,   482,   483,    -1,   485,    -1,   487,    -1,
      -1,   490,   491,   492,   493,   494,    -1,   496,   497,    -1,
     499,   500,   501,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,    -1,    -1,    -1,   516,    -1,    -1,
      -1,   520,    -1,   522,   523,   524,   525,   526,   527,    -1,
     529,   530,   531,   532,   533,   534,    -1,    -1,    -1,    -1,
      -1,    -1,   541,   542,    -1,   544,    -1,    -1,   547,    -1,
      -1,    -1,   551,   552,   553,    -1,    -1,    -1,   557,    -1,
      -1,   560,   561,   562,    -1,   564,   565,   566,   567,   568,
     569,    -1,    -1,   572,   573,   574,   575,    -1,   577,   578,
      -1,    -1,   581,   582,   583,   584,    -1,    -1,   587,   588,
      -1,   590,   591,   592,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,   601,   602,    -1,    -1,    -1,   606,   607,   608,
     609,    -1,   611,   612,   613,    -1,   615,   616,    -1,   618,
     619,    -1,    -1,   622,    -1,    -1,   625,    -1,   627,    -1,
     629,   630,    -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,
      -1,   640,    -1,    -1,    -1,   644,   645,   646,   647,   648,
     649,   650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,
     659,    -1,   661,   662,   663,    -1,    -1,   666,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,   688,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,    -1,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,    -1,    -1,    -1,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,   191,   192,    -1,
     194,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,   242,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,    -1,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,   268,    -1,   270,    -1,   272,    -1,
      -1,    -1,   276,   277,    -1,    -1,   280,   281,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   408,   409,    -1,    -1,    -1,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,    -1,    -1,    -1,    -1,    -1,    -1,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,    -1,    -1,   470,    -1,   472,   473,
      -1,   475,    -1,    -1,    -1,   479,    -1,    -1,   482,   483,
      -1,   485,   486,   487,    -1,    -1,   490,    -1,   492,   493,
     494,    -1,   496,   497,    -1,   499,    -1,   501,   502,    -1,
     504,    -1,    -1,    -1,    -1,   509,   510,   511,    -1,    -1,
      -1,    -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
      -1,    -1,   526,   527,    -1,   529,    -1,   531,    -1,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,    -1,   553,
      -1,    -1,    -1,   557,    -1,    -1,    -1,   561,    -1,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,    -1,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,    -1,   607,   608,   609,    -1,    -1,   612,   613,
      -1,   615,   616,    -1,    -1,    -1,    -1,    -1,   622,    -1,
      -1,   625,    -1,    -1,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
     654,    -1,    -1,    -1,   658,    -1,    -1,   661,    -1,   663,
      -1,     5,   666,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   683,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,   110,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,     5,   666,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,   681,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,     5,   666,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,   681,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,     5,   666,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   676,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,     5,   666,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   676,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,     5,   666,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   676,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,    -1,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,    -1,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,    -1,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,    -1,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,     5,   666,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   676,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,    -1,   109,    -1,    -1,   112,    -1,
     114,    -1,    -1,    -1,   118,   119,   120,    -1,    -1,   123,
      -1,    -1,    -1,    -1,   128,   129,    -1,    -1,    -1,   133,
     134,    -1,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
     144,   145,   146,   147,    -1,    -1,    -1,    -1,   152,    -1,
      -1,   155,   156,   157,    -1,    -1,    -1,   161,    -1,   163,
     164,    -1,   166,   167,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,   183,
     184,   185,   186,    -1,    -1,   189,   190,    -1,   192,    -1,
     194,   195,    -1,    -1,   198,   199,   200,    -1,    -1,    -1,
     204,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,   226,    -1,   228,    -1,    -1,    -1,   232,   233,
      -1,    -1,    -1,   237,   238,   239,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,    -1,    -1,   251,    -1,    -1,
      -1,    -1,   256,   257,    -1,    -1,    -1,   261,    -1,   263,
     264,    -1,   266,   267,    -1,    -1,   270,    -1,   272,    -1,
      -1,   275,   276,   277,    -1,    -1,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,    -1,    -1,   290,   291,    -1,   293,
      -1,   295,    -1,   297,   298,    -1,    -1,    -1,    -1,    -1,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,    -1,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,   341,   342,   343,
     344,   345,    -1,    -1,   348,   349,    -1,   351,    -1,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    -1,    -1,   367,    -1,    -1,   370,   371,   372,   373,
      -1,    -1,    -1,   377,   378,    -1,    -1,    -1,    -1,   383,
      -1,    -1,   386,   387,   388,    -1,   390,   391,   392,   393,
      -1,   395,   396,    -1,    -1,    -1,    -1,    -1,   402,    -1,
      -1,    -1,    -1,   407,   408,   409,    -1,    -1,   412,    -1,
     414,    -1,   416,   417,   418,    -1,   420,   421,   422,   423,
     424,   425,   426,    -1,   428,   429,    -1,   431,   432,   433,
      -1,   435,    -1,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,    -1,    -1,    -1,   449,    -1,    -1,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,    -1,
      -1,   475,    -1,   477,    -1,   479,   480,    -1,   482,   483,
      -1,   485,    -1,   487,    -1,    -1,   490,   491,   492,   493,
     494,    -1,   496,   497,    -1,   499,   500,   501,   502,    -1,
     504,   505,    -1,    -1,    -1,   509,   510,   511,   512,    -1,
      -1,   515,   516,    -1,    -1,    -1,   520,    -1,   522,   523,
     524,   525,   526,   527,    -1,   529,   530,   531,   532,   533,
     534,    -1,    -1,    -1,    -1,    -1,    -1,   541,   542,    -1,
     544,    -1,    -1,   547,    -1,    -1,    -1,   551,   552,   553,
      -1,    -1,    -1,   557,    -1,    -1,   560,   561,   562,    -1,
     564,   565,   566,   567,   568,   569,    -1,    -1,   572,   573,
     574,   575,    -1,   577,   578,    -1,    -1,   581,   582,   583,
     584,    -1,   586,   587,   588,    -1,   590,   591,   592,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,   601,   602,    -1,
      -1,    -1,   606,   607,   608,   609,    -1,   611,   612,   613,
      -1,   615,   616,    -1,   618,   619,    -1,    -1,   622,    -1,
      -1,   625,    -1,   627,    -1,   629,   630,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,   640,    -1,    -1,    -1,
     644,   645,   646,   647,   648,   649,   650,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,   659,    -1,   661,   662,   663,
      -1,    -1,   666,    -1,     5,   669,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,   104,    -1,   106,    -1,    -1,   109,    -1,
     111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
     251,    -1,    -1,    -1,   255,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,   506,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,   519,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,   603,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,   626,   627,   628,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,   104,    -1,   106,    -1,    -1,   109,    -1,
     111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,   137,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,   153,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
     251,    -1,    -1,    -1,   255,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,   296,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,   506,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,   519,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,   603,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,   626,   627,   628,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,   196,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,   229,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
     301,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,   374,   375,    -1,   377,   378,    -1,    -1,
      -1,   382,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,   537,   538,   539,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,   610,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,   196,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,   229,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
     301,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,   382,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,   610,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,   196,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,   229,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
     301,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,   382,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,   610,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,   130,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,   196,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,   229,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
     301,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,   382,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,   610,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
     301,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,   382,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
     411,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,   610,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
     301,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,   382,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
     411,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,   495,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,   610,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,   110,
     111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    39,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,   229,   230,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
     301,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,   382,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
     411,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,   610,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,   110,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
     111,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,   285,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    20,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,   538,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,   133,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,   586,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,   434,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,   129,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,   152,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,   198,   199,   200,
      -1,    -1,    -1,   204,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,   226,    -1,   228,    -1,    -1,
      -1,   232,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,   257,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,   275,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,   377,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,   395,   396,    -1,    -1,    -1,    -1,
      -1,   402,    -1,    -1,    -1,    -1,   407,   408,   409,    -1,
      -1,   412,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,   426,    -1,   428,   429,    -1,
     431,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,   468,    -1,   470,
     471,   472,    -1,    -1,   475,    -1,   477,    -1,   479,   480,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
     491,   492,   493,   494,    -1,   496,   497,    -1,   499,   500,
     501,   502,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,    -1,    -1,   516,    -1,    -1,    -1,   520,
      -1,   522,   523,   524,   525,   526,   527,    -1,   529,   530,
     531,   532,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,   552,   553,    -1,    -1,    -1,   557,    -1,    -1,   560,
     561,   562,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,   590,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,   606,   607,   608,   609,    -1,
     611,   612,   613,    -1,   615,   616,    -1,   618,   619,    -1,
      -1,   622,    -1,    -1,   625,    -1,   627,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,   659,    -1,
     661,   662,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,   159,   160,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,   159,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
     651,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,   163,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,    -1,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,    -1,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
     191,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,   268,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
     281,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,    -1,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,   242,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,   473,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,   486,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,   654,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,     5,   666,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,    -1,   109,    -1,
      -1,   112,    -1,   114,    -1,    -1,    -1,   118,   119,   120,
      -1,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,   144,   145,   146,   147,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,   156,   157,    -1,    -1,    -1,
     161,    -1,    -1,   164,    -1,   166,   167,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,    -1,    -1,    -1,
      -1,    -1,   183,   184,   185,   186,    -1,    -1,   189,   190,
      -1,   192,    -1,   194,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,   237,   238,   239,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,    -1,    -1,
     251,    -1,    -1,    -1,    -1,   256,    -1,    -1,    -1,    -1,
     261,    -1,   263,   264,    -1,   266,   267,    -1,    -1,   270,
      -1,   272,    -1,    -1,    -1,   276,   277,    -1,    -1,   280,
      -1,    -1,   283,   284,    -1,    -1,    -1,    -1,    -1,   290,
     291,    -1,   293,    -1,   295,    -1,   297,   298,    -1,    -1,
      -1,    -1,    -1,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,    -1,   333,   334,   335,    -1,    -1,    -1,    -1,   340,
     341,   342,   343,   344,   345,    -1,    -1,   348,   349,    -1,
     351,    -1,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    -1,    -1,   367,    -1,    -1,   370,
     371,   372,   373,    -1,    -1,    -1,    -1,   378,    -1,    -1,
      -1,    -1,   383,    -1,    -1,   386,   387,   388,    -1,   390,
     391,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   408,   409,    -1,
      -1,    -1,    -1,   414,    -1,   416,   417,   418,    -1,   420,
     421,   422,   423,   424,   425,    -1,    -1,    -1,    -1,    -1,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,    -1,    -1,    -1,   449,    -1,
      -1,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,   462,   463,   464,   465,    -1,   467,    -1,    -1,   470,
      -1,   472,    -1,    -1,   475,    -1,    -1,    -1,   479,    -1,
      -1,   482,   483,    -1,   485,    -1,   487,    -1,    -1,   490,
      -1,   492,   493,   494,    -1,   496,   497,    -1,   499,    -1,
     501,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,    -1,    -1,    -1,    -1,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,    -1,   526,   527,    -1,   529,    -1,
     531,    -1,   533,   534,    -1,    -1,    -1,    -1,    -1,    -1,
     541,   542,    -1,   544,    -1,    -1,   547,    -1,    -1,    -1,
     551,    -1,   553,    -1,    -1,    -1,   557,    -1,    -1,    -1,
     561,    -1,    -1,   564,   565,   566,   567,   568,   569,    -1,
      -1,   572,   573,   574,   575,    -1,   577,   578,    -1,    -1,
     581,   582,   583,   584,    -1,    -1,   587,   588,    -1,    -1,
     591,   592,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
     601,   602,    -1,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,   612,   613,    -1,   615,   616,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,   625,    -1,    -1,    -1,   629,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   637,    -1,    -1,   640,
      -1,    -1,    -1,   644,   645,   646,   647,   648,   649,   650,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   658,    -1,    -1,
     661,    -1,   663,    -1,    -1,   666
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    56,    60,    65,
      66,    85,   104,   129,   137,   139,   140,   152,   153,   165,
     180,   198,   216,   218,   224,   228,   242,   255,   257,   274,
     292,   296,   303,   394,   413,   415,   431,   442,   466,   469,
     471,   473,   474,   477,   478,   488,   491,   500,   514,   519,
     520,   521,   552,   560,   606,   619,   623,   626,   631,   654,
     655,   662,   668,   692,   695,   696,   697,   698,   699,   702,
     709,   711,   724,   755,   783,   790,   791,   806,   807,   826,
     845,   860,   923,   981,  1025,  1111,  1156,  1159,  1169,  1174,
    1180,  1193,  1196,  1202,  1205,  1210,  1217,  1229,  1445,  1447,
    1459,  1462,  1485,  1493,  1506,  1513,  1527,  1531,  1532,  1536,
    1547,  1555,  1559,  1564,  1565,  1566,  1598,  1599,  1630,  1661,
    1667,  1669,  1676,  1679,  1716,  1718,  1724,  1725,  1726,  1727,
    1785,  1793,  1794,  1795,    12,   116,   134,   209,   242,   297,
     436,   512,   578,  1112,  1457,  1751,  1752,  1753,  1754,   204,
     293,   379,  1204,  1534,   374,   375,  1276,  1717,   586,  1619,
     249,     5,     7,     8,     9,    10,    11,    12,    15,    19,
      22,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      34,    38,    42,    45,    46,    47,    49,    51,    52,    55,
      58,    59,    61,    62,    64,    65,    67,    68,    69,    70,
      71,    72,    74,    75,    76,    77,    78,    79,    80,    82,
      83,    84,    85,    86,    87,    88,    89,    91,    92,    94,
      95,    96,    97,    98,   100,   103,   106,   109,   112,   114,
     118,   119,   120,   123,   128,   129,   134,   136,   141,   143,
     144,   145,   146,   147,   152,   155,   156,   157,   161,   163,
     164,   166,   167,   168,   170,   171,   173,   174,   175,   176,
     177,   178,   179,   180,   183,   184,   185,   186,   189,   190,
     192,   194,   195,   198,   199,   200,   204,   205,   207,   209,
     211,   212,   213,   214,   215,   216,   217,   219,   224,   225,
     226,   228,   232,   233,   237,   238,   239,   240,   241,   245,
     246,   247,   248,   251,   256,   257,   261,   263,   264,   266,
     267,   270,   272,   275,   276,   277,   280,   283,   284,   290,
     291,   293,   295,   297,   298,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   323,   324,   325,   326,   328,   329,   330,   331,
     333,   334,   335,   340,   341,   342,   343,   344,   345,   348,
     349,   351,   353,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   367,   370,   371,   372,   373,   377,   378,
     383,   386,   387,   388,   390,   391,   392,   393,   395,   396,
     402,   407,   408,   409,   412,   414,   416,   417,   418,   420,
     421,   422,   423,   424,   425,   426,   428,   429,   431,   432,
     433,   435,   437,   438,   439,   440,   441,   443,   444,   445,
     449,   453,   454,   456,   457,   458,   461,   462,   463,   464,
     465,   467,   468,   470,   471,   472,   475,   477,   479,   480,
     482,   483,   485,   487,   490,   491,   492,   493,   494,   496,
     497,   499,   500,   501,   502,   504,   505,   509,   510,   511,
     512,   516,   520,   522,   523,   524,   525,   526,   527,   529,
     530,   531,   532,   533,   534,   541,   542,   544,   547,   551,
     552,   553,   557,   560,   561,   562,   564,   565,   566,   567,
     568,   569,   572,   573,   574,   575,   577,   578,   581,   582,
     583,   584,   587,   588,   590,   591,   592,   593,   594,   600,
     601,   602,   606,   607,   608,   609,   611,   612,   613,   615,
     616,   618,   619,   622,   625,   627,   629,   630,   637,   640,
     644,   645,   646,   647,   648,   649,   650,   658,   659,   661,
     662,   663,   666,   749,  1618,  1622,  1628,  1629,   827,   323,
     577,   580,  1663,  1197,   658,  1720,   297,   401,   578,  1494,
    1446,   116,   175,   209,   249,   297,   436,   490,   512,   578,
     583,   603,   629,   645,  1458,   246,  1622,  1204,   109,   792,
     748,   688,  1615,  1617,  1622,   710,   808,  1460,   423,   532,
    1560,   119,   249,   663,  1571,  1663,   861,  1204,  1026,   924,
    1622,  1556,   500,   629,  1663,  1204,   863,  1463,  1548,   538,
     780,   784,   785,  1622,   748,  1720,  1622,   553,  1631,  1514,
     784,    13,   524,   600,    13,   524,   580,  1508,   423,   532,
    1668,  1486,  1622,   862,   455,  1601,    34,    85,   163,   431,
     454,   491,   552,  1787,     0,   165,   693,   431,   116,   208,
     490,   535,   621,   629,   730,   731,  1089,  1090,  1091,  1458,
     185,   204,   416,  1533,  1534,  1615,  1622,   506,   681,  1230,
     669,  1124,  1622,   669,   749,   181,   220,   749,   285,  1619,
    1622,  1624,   866,   867,   870,   893,  1622,  1148,  1149,   629,
    1118,  1264,  1751,   669,  1663,  1229,  1459,  1462,  1485,  1493,
    1530,    25,  1720,  1211,   756,   688,   651,   828,   829,   832,
     836,   722,   723,  1619,  1170,   645,  1194,  1663,    18,  1721,
     220,   474,   868,   893,   244,   304,   445,  1504,  1505,     8,
      22,    31,    37,    39,    40,    41,    43,    56,    57,    62,
      63,    71,    74,    76,    77,    78,    79,    80,    97,   101,
     102,   107,   108,   110,   111,   115,   116,   121,   122,   123,
     128,   130,   133,   138,   181,   187,   188,   193,   196,   204,
     213,   215,   221,   222,   223,   229,   230,   237,   242,   255,
     258,   277,   282,   290,   301,   327,   332,   344,   348,   350,
     354,   355,   356,   357,   358,   366,   374,   375,   376,   380,
     381,   382,   385,   388,   411,   418,   419,   424,   425,   427,
     443,   447,   473,   474,   487,   489,   494,   496,   498,   504,
     558,   559,   566,   570,   571,   576,   586,   591,   592,   593,
     594,   604,   605,   606,   610,   614,   629,   633,   634,   635,
     636,   641,   643,   649,   650,   666,   674,   675,   680,   681,
     684,   685,   688,   689,  1270,  1271,  1272,  1273,  1277,  1288,
    1289,  1290,  1291,  1292,  1293,  1294,  1302,  1306,  1307,  1308,
    1310,  1324,  1590,  1593,  1595,  1596,  1597,  1611,  1613,  1618,
    1622,  1457,  1457,  1457,   242,  1456,   220,  1457,  1457,  1457,
     893,  1457,  1457,  1457,  1663,   700,   701,   703,  1537,   143,
      13,    14,   104,   111,   137,   153,   175,   180,   192,   218,
     249,   255,   296,   437,   441,   459,   467,   475,   506,   519,
     520,   572,   603,   626,   628,  1624,  1680,  1684,  1685,  1687,
    1689,  1690,  1622,   393,    70,   450,   688,  1624,   821,   822,
     135,   231,   304,  1465,  1622,  1619,   225,   531,  1561,   259,
    1567,  1662,    34,    70,   191,   268,   281,   393,   486,   769,
     804,   805,   806,   809,   810,   811,   813,   814,   815,   816,
     818,   841,   843,   849,   856,  1618,  1623,  1629,  1663,  1270,
      50,   925,   206,    37,   323,  1519,  1557,  1622,   748,  1206,
    1175,   769,   852,   135,   304,  1466,  1492,   323,   444,   524,
    1549,  1550,   637,   781,   514,   786,     7,    13,   441,  1677,
    1678,  1685,  1687,   598,  1721,  1632,    62,    63,   133,   217,
     293,   362,   418,   490,   511,   600,   689,  1054,  1622,  1635,
    1647,  1651,  1652,    13,    26,    38,    62,    74,   100,   102,
     104,   117,   167,   171,   174,   207,   209,   217,   219,   248,
     249,   271,   293,   323,   393,   422,   435,   436,   439,   440,
     462,   511,   524,   561,   580,   648,  1054,  1088,  1515,  1519,
    1520,  1522,  1531,  1618,  1648,   786,   525,   722,   450,   655,
    1160,  1161,  1162,   525,   722,  1507,  1622,  1619,  1663,  1492,
     850,  1270,  1600,    39,   229,   230,   586,  1591,  1592,  1620,
    1786,  1786,  1786,  1786,  1786,   687,  1622,   242,   980,   980,
     980,  1748,  1752,  1753,  1754,   512,   732,   249,   249,   249,
     580,  1529,  1528,  1251,  1252,   681,  1232,  1233,   342,   584,
     613,  1114,   627,   110,  1624,  1625,  1626,  1684,  1116,   872,
     894,  1622,  1115,  1120,     6,    60,   153,   375,   449,   451,
     895,   580,   244,   392,  1150,  1151,  1152,   748,   546,  1755,
    1756,   175,  1117,  1624,  1181,   846,  1212,  1213,  1214,  1215,
    1615,   681,   757,  1622,   837,   159,   839,  1270,   836,   598,
    1451,  1452,  1615,  1195,  1451,    59,   377,   377,   466,  1722,
     871,   894,     6,   206,  1495,  1501,  1502,  1622,  1504,   681,
     681,   681,  1289,   681,   681,   681,  1270,  1327,   681,   681,
     681,   681,   681,   681,   681,   681,   681,   681,   681,   681,
     681,   681,   681,  1269,  1269,  1269,   681,  1268,   681,   681,
     681,   586,   681,   681,   681,   681,   681,   681,   681,   681,
     681,   681,   681,   681,   681,   681,   681,   681,   681,  1270,
     681,   681,   681,   681,  1325,  1326,  1611,  1622,   681,   681,
     681,   681,   681,   681,   681,   681,   681,  1270,  1268,   681,
     681,   681,   681,   681,   681,   681,   681,   681,   681,   681,
     681,   681,   681,   681,   681,   681,   681,   681,   681,   681,
     681,   681,  1268,   586,   681,   681,   681,   586,   681,   681,
     681,   586,  1592,   681,  1269,  1268,  1268,   681,   681,   681,
     681,   681,   681,  1289,  1289,  1289,  1027,  1270,  1742,  1743,
    1622,  1622,  1311,    17,    18,   398,   401,   664,  1274,  1275,
     169,   210,   265,   278,   368,   669,   670,   671,  1278,    35,
     149,   262,   286,   354,   460,   517,   518,   533,   672,   673,
     674,   675,   676,   677,   678,   679,  1276,  1289,    73,   400,
     406,   683,  1620,   681,   688,  1622,   749,  1622,   181,  1622,
     894,   749,   748,  1624,   904,  1520,   749,   748,  1450,  1457,
     704,  1270,   632,   705,    37,   141,   167,   170,   211,   233,
     298,   323,   435,   444,   461,   479,   524,   527,   557,  1538,
    1543,  1544,  1618,  1663,    90,   689,   793,   794,   795,   796,
    1622,   435,  1688,   493,   493,   578,   583,   629,   645,  1269,
     396,  1692,   577,   389,  1694,    69,   524,  1691,   117,   645,
    1693,   598,   389,   683,    20,   669,  1383,  1384,  1670,  1622,
     163,  1270,   244,  1147,   532,    91,   444,  1562,    52,    89,
     304,  1573,  1615,  1664,  1665,   844,  1622,   206,   371,   819,
    1623,  1623,  1622,   812,   163,   805,   687,   696,   855,   690,
    1203,   926,   700,   298,  1207,  1625,  1627,  1208,  1209,  1615,
     645,  1172,  1663,   625,   855,   259,  1453,  1467,  1468,  1615,
    1552,    52,  1551,   683,  1620,    58,    68,    82,    94,    95,
      96,   114,   343,   361,   502,   565,   582,   787,   789,   396,
    1688,   389,   206,   389,   500,  1723,  1722,   133,  1634,  1650,
    1652,   514,   490,   688,    37,   133,   515,   669,  1055,  1056,
    1476,  1624,   203,  1476,  1658,  1624,  1637,   689,  1624,    37,
     133,  1058,  1059,  1624,   688,  1638,  1636,  1476,   525,   174,
     286,   652,  1526,   681,   116,   175,   209,   436,   580,   603,
     629,   645,  1526,    13,   990,  1624,   287,  1416,  1417,  1418,
     206,   262,  1521,  1523,    72,   557,   203,   557,   577,   532,
      72,   557,    13,    45,    98,   103,   264,   341,   409,   534,
     574,  1509,  1510,  1511,   722,   233,   557,   723,   557,  1416,
    1526,  1523,   298,   166,    75,   438,   577,   602,   203,  1263,
     557,   640,  1163,  1164,  1163,   391,   660,    92,   683,  1163,
    1163,  1452,  1147,   855,   152,  1602,  1603,  1607,  1622,   683,
     390,  1789,   573,  1790,   269,   482,  1788,   165,   694,  1276,
    1622,   748,   748,    11,   209,   436,   603,   736,  1264,  1750,
    1756,  1766,  1772,  1773,  1774,  1780,   209,   736,  1749,  1756,
    1766,  1774,  1780,  1751,   980,   980,   980,   980,   980,  1530,
    1535,  1591,  1622,   206,   259,   399,  1240,  1249,  1250,  1253,
    1254,  1255,  1412,  1418,  1441,  1735,    13,   148,   231,   540,
     541,   542,   543,   544,   545,   563,  1257,  1258,  1259,  1747,
    1232,   682,   506,   133,   977,   978,   987,   988,  1063,   119,
    1269,   689,   750,     6,   873,   750,   395,   118,   890,   890,
     890,     4,  1615,  1152,  1625,  1626,  1627,  1700,  1704,   505,
     645,   749,  1756,  1182,  1183,  1452,   847,   848,   262,   683,
     415,  1223,  1225,  1226,   758,   759,  1270,  1270,   769,   163,
     830,   712,   185,   445,   683,  1171,  1451,    61,   185,   189,
     203,   340,   445,  1198,  1199,  1200,    59,   466,   873,   890,
    1454,  1455,  1615,  1616,  1622,   683,  1498,   688,  1503,  1270,
    1270,    13,   148,  1317,  1385,  1317,  1317,  1317,   651,  1329,
    1270,  1270,  1324,  1324,  1270,  1270,  1270,  1270,  1286,  1287,
    1270,  1270,  1270,  1270,   148,  1317,  1385,   682,   682,   130,
     196,   229,   301,   382,   610,   682,  1425,  1428,  1429,   682,
    1270,  1270,  1270,  1270,  1611,   682,  1742,   124,   125,   126,
     127,   128,   234,   235,   236,   237,   344,   346,   347,   348,
     355,   443,   503,   504,   649,   665,   666,  1380,  1381,  1270,
    1270,  1324,   120,   123,   591,   594,  1382,   148,  1313,  1270,
    1270,  1270,  1270,  1270,  1270,  1380,  1270,  1324,  1270,  1324,
    1326,    10,   683,   688,   148,  1317,  1270,  1270,   148,  1317,
    1270,  1270,  1324,  1324,  1324,  1270,  1270,  1270,  1270,   682,
    1270,  1324,  1273,  1270,   682,  1270,  1270,  1270,  1270,  1270,
     682,   682,  1270,  1317,  1317,  1270,  1270,   148,  1317,  1270,
    1381,  1381,  1270,    48,   279,   599,  1270,  1270,   682,  1612,
    1613,  1622,  1317,  1317,  1270,  1270,  1270,   682,   683,  1598,
    1270,   688,   689,  1312,  1624,  1270,  1270,  1270,  1272,   188,
     381,   605,   622,  1276,    13,    19,  1272,  1279,  1273,  1273,
     681,  1289,  1273,  1273,  1273,  1273,   286,  1273,  1273,   258,
    1273,   258,  1273,  1273,  1273,  1273,  1273,    35,   262,   286,
     460,  1624,  1289,   681,  1309,  1397,  1622,  1270,  1295,  1622,
     688,   389,   904,  1683,  1685,   378,   647,   905,   906,   167,
    1627,  1699,  1451,  1448,   705,   706,   298,   298,   298,   298,
      52,   298,   722,   298,   683,  1263,  1539,   123,   591,   594,
     788,   798,  1310,  1595,  1611,  1624,   683,   669,   577,   681,
    1705,  1627,  1705,  1705,  1705,  1700,   209,   436,   580,  1686,
     175,   180,   192,   437,   467,   475,   520,   572,  1690,  1622,
     194,   371,  1622,  1671,  1672,   242,   589,  1467,  1619,   238,
     629,  1270,  1563,  1218,   293,  1572,  1384,   683,   847,   206,
    1622,  1270,   303,   687,    34,   303,   473,   654,  1451,   288,
     291,   446,   927,   929,    33,   598,  1558,   683,   598,   683,
     598,  1173,  1451,   853,  1468,  1464,   415,  1343,  1344,   598,
    1554,   722,  1550,   683,   669,   203,   683,  1627,  1626,  1701,
     209,   436,  1686,  1622,   683,  1633,  1476,  1685,  1622,    73,
    1061,  1270,  1627,   388,   418,   586,  1659,   266,   450,  1653,
    1654,  1655,  1656,   217,   293,   511,  1649,  1476,  1622,   600,
    1639,  1650,   683,  1641,    13,    37,   133,   389,  1270,  1660,
     557,   262,  1524,  1263,  1263,   676,   980,   749,   749,   749,
    1615,   749,  1627,  1615,   298,   359,   557,  1518,  1518,   301,
     382,   495,   610,  1419,  1420,  1593,  1622,  1526,  1622,   749,
    1526,  1626,  1521,  1526,  1619,   749,  1526,   263,   575,   190,
     203,  1512,   683,   174,   557,  1521,  1615,  1523,  1521,  1521,
    1270,  1526,  1526,  1526,  1158,   465,   547,  1165,  1166,  1157,
     529,  1162,   681,   685,  1330,  1331,  1332,  1333,  1334,  1345,
    1346,  1347,  1348,   851,   683,   681,  1605,  1591,   421,  1791,
     181,   729,  1683,  1700,   209,  1773,   980,   980,  1264,   175,
     980,  1756,  1624,  1622,  1622,  1622,  1615,   154,  1256,  1331,
     155,   404,  1436,  1437,  1442,    50,   203,   296,  1260,   436,
    1431,  1441,  1735,  1260,   652,  1386,  1416,  1253,  1254,   676,
    1261,  1262,  1264,  1259,   682,   620,  1729,  1733,  1734,  1251,
     978,    73,  1054,   144,  1624,    83,    97,   275,   352,   377,
     448,   546,   752,   754,   456,   615,   891,   892,   251,   887,
     888,   889,   896,   904,   906,   681,  1619,    27,   331,   881,
     882,   883,   896,   897,   898,   904,   906,   874,   875,   881,
    1113,   240,   476,   683,  1708,   134,   261,   980,  1119,   683,
     420,  1184,   770,   133,  1216,  1622,  1214,  1615,   922,  1225,
     249,   273,  1086,  1227,   682,   683,   838,    56,   651,   831,
     833,   151,   243,   245,   305,   306,   308,   309,   310,   311,
     312,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     324,   325,   326,   463,   464,   713,   714,   721,  1452,   203,
    1201,   627,  1199,    83,   372,   457,   616,   884,   885,   886,
     896,   900,   901,   902,   903,   904,   906,   631,   869,   683,
    1499,  1343,   688,  1503,  1502,   206,   676,  1622,   683,   682,
    1317,   682,  1318,   682,   682,   682,  1270,   159,   651,  1328,
      20,   682,   632,   682,   682,   682,   683,   682,   683,   682,
     683,   683,   683,   683,   632,   683,  1303,   682,   676,   682,
     683,   683,   682,   682,   682,   682,   206,   682,   683,   682,
     683,  1305,   682,   683,   682,   683,   682,   683,   683,   683,
     675,   682,   683,   683,   682,   682,   681,  1611,  1622,  1317,
     682,   682,   682,  1317,   682,   683,   682,   682,   682,   682,
     682,   683,   682,   682,   683,   682,   262,   682,   683,   683,
     682,   683,   683,   682,   682,   682,   683,   206,   683,  1317,
     682,   682,   683,   683,   683,   682,   206,  1270,   206,  1270,
     206,  1270,   206,   682,   683,   682,   682,   682,   682,   683,
      20,   284,   683,  1077,   682,  1324,   506,   681,  1738,  1739,
    1740,  1741,   686,  1622,  1649,   515,   188,   381,   605,   622,
     681,    18,  1270,  1742,   173,  1390,  1273,  1270,  1270,  1273,
     681,  1289,  1273,  1398,  1264,  1299,  1300,  1301,   681,   688,
    1622,  1615,   905,   683,  1476,  1477,   683,    54,   481,  1153,
    1451,   133,   244,   707,   708,  1270,  1482,   722,  1544,  1451,
    1545,   796,   799,   800,   795,   383,   496,   797,  1622,  1706,
    1707,   598,   655,  1682,   676,  1615,  1622,  1698,  1698,  1698,
     194,   210,   276,   278,   371,   433,   669,   670,   671,  1673,
    1675,  1386,   823,  1461,  1627,  1219,  1220,  1221,  1222,  1615,
     250,   304,   450,   660,  1666,  1665,   259,   842,   857,   859,
     858,    75,   681,   934,   935,   934,   935,   416,   937,   226,
     273,  1270,  1619,  1627,  1627,  1209,  1615,  1451,   185,   445,
     630,  1176,  1177,  1178,  1270,   514,   636,   637,   681,   914,
    1469,  1472,  1598,   681,   130,   196,   229,   301,   382,   610,
    1424,    13,  1553,   789,   788,  1685,   218,   206,   683,  1698,
    1698,  1698,  1650,   203,  1660,   203,   133,  1060,  1062,  1624,
    1476,   681,   681,   284,   391,   660,   683,   683,   688,   688,
     688,  1652,  1270,  1653,  1640,  1642,  1643,  1619,   206,  1525,
    1619,  1270,   682,  1622,   178,   495,   387,   683,   748,  1526,
     444,  1416,  1511,  1524,  1526,  1521,  1615,  1526,  1526,   683,
     625,  1167,  1362,  1622,   105,   252,   269,   282,   365,   489,
     563,  1341,  1342,   514,   683,  1615,   769,  1603,  1606,  1622,
    1604,   683,   203,  1792,   976,   977,   655,  1681,  1708,   980,
     749,  1622,   749,   980,   980,   733,   608,   632,  1099,   389,
     389,   725,   586,  1621,  1621,   689,  1438,  1439,  1440,  1624,
    1413,   626,   262,  1622,  1431,  1441,  1241,  1387,   220,  1391,
    1411,  1412,   683,  1270,  1609,  1622,    13,   148,  1737,  1735,
    1246,  1249,  1254,  1477,  1477,   363,  1619,   546,   546,   546,
     546,   546,   505,  1619,  1619,  1477,   683,   889,   116,   232,
     407,   418,   426,   530,   629,   734,   735,  1477,  1477,   683,
     883,   876,   877,   896,   897,   898,     6,    12,    14,    16,
      28,    30,    60,    65,    66,    71,    83,    91,   101,   119,
     136,   145,   146,   153,   161,   167,   177,   201,   247,   249,
     256,   272,   296,   330,   349,   353,   394,   399,   408,   410,
     415,   418,   453,   468,   469,   470,   471,   497,   554,   555,
     556,   561,   578,   581,   601,   606,   620,   920,   983,   985,
     987,   988,  1125,  1129,  1131,  1134,  1140,  1141,  1142,  1144,
    1145,  1408,  1618,    50,   644,   655,  1702,    67,   267,   373,
     549,   567,   661,  1696,  1697,  1704,   655,  1711,  1615,   389,
     744,  1121,  1183,   203,   132,   768,   771,  1224,   681,  1270,
     589,   834,   833,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   683,   627,  1477,
    1477,  1477,  1477,   683,   886,   297,   186,   878,   879,   880,
     896,   897,   898,   899,   902,   903,   904,   906,  1455,  1622,
     632,  1496,  1622,  1331,   688,  1503,   258,  1270,   682,  1270,
     589,  1270,  1270,   163,    37,    63,   120,   123,   131,   150,
     260,   367,   522,   594,   624,  1319,  1321,  1322,  1055,  1287,
    1270,  1286,  1324,  1270,  1270,  1055,  1319,  1324,   682,   258,
     258,  1270,  1270,  1270,  1324,  1270,  1270,  1270,  1270,  1270,
    1270,  1270,  1270,  1273,   682,   682,  1270,  1270,  1270,  1270,
    1270,  1270,  1270,  1324,   258,  1270,  1270,  1270,   682,  1270,
    1270,  1270,  1270,   206,  1270,   206,  1270,   206,  1270,  1270,
    1270,    37,    63,  1072,  1073,  1074,  1075,  1076,  1425,  1424,
     682,  1354,  1355,  1356,   681,  1238,  1239,  1260,  1735,   620,
    1353,  1736,  1744,  1624,  1270,  1742,  1272,   682,   683,   682,
    1289,  1380,  1380,    18,  1270,  1742,  1390,  1399,  1622,  1270,
     682,   683,  1323,  1324,  1622,  1449,  1685,   989,  1624,  1627,
    1153,   683,   203,   655,  1540,  1541,   669,   683,   682,   683,
    1700,     7,   688,   688,   598,   598,   598,  1674,  1416,   769,
    1469,   683,  1223,  1225,  1621,   660,   293,    89,   817,   847,
     849,   852,   850,   681,  1264,  1425,   569,   938,   928,    12,
     930,   598,   206,  1179,  1177,   163,  1470,   681,  1473,  1478,
    1473,   682,   969,  1471,  1598,  1608,  1609,  1612,  1622,   506,
    1379,  1622,   669,   396,  1699,  1626,   206,   206,   206,   695,
    1627,   586,   586,   450,   472,   509,  1657,  1655,  1654,  1476,
    1641,   683,  1645,  1647,  1651,   130,   196,   301,   382,   610,
    1426,  1516,   171,   648,  1420,  1421,   178,  1420,  1420,   382,
    1525,  1386,  1521,  1166,   307,   721,  1168,   506,  1349,  1357,
    1358,  1362,  1363,  1743,  1330,   269,   269,   403,  1365,   282,
     489,  1341,  1365,  1330,  1488,  1489,  1612,  1332,  1343,   163,
     682,   683,    20,  1424,   345,     7,  1711,  1622,   681,   485,
    1781,  1767,   749,   202,    49,   226,   499,  1105,  1105,   389,
    1615,  1615,   286,   681,   908,   912,   982,   984,   985,  1443,
    1624,   683,  1270,  1414,  1610,   516,  1432,  1728,  1729,  1270,
      50,   227,  1388,  1416,  1262,  1265,  1265,   688,  1730,  1260,
    1062,  1056,   119,   119,   134,   261,   229,   301,   382,   610,
     907,  1427,  1428,  1618,   889,  1619,  1619,  1619,  1619,  1424,
    1619,  1619,   682,   683,   907,   907,   883,   683,   877,    81,
      93,   415,   998,  1006,  1009,  1010,  1086,  1090,  1091,  1146,
    1477,  1146,   415,  1477,  1477,  1146,  1477,   415,   415,  1477,
    1477,   598,   144,  1477,   271,   578,    93,   202,   415,   434,
    1086,  1146,   271,  1477,   415,   578,   144,  1477,  1477,  1477,
    1477,  1477,  1146,   415,    50,  1477,  1477,   922,  1477,   415,
     417,    20,   598,   669,  1155,   415,   415,  1477,  1477,  1477,
    1477,   147,   341,  1622,  1477,  1477,   415,  1477,   983,   683,
     919,   920,  1129,   681,   688,   997,  1011,  1614,  1622,  1476,
     418,   586,  1624,   586,   586,   586,    18,  1695,   328,   329,
     333,   334,   335,  1709,  1710,  1757,    87,   501,   469,  1122,
      13,    75,  1185,    99,   182,   776,   802,  1622,   163,   805,
     687,   681,   434,  1376,  1377,  1378,  1622,   769,  1270,   681,
     681,   681,  1424,  1424,  1619,  1619,  1426,  1619,  1424,  1619,
    1619,  1619,  1619,  1619,  1619,  1619,  1424,  1424,  1619,   112,
     377,   526,  1596,  1619,  1424,   714,  1619,  1425,   907,   907,
     886,   220,  1477,   683,   880,   688,  1331,  1386,  1503,  1386,
    1270,   682,  1270,   589,   681,  1045,  1046,  1046,  1046,   681,
    1040,  1041,  1045,   681,  1041,  1048,  1046,   260,  1046,   260,
     682,   682,   682,    20,  1280,   682,    20,   682,   682,   682,
    1304,  1270,  1270,   682,   682,   683,   682,   399,  1315,   682,
     682,   683,   683,   682,   683,   682,   682,   262,  1296,  1297,
     682,   682,   682,   682,   682,   683,   682,   682,  1270,   682,
     203,   682,   682,   683,   682,   683,   683,   682,  1270,   682,
    1270,   682,  1270,   682,   682,   682,   681,  1067,  1067,    21,
     139,   487,   674,  1069,  1070,  1071,   683,   683,  1254,  1745,
    1746,  1747,  1238,   682,   506,  1260,  1737,  1351,  1739,  1740,
     688,  1109,   682,  1324,  1272,   682,   683,   682,   415,  1400,
    1265,  1301,   682,   708,  1542,   450,    58,    68,    82,    94,
      95,    96,   114,   343,   361,   483,   502,   565,   582,   801,
     800,  1707,   655,  1713,   396,   676,   676,  1700,  1700,  1700,
     681,   824,   389,  1483,  1221,  1615,  1225,   244,  1228,  1568,
     820,  1622,   840,  1623,   840,   854,   854,   854,   931,   932,
     933,  1622,   943,  1273,    50,   681,   945,   935,   669,   681,
    1627,   360,   473,  1474,  1475,  1612,  1479,   683,   681,  1472,
     682,   682,   683,   506,   688,   970,   971,   682,   683,   788,
     206,  1701,  1701,  1701,   682,   682,    84,   612,   450,  1660,
    1644,  1646,  1416,  1421,  1517,  1526,   669,   683,  1364,   682,
    1733,  1736,  1260,  1735,  1333,  1599,   686,   269,  1365,  1365,
    1345,   269,   389,   632,   683,  1487,  1476,  1384,   654,  1622,
     681,  1626,  1775,   131,   260,   452,   564,   993,   681,   749,
     737,   119,  1615,   727,   728,  1615,    93,   286,   969,   994,
     995,   996,   997,   998,  1006,   918,   919,   683,   984,  1054,
    1057,  1439,   683,    21,   139,  1415,   351,   681,  1392,  1610,
    1389,   653,  1394,    20,  1266,  1619,  1622,   676,  1622,   506,
     681,  1231,   735,   877,   242,  1108,  1614,   980,    66,   202,
     434,   621,  1008,  1085,   980,  1086,  1087,  1087,   242,   979,
     133,  1622,  1614,  1204,  1426,  1424,  1456,  1424,    13,  1130,
    1138,  1139,  1622,  1204,  1619,  1619,  1054,  1477,  1424,  1456,
     273,  1457,   273,  1456,  1456,   989,  1139,  1477,   194,   276,
     377,   992,  1424,   133,  1622,  1426,  1426,  1456,  1204,  1409,
    1410,  1612,   133,  1424,   133,  1424,  1430,   921,  1619,  1204,
    1615,  1204,  1204,    86,    88,   133,   157,   195,   409,   458,
     991,   133,  1424,   133,  1424,   133,  1424,  1424,  1430,  1130,
     986,     6,   153,  1142,   994,  1622,     9,   194,  1154,   459,
    1007,  1008,  1079,  1012,   688,   133,  1427,  1619,  1622,   586,
      20,   632,  1703,  1696,  1424,  1424,  1424,  1596,   382,   674,
    1423,  1709,   681,  1758,  1276,  1719,    24,   176,   738,   598,
     145,   161,   740,    13,   681,  1186,   224,   683,   772,    90,
     113,   687,  1130,   682,   683,   835,   717,   718,  1424,   719,
     720,  1424,   715,   716,  1424,  1622,   907,   880,  1622,  1386,
    1411,  1380,  1270,   130,   301,   382,   610,  1320,   382,   382,
      63,   120,   123,   131,   150,   197,   260,   364,   367,   452,
     594,   624,  1033,  1034,  1281,  1282,  1283,  1284,  1319,   682,
    1380,  1380,  1270,    50,   508,  1314,  1270,  1270,  1324,    46,
     365,   682,   655,  1298,  1270,  1380,  1270,  1270,  1270,  1270,
     682,   682,   682,  1425,   682,  1077,  1072,  1070,  1072,  1073,
    1424,  1261,  1747,   682,  1733,  1355,  1352,  1622,   682,  1324,
      50,   399,  1401,  1266,   184,   296,   218,  1708,  1708,  1708,
    1481,  1482,   159,   160,   825,   156,  1228,   280,   244,   474,
    1574,   683,   682,   683,  1265,   929,   415,   946,   947,  1425,
     931,   683,  1476,  1480,  1481,  1478,   916,   917,  1472,  1608,
     970,  1622,   973,  1253,  1254,  1735,  1257,   922,  1622,  1701,
    1645,  1650,  1416,  1619,   721,  1359,  1360,  1384,  1350,  1353,
    1260,  1741,  1330,  1345,   269,   269,  1330,  1345,  1335,  1336,
    1489,  1386,  1482,  1374,  1375,  1264,   760,   761,   762,  1622,
     532,  1782,     9,    33,   864,   389,   659,   726,   681,   681,
    1615,   682,   682,   683,   913,  1574,   984,  1056,  1444,  1610,
    1264,  1433,  1434,  1435,   656,   657,   683,  1393,  1415,  1270,
    1309,  1395,  1396,  1619,  1622,   688,  1251,   681,  1234,  1235,
    1276,  1204,   681,   273,   273,  1087,   980,  1108,  1622,   980,
     980,  1276,   153,   514,  1130,  1614,  1127,   683,  1425,  1056,
    1619,  1614,  1456,  1138,  1614,  1614,   655,  1619,  1011,  1130,
     683,  1415,   925,  1130,  1135,  1130,   681,   682,  1622,  1615,
      36,    37,    42,    44,    46,    47,   120,   123,   131,   150,
     168,   195,   197,   213,   214,   260,   290,   299,   300,   302,
     337,   338,   339,   356,   357,   358,   364,   367,   384,   386,
     424,   425,   452,   510,   514,   528,   587,   591,   594,   595,
     596,   597,   638,   639,   666,  1013,  1031,  1032,  1033,  1034,
    1035,  1036,  1037,  1038,  1622,  1619,   301,   382,  1622,  1759,
      20,   432,  1270,  1270,   389,   744,   749,   389,    83,   745,
    1187,   248,   203,  1622,  1031,  1053,   203,   203,   682,  1377,
     589,   682,   683,   682,   683,   682,   683,   287,  1422,   682,
     682,   682,   682,   682,    22,    37,    51,   618,  1054,  1064,
    1065,   683,  1046,  1040,    63,  1046,   260,  1285,   682,   682,
     682,   682,  1316,  1610,  1591,   682,   682,   683,   682,   351,
     275,   444,   682,   682,   682,   682,   682,   682,  1068,   682,
     683,  1254,  1353,   682,  1392,    50,   446,   495,  1402,  1403,
      18,  1546,   396,   655,  1712,  1712,  1712,   682,   683,   769,
     821,  1484,   259,  1622,   933,   682,   226,   273,   948,   682,
     683,   682,  1475,  1482,   682,  1729,  1733,   972,   973,  1254,
     974,  1260,  1735,   974,  1261,  1257,  1351,  1744,   389,  1338,
    1345,  1345,   389,  1340,  1270,   681,  1411,  1372,  1373,  1742,
     682,   683,   763,  1619,   253,   262,   405,   764,   765,   766,
     767,   137,   255,   626,   865,   501,  1624,   681,  1106,  1107,
    1622,  1106,   682,   910,   911,   909,   996,    20,   975,    75,
    1575,  1415,  1270,   682,   683,  1610,    20,   683,   676,  1242,
    1250,  1253,  1254,  1234,   682,   506,   181,  1132,  1270,   980,
    1108,  1622,   632,  1098,   608,  1108,  1108,   181,   133,   133,
    1011,  1198,  1139,  1061,  1614,  1153,   580,  1154,  1126,  1410,
    1136,  1138,  1128,  1545,   681,  1080,  1045,  1047,  1047,  1046,
    1046,  1040,   430,   681,  1040,  1040,  1065,    63,   638,  1033,
    1035,  1065,  1065,    63,   639,   639,   642,  1040,  1015,   681,
    1046,  1046,  1046,  1065,  1045,  1046,  1014,  1040,   642,  1047,
    1047,  1045,  1045,  1046,  1048,   688,   682,   683,  1760,  1761,
    1380,   524,  1619,   152,  1123,  1190,  1622,    13,   681,  1188,
     773,  1061,   133,   803,   779,   780,  1424,   774,   775,   769,
     718,   720,   716,   495,  1420,  1497,  1064,  1055,    37,  1066,
     382,  1065,   683,  1415,  1270,   351,   183,   682,  1424,  1411,
    1414,   682,    35,   109,   123,   591,   594,   611,  1404,  1405,
    1595,   145,   218,  1709,  1714,  1715,  1482,   273,   580,   681,
     936,   930,   949,  1622,   947,   974,   915,  1261,   682,  1337,
     632,  1339,   632,  1379,  1422,   201,   244,   631,  1367,  1368,
    1371,  1265,  1776,   762,  1053,   682,   683,   762,   389,   738,
     395,  1106,   682,   683,  1415,   681,   682,  1729,  1733,   982,
     914,   162,   172,   397,   585,  1576,  1577,   289,  1578,  1265,
    1435,  1415,  1397,  1396,  1260,  1735,  1260,   682,  1729,  1733,
    1251,  1614,   416,   681,  1133,   682,  1108,  1098,   608,  1105,
     999,  1105,  1001,  1002,   258,   674,   675,   681,  1028,  1029,
    1030,  1288,  1594,  1154,  1615,  1204,  1137,  1176,   682,  1081,
    1622,   327,  1082,   522,   624,   667,  1042,  1043,  1044,  1110,
    1591,  1042,  1042,  1065,   642,  1042,    83,   434,   621,  1016,
    1017,  1052,  1078,  1276,  1618,  1110,  1065,  1042,    28,    73,
     133,   212,   381,   389,   510,  1018,  1020,  1049,  1050,  1051,
    1052,   548,  1039,  1065,  1066,  1065,  1066,  1042,  1042,  1622,
    1622,  1598,   739,   746,   747,   682,   683,  1189,   537,   539,
     777,   778,   779,   782,  1276,  1622,  1270,  1229,   178,   495,
     484,  1500,   682,  1610,   682,   682,  1416,   611,  1405,  1406,
    1595,   494,   429,   179,  1407,   429,    64,   396,  1715,   626,
    1615,  1264,   939,   681,   133,   636,   950,  1728,  1361,  1384,
    1270,   681,  1270,   681,   682,  1086,  1086,  1368,   682,   485,
    1783,   766,  1264,   743,   744,   681,   682,    83,   272,   655,
    1093,  1097,  1101,  1104,  1618,  1107,   382,  1094,  1096,  1101,
    1103,   918,    50,    50,   162,    50,  1577,   550,   585,  1579,
    1580,  1243,  1247,  1250,  1254,  1008,  1425,   946,  1005,  1003,
    1105,   681,  1000,   681,   681,   681,  1596,  1596,  1027,   922,
     259,   682,   683,   207,   414,   523,   389,  1083,  1044,   682,
     683,  1619,   273,  1052,   273,   381,  1476,   682,  1060,  1030,
      15,   626,   133,    20,  1051,   669,   506,   681,  1762,   551,
     741,   805,  1622,   434,  1191,  1192,  1622,   683,   805,   205,
     178,  1261,  1415,  1260,   200,    18,   200,   109,   220,   377,
     590,  1490,  1491,  1612,  1343,   943,   568,   944,   941,   942,
    1622,   262,   283,    83,    91,   119,   249,   330,   349,   372,
     578,   966,   967,   968,  1520,  1254,  1379,  1379,   203,  1366,
    1366,  1777,   751,  1768,   740,   734,   608,   632,  1092,  1095,
    1100,  1101,  1102,  1619,  1477,   412,  1143,  1144,  1145,  1104,
    1476,  1415,   682,  1143,  1103,   913,  1591,  1591,    50,  1591,
      50,    50,  1580,  1728,  1260,   682,   681,   681,  1004,  1106,
     681,  1106,  1106,  1270,   682,   681,  1622,   137,   626,  1065,
    1591,   133,  1427,  1619,  1622,  1065,   376,   637,  1028,   382,
    1251,   681,  1236,  1237,   655,  1763,  1270,   164,   742,   682,
     683,   778,  1406,   494,   402,   683,  1476,  1569,  1265,  1425,
     682,   683,   952,   588,  1477,  1477,   144,   144,  1477,  1477,
    1477,  1477,   681,   961,   968,   167,   682,   682,   220,   269,
     399,  1370,  1369,  1053,   752,   753,  1719,  1784,  1615,   745,
     682,  1105,  1105,  1143,  1102,  1424,  1618,  1145,  1144,   133,
    1427,  1619,  1622,  1591,  1591,  1591,  1106,  1106,   681,   682,
    1106,   682,   682,   683,   946,    54,   377,   481,   514,  1084,
    1084,   681,  1267,  1019,  1244,  1253,  1254,  1735,  1236,   682,
     506,    55,    66,   293,  1270,  1192,  1491,  1482,  1057,   682,
     940,   942,   681,   954,   956,   951,  1619,  1619,  1477,  1477,
    1427,  1427,  1425,  1624,   569,   962,   963,  1477,    50,    50,
     681,   681,  1778,   142,   805,   203,   152,   682,   682,  1106,
    1092,   682,  1093,  1094,  1270,   682,     5,   133,   381,   389,
     389,   682,  1425,   420,   562,   646,  1021,  1735,  1260,  1260,
     682,   620,  1731,  1733,  1251,    66,   396,    66,  1570,   944,
     681,   955,   956,   957,   336,   953,   956,  1619,  1619,   964,
     682,   683,   989,  1376,  1378,   751,  1264,   746,  1079,  1092,
     682,  1092,   626,   137,   682,    83,   621,  1022,  1023,  1024,
    1260,  1245,  1737,  1248,  1253,  1254,  1735,   396,   396,   495,
    1581,   682,   683,   336,   959,   960,  1273,   965,  1624,   963,
     682,   682,  1779,  1769,  1092,  1084,  1084,  1619,   273,  1024,
    1731,  1732,  1260,  1735,   240,  1575,   956,   683,   958,   966,
     804,   158,  1762,    50,  1578,   960,   682,   494,  1591,   244,
    1582,  1770,   382,   681,  1584,   199,   428,  1764,  1765,   289,
     495,  1583,   682,   689,  1585,  1586,  1612,   514,  1587,  1624,
    1771,  1624,   682,   683,  1588,  1589,  1612,   805,  1586,   683,
    1476,  1589,  1264,  1482,  1265
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 2087 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
              my_yyabort_error((ER_EMPTY_QUERY, MYF(0)));

            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 2096 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 2121 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2200 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "PREPARE..FROM"));
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2225 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->expr_allows_subselect= false; }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2227 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->prepared_stmt_code= (yyvsp[(2) - (2)].item);
            Lex->expr_allows_subselect= true;
          }
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 2235 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 2241 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE IMMEDIATE"));
            Lex->sql_command= SQLCOM_EXECUTE_IMMEDIATE;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2250 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2255 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->expr_allows_subselect= false; }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2257 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE..USING"));
            Lex->expr_allows_subselect= true;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->prepared_stmt_params.push_back((yyvsp[(1) - (1)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2282 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HELP"));
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2287 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2298 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2302 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2316 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2320 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2324 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2328 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       (yyvsp[(3) - (3)].ulong_num), MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2342 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2347 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2351 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2355 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2363 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2367 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2376 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
               my_yyabort_error((ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0),
                                 SLAVE_MAX_HEARTBEAT_PERIOD));

            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2408 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_do_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2444 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_do_domain_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_domain_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2464 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitly specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitly specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, (yyvsp[(3) - (3)].ulonglong_number));
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2483 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2493 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2499 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2505 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2514 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2523 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
              my_yyabort_error((ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME"));
#endif
         }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2536 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->create_info.init();
            if (lex->set_command_with_check(SQLCOM_CREATE_TABLE, (yyvsp[(2) - (5)].num), (yyvsp[(1) - (5)].object_ddl_options) | (yyvsp[(4) - (5)].object_ddl_options)))
               MYSQL_YYABORT;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.default_table_charset= NULL;
            lex->name= null_lex_str;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2556 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.use_default_db_type(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER_THD(thd, ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2574 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (8)].key_type), (yyvsp[(5) - (8)].lex_str), (yyvsp[(6) - (8)].key_alg), (yyvsp[(1) - (8)].object_ddl_options) | (yyvsp[(4) - (8)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2581 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2584 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (7)].key_type), (yyvsp[(5) - (7)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(4) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2591 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2594 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (7)].key_type), (yyvsp[(5) - (7)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(4) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2601 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2603 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2608 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->set_command_with_check(SQLCOM_CREATE_DB, 0, (yyvsp[(1) - (6)].object_ddl_options) | (yyvsp[(3) - (6)].object_ddl_options)))
               MYSQL_YYABORT;
            lex->name= (yyvsp[(4) - (6)].lex_str);
          }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.set((yyvsp[(1) - (1)].object_ddl_options));
            Lex->create_view_mode= ((yyvsp[(1) - (1)].object_ddl_options).or_replace() ? VIEW_CREATE_OR_REPLACE :
                                                      VIEW_CREATE_NEW);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2622 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_USER, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(3) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2631 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_ROLE, (yyvsp[(1) - (6)].object_ddl_options) | (yyvsp[(3) - (6)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2640 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2643 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->set_command(SQLCOM_CREATE_SERVER, (yyvsp[(1) - (1)].object_ddl_options)); }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2645 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2650 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(2) - (3)].object_ddl_options)))
              MYSQL_YYABORT;
            Lex->server_options.reset((yyvsp[(3) - (3)].lex_str));
          }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2657 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->server_options.scheme= (yyvsp[(8) - (12)].lex_str); }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2667 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.username.str == 0);
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.host.str == 0);
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str);
            my_casedn_str(system_charset_info, Lex->server_options.host.str);
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2678 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.db.str == 0);
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.owner.str == 0);
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2688 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.password.str == 0);
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2693 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.socket.str == 0);
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2698 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2705 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            if (lex->add_create_options_with_check((yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2736 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2743 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2749 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2751 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2763 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2772 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, 0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2779 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2787 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2793 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2799 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion= (yyvsp[(3) - (4)].num)
                                    ? Event_parse_data::ON_COMPLETION_DROP
                                    : Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2808 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2810 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
              my_yyabort_error((ER_EVENT_RECURSION_FORBIDDEN, MYF(0)));
              
            if (!make_sp_head(thd, lex->event_parse_data->identifier, TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2861 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 2876 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2904 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2905 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2909 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2910 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2916 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2918 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 2920 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2922 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2924 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2926 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2928 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2933 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2934 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= ! (yyvsp[(1) - (2)].num); }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2939 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2943 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2958 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root);
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2978 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2996 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (1)].lex_str).str));

            sp_variable *spvar= spc->add_variable(thd, (yyvsp[(1) - (1)].lex_str));

            lex->init_last_field(&spvar->field_def, (yyvsp[(1) - (1)].lex_str).str,
                                 thd->variables.collation_database);
            (yyval.spvar)= spvar;
          }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 3010 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_variable *spvar= (yyvsp[(2) - (3)].spvar);

            if (lex->sphead->fill_field_definition(thd, lex, lex->last_field))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

            (yyval.spvar)= spvar;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 3037 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyvsp[(2) - (2)].spvar)->mode=(yyvsp[(1) - (2)].spvar_mode); }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 3041 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 3042 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 3043 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_OUT; }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 3044 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_INOUT; }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 3048 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 3053 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 3059 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 3063 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
              my_yyabort_error((ER_SP_VARCOND_AFTER_CURSHNDLR, MYF(0)));
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
              my_yyabort_error((ER_SP_CURSOR_AFTER_HANDLER, MYF(0)));
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 3081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;

            // get the last variable:
            uint num_vars= pctx->context_var_count();
            uint var_idx= pctx->var_context2runtime(num_vars - 1);
            sp_variable *spvar= pctx->find_variable(var_idx);

            lex->sphead->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
            thd->lex->init_last_field(&spvar->field_def, spvar->name.str,
                                      thd->variables.collation_database);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3097 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null(thd);
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
              bool last= i == num_vars - 1;
            
              if (!spvar)
                MYSQL_YYABORT;
            
              if (!last)
                spvar->field_def= *lex->last_field;

              spvar->default_value= dflt_value_item;
              spvar->field_def.field_name= spvar->name.str;
            
              if (lex->sphead->fill_field_definition(thd, lex,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new (lex->thd->mem_root)
                                 sp_instr_set(lex->sphead->instructions(),
                                               pctx, var_idx, dflt_value_item,
                                               (yyvsp[(4) - (5)].Lex_field_type).field_type(), lex, last);
              if (is == NULL || lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3151 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str));
            if(spc->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new (thd->mem_root) sp_instr_hpush_jump(sp->instructions(),
                   ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(thd, i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(thd, i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 3222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
              my_yyabort_error((ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str));

            i= new (thd->mem_root)
                 sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                ctx->current_cursor_count());
            if (i == NULL || sp->add_instr(i) || ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 3243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 3247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
              my_yyabort_error((ER_SP_BAD_CURSOR_SELECT, MYF(0)));
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 3262 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3263 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3269 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3271 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
              my_yyabort_error((ER_SP_DUP_HANDLER, MYF(0)));

            sp_instr_hpush_jump *i= (sp_instr_hpush_jump *)sp->last_instruction();
            i->add_condition((yyvsp[(1) - (1)].spcondvalue));
          }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3291 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
              my_yyabort_error((ER_WRONG_VALUE, MYF(0), "CONDITION", "0"));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3303 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
              my_yyabort_error((ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3321 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3322 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3327 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 3331 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 3343 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3349 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3358 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;

            /* SIGNAL foo cannot be used outside of stored programs */
            if (lex->spcont == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            if (cond->type != sp_condition_value::SQLSTATE)
              my_yyabort_error((ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0)));
            (yyval.spcondvalue)= cond;
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3387 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3392 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3394 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3399 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3407 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 3416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
              my_yyabort_error((ER_DUP_SIGNAL_SET, MYF(0),
                                Diag_condition_item_names[index].str));
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3432 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3434 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3452 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3458 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3460 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3462 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3464 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3466 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 3468 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3470 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3472 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3474 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3476 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3478 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 3480 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 3485 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3500 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3515 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3517 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3528 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3537 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3543 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3560 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 3569 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3578 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3580 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3589 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3594 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3600 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3617 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3619 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3621 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3623 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3625 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3627 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3629 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3631 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3633 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3635 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3637 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3639 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3641 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3646 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            spc->add_variable(thd, (yyvsp[(1) - (1)].lex_str));
            (yyval.num)= 1;
          }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
            spc->add_variable(thd, (yyvsp[(3) - (3)].lex_str));
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3672 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3673 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3712 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sphead->new_cont_backpatch(NULL);
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3718 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3722 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3730 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            /* "USE db" doesn't work in a procedure */
            if (lex->sql_command == SQLCOM_CHANGE_DB)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "USE"));
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new (thd->mem_root)
                sp_instr_stmt(sp->instructions(), lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3775 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3777 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
              my_yyabort_error((ER_SP_BADRETURN, MYF(0)));

            sp_instr_freturn *i;

            i= new (thd->mem_root)
                 sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                  sp->m_return_field_def.sql_type, lex);
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;
            sp->m_flags|= sp_head::HAS_RETURN;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3800 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;
            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., SP_LAB_ITER),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            n= ctx->diff_handlers(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(hpop);
            }
            n= ctx->diff_cursors(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(cpop);
            }
            i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->push_backpatch(thd, i, lab);  /* Jumping forward */
            sp->add_instr(i);
          }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;

            n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL ||
                  sp->add_instr(hpop))
                MYSQL_YYABORT;
            }
            n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL ||
                  sp->add_instr(cpop))
                MYSQL_YYABORT;
            }
            i= new (thd->mem_root)
              sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3909 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3924 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3929 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3953 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3983 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3985 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, ctx, (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 4001 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0));
          }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 4013 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 4028 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;

            /**
              An example of the CASE statement in use is
            <pre>
            CREATE PROCEDURE proc_19194_simple(i int)
            BEGIN
              DECLARE str CHAR(10);

              CASE i
                WHEN 1 THEN SET str="1";
                WHEN 2 THEN SET str="2";
                WHEN 3 THEN SET str="3";
                ELSE SET str="unknown";
              END CASE;

              SELECT str;
            END
            </pre>
              The actions are used to generate the following code:
            <pre>
            SHOW PROCEDURE CODE proc_19194_simple;
            Pos     Instruction
            0       set str@1 NULL
            1       set_case_expr (12) 0 i@0
            2       jump_if_not 5(12) (case_expr@0 = 1)
            3       set str@1 _latin1'1'
            4       jump 12
            5       jump_if_not 8(12) (case_expr@0 = 2)
            6       set str@1 _latin1'2'
            7       jump 12
            8       jump_if_not 11(12) (case_expr@0 = 3)
            9       set str@1 _latin1'3'
            10      jump 12
            11      set str@1 _latin1'unknown'
            12      stmt 0 "SELECT str"
            </pre>
            */

            Lex->sphead->new_cont_backpatch(NULL);

            /*
              BACKPATCH: Creating target label for the jump to after END CASE
              (instruction 12 in the example)
            */
            Lex->spcont->push_label(thd, empty_lex_str, Lex->sphead->instructions());
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 4081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              BACKPATCH: Resolving forward jump from
              "case_stmt_action_then" to after END CASE
              (jump from instruction 4 to 12, 7 to 12 ... in the example)
            */
            Lex->sphead->backpatch(Lex->spcont->pop_label());

            if ((yyvsp[(3) - (6)].num))
              Lex->spcont->pop_case_expr_id();

            Lex->sphead->do_cont_backpatch();
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 4097 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); /* For expr $2 */ }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 4099 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (case_stmt_action_expr(Lex, (yyvsp[(2) - (2)].item)))
              MYSQL_YYABORT;

            if (Lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 4107 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 4109 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 4124 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 4128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 4140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 4149 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 4153 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 4163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 4172 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new (thd->mem_root)
              sp_instr_error(ip, lex->spcont, ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 4186 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 4187 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 4192 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (3)].lex_str));

            if (lab)
              my_yyabort_error((ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            lex->name= (yyvsp[(1) - (3)].lex_str);
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 4202 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(6) - (6)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(6) - (6)].lex_str).str, (yyvsp[(5) - (6)].splabel)->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(6) - (6)].lex_str).str));
            }
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 4213 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 4217 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 4222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 4228 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 4232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->push_label(thd, lex->name,
                                                   lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 4243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(2) - (4)].spblock).hndlrs)
            {
              i= new (thd->mem_root)
                sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(2) - (4)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (4)].spblock).curs)
            {
              i= new (thd->mem_root)
                sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(2) - (4)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
            (yyval.splabel) = lex->spcont->pop_label();
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 4273 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 4287 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[(1) - (2)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(thd, i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 4303 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 4318 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 4320 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[(4) - (6)].item), lab->ip, lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 4338 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            if ((yyvsp[(1) - (1)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(1) - (1)].lex_str).str,
                                lab->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            }
          }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 4351 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            DBUG_ASSERT(lab->name.length == 0);
          }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 4360 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 4365 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 4367 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 4373 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 4375 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 4380 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 4385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 4391 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 4393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 4400 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 4402 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 4408 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 4413 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 4415 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 4420 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 4422 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 4424 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 4458 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 4460 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 4470 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 4476 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4499 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4593 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4601 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4617 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4643 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4653 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4661 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4669 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4685 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4693 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4701 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4709 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP"));
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4719 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT"));
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4729 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE, MYF(0),
                                "STORAGE ENGINE"));
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4745 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT"));
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4759 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4761 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                  my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
              }
              if (prefix_number >> 31)
                my_yyabort_error((ER_SIZE_OVERFLOW_ERROR, MYF(0)));
              number= prefix_number << text_shift_number;
            }
            else
              my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
            (yyval.ulonglong_number)= number;
          }
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4803 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4804 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4805 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4813 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4813 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4815 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4815 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4817 "/home/buildbot/git/sql/sql_yacc.yy"
    {

            Lex->create_info.add(DDL_options_st::OPT_LIKE);
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4830 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 4831 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 4835 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 4842 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Select->set_braces(0);
            Select->set_with_clause((yyvsp[(1) - (5)].with_clause));
          }
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 4849 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_with_clause((yyvsp[(1) - (5)].with_clause));
          }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4854 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4854 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4856 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4856 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4861 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4897 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4921 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
              my_yyabort_error((ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                                "--skip-partition"));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), "partitioning",
                              "--with-plugin-partition"));
#endif
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4936 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(thd, ER_PARTITION_ENTRY_ERROR);
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4948 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4953 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->safe_to_cache_query= 1; }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4959 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4966 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4967 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4969 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4971 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4973 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4975 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4979 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 4981 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 4986 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 4988 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 5004 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 5005 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 5009 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 5010 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 5015 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of partition fields"));
          }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 5031 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 5041 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr(thd, (yyvsp[(2) - (5)].simple_string) + 1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 5052 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr(thd, (yyvsp[(2) - (5)].simple_string) + 1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 5060 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 5062 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "partitions"));

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 5074 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 5076 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 5077 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 5080 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 5085 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 5089 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 5090 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 5095 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of subpartition fields"));
          }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 5110 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 5121 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 5123 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "subpartitions"));
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 5135 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "RANGE"));
            if (part_info->part_type == LIST_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "LIST"));
          }
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 5145 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_PART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 5166 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 5167 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 5172 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new (thd->mem_root) partition_element();

            if (!p_elem ||
                 part_info->partitions.push_back(p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 5192 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 5197 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 5208 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
              if (part_info->part_type == LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 5224 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 5236 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 5238 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 5250 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 5252 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "DEFAULT"));
            }
            else
              part_info->part_type= LIST_PARTITION;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
         }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 5276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 5297 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 5302 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val(thd))
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 5331 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(thd, ER_ROW_SINGLE_PARTITION_FIELD_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 5342 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 5343 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 5348 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 5359 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 5361 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 5384 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 5385 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 5390 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(thd, ER_MAXVALUE_IN_VALUES_IN);
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 5403 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 5423 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 5437 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 5462 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 5463 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 5468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new (thd->mem_root)
                                           partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 5501 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 5506 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 5514 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 5515 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 5519 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 5520 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 5525 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 5527 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 5533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5539 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5541 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5543 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5545 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5547 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5549 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_with_clause((yyvsp[(1) - (5)].with_clause));
          }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5580 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5597 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5607 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5608 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5612 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5613 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5617 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5618 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5622 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5623 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5628 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
          }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5632 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5639 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).init();
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5643 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_NOT_EXISTS);
          }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5650 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).init();
          }
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5654 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_OR_REPLACE);
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5682 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5687 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5692 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5702 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5707 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5712 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5727 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5733 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5748 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5753 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5768 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5774 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5792 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5797 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5802 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5807 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5822 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5826 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5855 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5865 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5867 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5869 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5871 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5877 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5895 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5909 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5918 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[(4) - (4)].charset)))
              MYSQL_YYABORT;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5926 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5943 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                                            thd->lex->create_info.tmp_table());

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
                my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER_THD(thd, ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5964 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str), false)))
              (yyval.db_type)= plugin_hton(plugin);
            else
              my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5974 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5975 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5976 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5977 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5978 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5979 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5980 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5984 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5985 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5986 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5990 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5991 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5992 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5993 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5999 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 6010 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 6017 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.create_field)= (yyvsp[(1) - (2)].create_field);  (yyval.create_field)->check_constraint= (yyvsp[(2) - (2)].virtual_column); }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 6019 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.create_field)= (yyvsp[(1) - (2)].create_field); }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 6024 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].key_alg), (yyvsp[(2) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 6029 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 6031 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[(3) - (5)].lex_str), (yyvsp[(5) - (5)].key_alg), (yyvsp[(2) - (5)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 6036 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 6038 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(1) - (4)].key_type), (yyvsp[(4) - (4)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 6043 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 6045 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(1) - (4)].key_type), (yyvsp[(4) - (4)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 6050 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 6054 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(2) - (5)].key_type), (yyvsp[(4) - (5)].lex_str).str ? (yyvsp[(4) - (5)].lex_str) : (yyvsp[(1) - (5)].lex_str), (yyvsp[(5) - (5)].key_alg), (yyvsp[(3) - (5)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 6059 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 6062 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(2) - (6)].key_type), (yyvsp[(4) - (6)].lex_str).str ? (yyvsp[(4) - (6)].lex_str) : (yyvsp[(1) - (6)].lex_str), (yyvsp[(6) - (6)].key_alg), (yyvsp[(3) - (6)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 6067 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 6069 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->check_add_key((yyvsp[(4) - (5)].object_ddl_options)) ||
               !(Lex->last_key= (new (thd->mem_root)
                                 Key(Key::MULTIPLE, (yyvsp[(1) - (5)].lex_str).str ? (yyvsp[(1) - (5)].lex_str) : (yyvsp[(5) - (5)].lex_str),
                                     HA_KEY_ALG_UNDEF, true, (yyvsp[(4) - (5)].object_ddl_options)))))
              MYSQL_YYABORT;
            Lex->option_list= NULL;
          }
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 6078 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= (new (thd->mem_root)
                       Foreign_key((yyvsp[(5) - (10)].lex_str).str ? (yyvsp[(5) - (10)].lex_str) : (yyvsp[(1) - (10)].lex_str),
                                   lex->last_key->columns,
                                   (yyvsp[(10) - (10)].table)->db,
                                   (yyvsp[(10) - (10)].table)->table,
                                   lex->ref_list,
                                   lex->fk_delete_opt,
                                   lex->fk_update_opt,
                                   lex->fk_match_option,
                                    (yyvsp[(4) - (10)].object_ddl_options)));
            if (key == NULL)
              MYSQL_YYABORT;
            /*
              handle_if_exists_options() expectes the two keys in this order:
              the Foreign_key, followed by its auto-generated Key.
            */
            lex->alter_info.key_list.push_back(key, thd->mem_root);
            lex->alter_info.key_list.push_back(Lex->last_key, thd->mem_root);
            lex->option_list= NULL;

            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 6107 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->add_constraint(&(yyvsp[(1) - (2)].lex_str), (yyvsp[(2) - (2)].virtual_column), FALSE);
         }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 6113 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.virtual_column)= (Virtual_column_info*) 0; }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 6114 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.virtual_column)= (yyvsp[(1) - (1)].virtual_column);}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 6119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[(3) - (4)].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 6131 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 6132 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 6136 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 6141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Create_field *f= new (thd->mem_root) Create_field();

            if (check_string_char_length(&(yyvsp[(1) - (1)].lex_str), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(1) - (1)].lex_str).str));

            if (!f)
              MYSQL_YYABORT;

            lex->init_last_field(f, (yyvsp[(1) - (1)].lex_str).str, NULL);
            (yyval.create_field)= f;
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 6156 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            (yyval.create_field)= (yyvsp[(2) - (3)].create_field);

            if ((yyval.create_field)->check(thd))
              MYSQL_YYABORT;

            lex->alter_info.create_list.push_back((yyval.create_field), thd->mem_root);

            (yyval.create_field)->create_if_not_exists= Lex->check_exists;
            if ((yyval.create_field)->flags & PRI_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[(1) - (3)].lex_str), Key::PRIMARY, Lex->check_exists);
            else if ((yyval.create_field)->flags & UNIQUE_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[(1) - (3)].lex_str), Key::UNIQUE, Lex->check_exists);
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 6174 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->set_last_field_type((yyvsp[(1) - (1)].Lex_field_type)); }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 6176 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_field_type_st type;
            type.set(MYSQL_TYPE_LONGLONG);
            Lex->set_last_field_type(type);
            Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG
                                     | UNSIGNED_FLAG | UNIQUE_KEY_FLAG;
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 6187 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 6188 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 6192 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 6200 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->last_field->vcol_info= (yyvsp[(3) - (3)].virtual_column);
           Lex->last_field->flags&= ~NOT_NULL_FLAG; // undo automatic NOT NULL for timestamps
         }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 6208 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 6209 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 6214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 6218 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 6222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 6226 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 6232 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 6233 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 6237 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 6243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 6249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 6254 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 6259 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            MYSQL_YYABORT_UNLESS(Lex->parse_vcol_expr);
          }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 6268 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Virtual_column_info *v= add_virtual_expression(thd, (yyvsp[(3) - (3)].item));
            if (!v)
              MYSQL_YYABORT;
            Lex->last_field->vcol_info= v;
          }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 6278 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect(thd, (yyvsp[(1) - (1)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 6285 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (3)].item_list)->push_front((yyvsp[(1) - (3)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[(3) - (3)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 6295 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[(2) - (3)].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 6311 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.virtual_column)= add_virtual_expression(thd, (yyvsp[(1) - (1)].item))))
              MYSQL_YYABORT;
          }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 6318 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set((yyvsp[(1) - (3)].field_type), (yyvsp[(2) - (3)].simple_string)); }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 6319 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set((yyvsp[(1) - (3)].field_type), (yyvsp[(2) - (3)].Lex_length_and_dec)); }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 6321 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT, (yyvsp[(2) - (3)].Lex_length_and_dec));
            if ((yyvsp[(2) - (3)].Lex_length_and_dec).length() && !(yyvsp[(2) - (3)].Lex_length_and_dec).dec())
            {
              int err;
              ulonglong tmp_length= my_strtoll10((yyvsp[(2) - (3)].Lex_length_and_dec).length(), NULL, &err);
              if (err || tmp_length > PRECISION_FOR_DOUBLE)
                my_yyabort_error((ER_WRONG_FIELD_SPEC, MYF(0),
                                  Lex->last_field->field_name));
              if (tmp_length > PRECISION_FOR_FLOAT)
                (yyval.Lex_field_type).set(MYSQL_TYPE_DOUBLE);
              else
                (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT);
            }
          }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 6337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_BIT, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 6341 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6349 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[(2) - (3)].simple_string));
          }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[(2) - (3)].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[(3) - (3)].num));
          }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6358 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6363 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[(2) - (3)].simple_string));
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6367 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[(2) - (3)].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[(3) - (3)].num));
          }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6377 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (3)].simple_string))
            {
              errno= 0;
              ulong length= strtoul((yyvsp[(2) - (3)].simple_string), NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER_THD(thd, ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.Lex_field_type).set(MYSQL_TYPE_YEAR, (yyvsp[(2) - (3)].simple_string));
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6395 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_DATE); }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6397 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_TIME2 : MYSQL_TYPE_TIME, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                     MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[(2) - (2)].simple_string));
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                Unless --explicit-defaults-for-timestamp is given.
              */
              if (!opt_explicit_defaults_for_timestamp)
                Lex->last_field->flags|= NOT_NULL_FLAG;
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ? MYSQL_TYPE_TIMESTAMP2
                                                 : MYSQL_TYPE_TIMESTAMP, (yyvsp[(2) - (2)].simple_string));
            }
          }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 6417 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6420 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB);
          }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 6425 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->last_field->geom_type= (yyvsp[(1) - (3)].geom_type);
            (yyval.Lex_field_type).set(MYSQL_TYPE_GEOMETRY, (yyvsp[(2) - (3)].Lex_length_and_dec));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6441 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6446 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB);
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 6451 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 6456 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6458 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB); }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 6460 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[(2) - (3)].simple_string)); }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6462 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6464 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB); }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6466 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[(2) - (3)].Lex_length_and_dec));}
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6468 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[(2) - (3)].Lex_length_and_dec));}
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6470 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[(2) - (3)].Lex_length_and_dec));}
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6472 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_ENUM); }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6474 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_SET); }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6476 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6480 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_GEOMETRY; }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 6481 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6482 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_POINT; }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6483 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTIPOINT; }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6484 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_LINESTRING; }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6485 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTILINESTRING; }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6486 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_POLYGON; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6487 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 6491 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6495 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6496 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 6500 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 6501 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 6505 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6506 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6507 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6508 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6509 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6513 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_LONG; }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6514 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_TINY; }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6515 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_SHORT; }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6516 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_INT24; }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6517 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_LONGLONG; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6527 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6529 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6534 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->srid= 0; }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6537 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->srid=atoi((yyvsp[(3) - (3)].lex_str).str);
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6543 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set(0, 0);  }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6544 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set((yyvsp[(1) - (1)].simple_string), 0); }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6545 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec)= (yyvsp[(1) - (1)].Lex_length_and_dec); }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6549 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set((yyvsp[(2) - (5)].lex_str).str, (yyvsp[(4) - (5)].lex_str).str); }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6553 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6554 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6558 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6559 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6563 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6564 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= UNSIGNED_FLAG;}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6565 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6569 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6570 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6571 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6572 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6575 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (char*) 0; /* use default length */ }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6576 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6579 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (char*) "1"; }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6580 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6583 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set(0, 0); }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6584 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec)= (yyvsp[(1) - (1)].Lex_length_and_dec); }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6588 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6589 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6593 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6598 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags&= ~ NOT_NULL_FLAG; }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6599 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->default_value= (yyvsp[(2) - (2)].virtual_column); }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6601 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->last_field->on_update= item;
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6607 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6609 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname));
            Lex->last_field->charset= (yyvsp[(2) - (2)].charset);
          }
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6625 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= NOT_NULL_FLAG; }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6627 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6639 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6644 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6646 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6654 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6662 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->last_field->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->last_field->option_list, &Lex->option_list_last);
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.Lex_field_type)= (yyvsp[(1) - (2)].Lex_field_type);

          if ((yyvsp[(2) - (2)].charset))
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          Lex->set_last_field_type((yyvsp[(1) - (2)].Lex_field_type));
        }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6690 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6691 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6696 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6700 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6704 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6705 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6709 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6710 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6715 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6720 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6724 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6725 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6730 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6737 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6738 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6742 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6743 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6747 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6748 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6752 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6753 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_latin1; }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6755 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2"));
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6762 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(NULL, false); }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6763 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(&my_charset_bin, false); }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6764 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation((yyvsp[(1) - (2)].charset), (yyvsp[(2) - (2)].num)); }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6765 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(NULL, true); }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6766 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation((yyvsp[(2) - (2)].charset), true); }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6770 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6771 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(thd, ER_SYNTAX_ERROR);
            MYSQL_YYABORT;
          }
        }
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6784 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6788 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6789 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6793 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6796 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6797 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6798 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6799 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6804 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6818 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6819 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6833 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6834 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6838 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6839 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6853 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6860 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6866 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key, thd->mem_root);
          }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6873 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key, thd->mem_root);
          }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6885 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 6887 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6889 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6891 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6896 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6902 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6908 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6915 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6930 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_RESTRICT; }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6931 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_CASCADE; }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6932 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_SET_NULL; }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6933 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_NO_ACTION; }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6934 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_SET_DEFAULT; }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6938 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6939 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6943 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6944 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6948 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6953 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6954 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6955 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6959 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6960 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6964 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6980 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6981 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6985 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6986 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6990 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 6991 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 7010 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 7011 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 7015 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
    break;

  case 939:

/* Line 1455 of yacc.c  */
#line 7016 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 7017 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 7021 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 7023 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 7028 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 7030 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 7032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 7040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 7048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 7054 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 7072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->last_key->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
              my_yyabort_error((ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 7081 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 7082 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 7083 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 7088 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_key->columns.push_back((yyvsp[(3) - (4)].key_part), thd->mem_root);
          }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 7092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_key->columns.push_back((yyvsp[(1) - (2)].key_part), thd->mem_root);
          }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 7099 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 7105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
              my_yyabort_error((ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str));
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 7116 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 7117 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 7121 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 7122 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 7127 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->interval_list.push_back((yyvsp[(1) - (1)].string), thd->mem_root); }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 7129 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->interval_list.push_back((yyvsp[(3) - (3)].string), thd->mem_root); }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 7137 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->name= null_lex_str;
            Lex->only_view= FALSE;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->select_lex.init_order();
            Lex->create_info.init();
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 7151 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 7161 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 7171 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 7176 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 7185 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "DATABASE"));
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 7193 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 7201 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 7208 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 7216 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 7223 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 7231 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 979:

/* Line 1455 of yacc.c  */
#line 7238 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 7247 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 7249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(5) - (5)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_begin= (yyvsp[(3) - (5)].simple_string);
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 7270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(7) - (11)].num) || (yyvsp[(8) - (11)].num) || (yyvsp[(9) - (11)].num) || (yyvsp[(10) - (11)].num) || (yyvsp[(11) - (11)].num)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 7284 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 7289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 7294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 7299 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 7304 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.reset((yyvsp[(3) - (3)].lex_str));
          }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 7308 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 7312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.set((yyvsp[(2) - (7)].object_ddl_options));
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 7319 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 7320 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 7321 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 7322 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 7326 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 7328 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 7339 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 7340 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 7344 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 7345 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 7351 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
            DBUG_ASSERT(!Lex->if_exists());
            Lex->create_info.add((yyvsp[(3) - (4)].object_ddl_options));
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7388 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7408 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7419 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7431 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7443 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7450 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7462 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7488 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7495 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            DBUG_ASSERT(!Lex->create_info.if_not_exists());
            lex->create_info.set((yyvsp[(3) - (4)].object_ddl_options));
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7518 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7524 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7536 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7551 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7566 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7567 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7572 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str,
                                                          thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7593 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7601 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[(2) - (3)].create_field)->after= (yyvsp[(3) - (3)].const_simple_string);
          }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7606 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7611 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7616 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
	  }
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
           Lex->add_constraint(&(yyvsp[(6) - (7)].lex_str), (yyvsp[(7) - (7)].virtual_column), TRUE);
         }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7626 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[(5) - (6)].create_field)->change= (yyvsp[(4) - (6)].lex_str).str;
            (yyvsp[(5) - (6)].create_field)->after= (yyvsp[(6) - (6)].const_simple_string);
          }
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[(4) - (5)].create_field)->change= (yyvsp[(4) - (5)].create_field)->field_name;
            (yyvsp[(4) - (5)].create_field)->after= (yyvsp[(5) - (5)].const_simple_string);
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7651 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::CHECK_CONSTRAINT,
                                        (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_CHECK_CONSTRAINT;
          }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7662 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, primary_key_name,
                                        FALSE));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7693 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7699 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7705 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new (thd->mem_root) Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].virtual_column));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1055:

/* Line 1455 of yacc.c  */
#line 7714 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= (new (thd->mem_root)
                               Alter_column((yyvsp[(3) - (5)].lex_str).str, (Virtual_column_info*) 0));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1056:

/* Line 1455 of yacc.c  */
#line 7724 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str));
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7740 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname));
            if (Lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[(5) - (5)].charset)))
              MYSQL_YYABORT;
            Lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7754 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7764 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7768 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7785 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7790 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7798 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7803 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7810 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7811 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7815 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7816 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7820 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7834 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7836 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7843 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7844 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7845 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7849 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.const_simple_string)= NULL; }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7851 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.const_simple_string)= (yyvsp[(2) - (2)].lex_str).str;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7856 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.const_simple_string)= first_keyword;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7863 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7864 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7865 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7866 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7871 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7878 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7880 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
            /* If you change this code don't forget to update STOP SLAVE too */
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7886 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7895 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7905 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7921 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7925 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7932 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7936 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7943 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7947 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7951 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7957 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7959 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7968 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7969 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7970 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7974 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
               my_yyabort_error((ER_BAD_SLAVE_UNTIL_COND, MYF(0)));
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7985 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7997 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 8004 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 8008 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 8009 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 8010 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 8015 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 8020 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 8030 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 8040 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 8041 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 8045 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 8046 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 8050 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 8051 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 8052 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 8056 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 8057 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 8062 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 8072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 8092 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 8094 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 8101 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 8103 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 8106 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 8108 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->column_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 8119 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 8121 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->index_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 8133 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 8135 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 8140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 8148 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 8155 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 8162 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back((LEX_STRING*)
                                        thd->memdup(&str, sizeof(LEX_STRING)),
                                        thd->mem_root);
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 8172 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 8180 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->only_view= TRUE; }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 8184 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 8194 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "CHECK"));
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 8206 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 8207 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 8211 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 8212 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 8216 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 8217 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 8218 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 8219 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 8220 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 8221 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 8225 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 8226 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 8231 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 8241 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 8251 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 8252 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 8253 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 8258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 8262 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8271 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8291 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8304 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8308 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8327 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8346 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8347 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8352 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8358 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8383 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8400 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8409 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8415 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8416 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8426 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->current_select->set_with_clause((yyvsp[(1) - (2)].with_clause));
          }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8448 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8464 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8480 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8489 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8497 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(true);
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8505 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8509 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex); }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8539 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8548 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8557 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8601 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8652 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT"));
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE"));

            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE"));

            Lex->safe_to_cache_query=1;
            Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
          }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8704 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8724 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(thd, &thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 8738 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 8743 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
                my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str));
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 8764 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_start();
          }
    break;

  case 1290:

/* Line 1455 of yacc.c  */
#line 8770 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 8782 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 8783 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 8784 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8785 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8786 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8790 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8791 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 8792 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1300:

/* Line 1455 of yacc.c  */
#line 8796 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 8797 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 8798 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 8802 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 8803 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 8809 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item), thd->mem_root);
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item), thd->mem_root);
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item)= new (thd->mem_root) Item_cond_or(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 8860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item)= new (thd->mem_root) Item_func_xor(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 8867 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item), thd->mem_root);
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item), thd->mem_root);
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item)= new (thd->mem_root) Item_cond_and(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 8910 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 8916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 8922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 8928 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 8934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 8940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 8946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 8956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 8962 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 8968 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 8974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 8980 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator(thd, (yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 8990 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 8996 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 9005 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 9011 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item), thd->mem_root);
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_in(thd, *(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 9019 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 9025 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item), thd->mem_root);
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item), thd->mem_root);
            Item_func_in *item= new (thd->mem_root) Item_func_in(thd, *(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 9034 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between(thd, (yyvsp[(1) - (5)].item), (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 9040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between(thd, (yyvsp[(1) - (6)].item), (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
    break;

  case 1330:

/* Line 1455 of yacc.c  */
#line 9048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(thd, item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 9058 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[(1) - (4)].item), (yyvsp[(3) - (4)].item), (yyvsp[(4) - (4)].item),
                                                   Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 9065 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 9073 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 9079 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex(thd, (yyvsp[(1) - (4)].item), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 9092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 9098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 9104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 9110 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 9116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 9122 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 9128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 9134 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 9140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 9146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 9152 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 9158 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 9164 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 9170 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 9199 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 9200 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 9201 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 9202 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 9203 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 9204 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 9208 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 9209 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 9214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_NULL); /* automatic type */
            Lex->charset= NULL;
	  }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 9218 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(2) - (2)].Lex_dyncol_type); }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 9222 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(1) - (1)].Lex_dyncol_type); Lex->charset= NULL; }
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 9223 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(1) - (1)].Lex_dyncol_type); Lex->charset= NULL; }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 9224 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(1) - (1)].Lex_dyncol_type); }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 9228 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_INT); }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 9229 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_UINT);  }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 9230 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE);  }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9231 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9232 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9233 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DECIMAL, (yyvsp[(2) - (2)].Lex_length_and_dec)); }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9237 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATE); }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9238 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_TIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9239 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATETIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9244 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= thd->variables.collation_connection; }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9246 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9250 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
            Lex->charset= national_charset_info;
          }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].Lex_dyncol_type).dyncol_type();
     (yyval.dyncol_def)->cs= lex->charset;
     if ((yyvsp[(4) - (4)].Lex_dyncol_type).length())
       (yyval.dyncol_def)->len= strtoul((yyvsp[(4) - (4)].Lex_dyncol_type).length(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if ((yyvsp[(4) - (4)].Lex_dyncol_type).dec())
       (yyval.dyncol_def)->frac= strtoul((yyvsp[(4) - (4)].Lex_dyncol_type).dec(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9280 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def), thd->mem_root);
       }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9287 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def), thd->mem_root);
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9328 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item_param); }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9333 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9340 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect(thd, (yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9346 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[(3) - (4)].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[(2) - (4)].lex_str));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1400:

/* Line 1455 of yacc.c  */
#line 9370 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item), thd->mem_root);
            Item_func_match *i1= new (thd->mem_root) Item_func_match(thd, *(yyvsp[(2) - (7)].item_list),
                                                                     (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(thd, i1);
            (yyval.item)= i1;
          }
    break;

  case 1401:

/* Line 1455 of yacc.c  */
#line 9380 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].Lex_cast_type).type(), (yyvsp[(5) - (6)].Lex_cast_type).length(), (yyvsp[(5) - (6)].Lex_cast_type).dec(),
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:

/* Line 1455 of yacc.c  */
#line 9388 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(thd, *(yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9394 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].Lex_cast_type).type(), (yyvsp[(5) - (6)].Lex_cast_type).length(), (yyvsp[(5) - (6)].Lex_cast_type).dec(),
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:

/* Line 1455 of yacc.c  */
#line 9401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9407 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_splocal *il= (yyvsp[(3) - (4)].item)->get_item_splocal();
            if (il)
              my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str));
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9417 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(thd, Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9428 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string(thd, (yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation(thd, (yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9438 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9440 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9453 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item)->neg(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9463 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9469 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9476 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(5) - (5)].item), (yyvsp[(2) - (5)].item), (yyvsp[(3) - (5)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9491 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9497 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9503 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9512 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9521 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9527 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9539 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert(thd, (yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].item), (yyvsp[(7) - (10)].item), (yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9545 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item), thd->mem_root);
            list->push_front((yyvsp[(3) - (6)].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item), thd->mem_root);
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 9570 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 9576 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 9582 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 9588 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 9594 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 9600 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast(thd, (yyvsp[(3) - (4)].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 9607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast(thd, (yyvsp[(3) - (4)].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 9614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 9620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 9626 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 9632 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 9638 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1439:

/* Line 1455 of yacc.c  */
#line 9644 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1440:

/* Line 1455 of yacc.c  */
#line 9650 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 9656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 9662 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(5) - (6)].item), (yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1443:

/* Line 1455 of yacc.c  */
#line 9668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 9676 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 9697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 9704 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 9710 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 9717 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 9725 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 9732 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 9738 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract(thd, (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 9744 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format(thd, (yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 9750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 9757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_locate(thd, (yyvsp[(5) - (6)].item), (yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 9763 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 9770 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 9776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 9782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 9788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 9794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 9800 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local(thd, (yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 9818 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(7) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(3) - (8)].interval_time_st), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 9824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff(thd, (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item), (yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 9830 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 9837 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 9844 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 9852 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 9859 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 9866 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 9873 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 9880 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].Lex_cast_type).type(),
                                        (yyvsp[(7) - (8)].Lex_cast_type).length(), (yyvsp[(7) - (8)].Lex_cast_type).dec(),
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 9897 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 9903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 9909 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(thd, *(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 9915 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 9921 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 9928 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 9934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 9940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 9949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_back((yyvsp[(3) - (4)].item), thd->mem_root);

            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *list);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 9960 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].item_list)->push_back((yyvsp[(5) - (6)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *(yyvsp[(3) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 9967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 9973 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 9979 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root)
              Item_func_password(thd, (yyvsp[(3) - (4)].item), Item_func_password::OLD);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 9986 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item* i1;
            i1= new (thd->mem_root) Item_func_password(thd, (yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 9994 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_quarter(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 10000 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 10006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 10012 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 10018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 10026 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 10032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 10038 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 10044 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 10050 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, (yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 10058 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_char_typecast(thd, (yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num),
                                                               &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, item, 0, (yyvsp[(6) - (7)].ulong_num),
                                        MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 10070 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num),
                                                            (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 10077 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 10092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_precise_rel(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                 Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 10098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 10105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 10112 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 10119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 10126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 10133 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item)));
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 10137 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 10156 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 10175 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 10228 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str));
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 10266 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 10268 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 10272 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 10273 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 10277 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 10278 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 10282 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 10283 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 10288 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 10295 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 10303 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 10330 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 10336 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 10342 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 10348 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 10354 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 10360 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int(thd, (int32) 0L, 1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 10369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 10375 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 10377 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 10379 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, *(yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 10385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 10396 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 10408 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 10414 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 10420 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 10426 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 10432 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 10438 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 10444 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 10450 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 10454 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(thd, Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 10469 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].lex_str_ptr));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10478 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (Select->add_window_spec(thd, lex->win_ref,
                                        Select->group_list,
                                        Select->order_list,
                                        lex->win_frame))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[(1) - (3)].item),
                                                      thd->lex->win_spec); 
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10498 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            ((Item_sum *) (yyvsp[(1) - (1)].item))->mark_as_window_func_sum_expr();
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10505 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_row_number(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10512 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10519 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_dense_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10526 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_percent_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_cume_dist(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10540 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_ntile(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10547 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_first_value(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10554 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_last_value(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_nth_value(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10568 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[(3) - (4)].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10579 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10586 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[(3) - (4)].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10597 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10606 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10627 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item, thd->mem_root);
          }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10645 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10660 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10661 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 10666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10671 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10681 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10683 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10688 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10705 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[(2) - (2)].simple_string)); Lex->charset= &my_charset_bin; }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10707 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= thd->variables.collation_connection; }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10709 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[(2) - (4)].simple_string)); }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= national_charset_info;
            (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[(2) - (2)].simple_string), 0);
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10715 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type)= (yyvsp[(1) - (1)].Lex_cast_type); Lex->charset= NULL; }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10716 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type)= (yyvsp[(1) - (1)].Lex_cast_type); Lex->charset= NULL; }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10720 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10721 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10722 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10723 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10724 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10725 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DECIMAL, (yyvsp[(2) - (2)].Lex_length_and_dec)); }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10726 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DOUBLE, (yyvsp[(2) - (2)].Lex_length_and_dec));  }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10730 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATE); }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10731 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_TIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10732 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATETIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10736 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10737 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10749 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10756 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10757 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10762 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10776 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10777 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10781 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10782 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10787 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item), thd->mem_root);
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item), thd->mem_root);
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10795 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item), thd->mem_root);
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10805 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)= (yyvsp[(1) - (1)].table_list); }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10807 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(thd)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10818 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10829 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10830 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10836 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10838 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 10858 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 10861 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 10869 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on(thd, (yyvsp[(3) - (6)].table_list), (yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10877 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10881 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10896 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10904 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            add_join_on(thd, (yyvsp[(5) - (8)].table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 10912 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 10916 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 10922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 10932 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 10940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on(thd, (yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 10949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 10953 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 10960 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 10971 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 10972 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 10973 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 10977 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 10978 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 10986 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 10992 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 11011 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 11016 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 11048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new (thd->mem_root) Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 11114 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= (yyvsp[(2) - (8)].select_lex);
            SELECT_LEX_UNIT *unit= (yyvsp[(5) - (8)].select_lex)->master_unit();
            Table_ident *ti= new (thd->mem_root) Table_ident(unit);
            if (ti == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].select_lex)->set_with_clause((yyvsp[(4) - (8)].with_clause));
            lex->current_select= sel;
            if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                             ti, (yyvsp[(8) - (8)].lex_str_ptr), 0,
                                             TL_READ, MDL_SHARED_READ)))
              MYSQL_YYABORT;
            sel->add_joined_table((yyval.table_list));
          }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 11153 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 11161 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 11175 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->pop_context(); }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 11176 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->pop_context(); }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 11177 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->pop_context(); }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 11188 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_braces(0);
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 11195 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 11203 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 11211 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $2 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (2)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(2) - (2)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (2)].table_list) && (yyval.table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 11233 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (3)].num))
              Select->set_braces(1);
            (yyval.table_list)= NULL;
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 11241 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 11258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 11265 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 11270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 11278 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            TABLE_LIST *embedding= lex->current_select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 11289 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 11290 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 11295 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 11298 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 11299 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 11300 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 11304 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 11305 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 11310 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 11315 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 11328 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 11332 "/home/buildbot/git/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 11337 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 11338 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 11343 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 11345 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1691:

/* Line 1455 of yacc.c  */
#line 11355 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new (thd->mem_root) List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s, thd->mem_root);
          }
    break;

  case 1692:

/* Line 1455 of yacc.c  */
#line 11366 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s, thd->mem_root);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 11378 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 11379 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11380 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11381 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 11382 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11383 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11384 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 11385 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 11386 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 11387 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 11388 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11389 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11393 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11394 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 11395 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 11396 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11397 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11398 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11399 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11400 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11401 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11405 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11406 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 11407 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11408 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11418 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11420 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) thd->memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11433 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11435 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11439 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 11451 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11455 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 11466 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 11471 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string_ascii(thd, "", 0) :
                 new (thd->mem_root) Item_string_ascii(thd, "\\", 1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11492 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 11494 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11498 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 11500 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                                "global union parameters"));
            lex->current_select->olap= CUBE_TYPE;

            my_yyabort_error((ER_NOT_SUPPORTED_YET, MYF(0), "CUBE"));
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11517 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                                "global union parameters"));
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11539 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11542 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11552 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (Select->add_window_def(thd, (yyvsp[(1) - (3)].lex_str_ptr), lex->win_ref,
                                       Select->group_list,
                                       Select->order_list,
                                       lex->win_frame ))
              MYSQL_YYABORT;
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11564 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->prepare_add_window_spec(thd); }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11571 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11573 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->win_ref= (LEX_STRING *) thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING));
            if (thd->lex->win_ref == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11580 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11585 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11590 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11592 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->win_frame=
              new (thd->mem_root) Window_frame((yyvsp[(1) - (3)].frame_units),
                                               lex->frame_top_bound,
                                               lex->frame_bottom_bound,
                                               (yyvsp[(3) - (3)].frame_exclusion));
            if (lex->win_frame == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11605 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_units)= Window_frame::UNITS_ROWS; }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11606 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_units)= Window_frame::UNITS_RANGE; }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11611 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[(1) - (1)].window_frame_bound);
            lex->frame_bottom_bound=
              new (thd->mem_root)
                Window_frame_bound(Window_frame_bound::CURRENT, NULL);
            if (lex->frame_bottom_bound == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11621 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[(2) - (4)].window_frame_bound);
            lex->frame_bottom_bound= (yyvsp[(4) - (4)].window_frame_bound);
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root) 
                  Window_frame_bound(Window_frame_bound::PRECEDING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11637 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::CURRENT, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11644 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::PRECEDING, (yyvsp[(1) - (2)].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11653 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.window_frame_bound)= (yyvsp[(1) - (1)].window_frame_bound); }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11662 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, (yyvsp[(1) - (2)].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11671 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11673 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_CURRENT_ROW; }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11675 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_GROUP; }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11677 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_TIES; }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11679 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11715 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE &&
                !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(thd))
                MYSQL_YYABORT;
            }
            if (sel->master_unit()->is_union() && !sel->braces)
            {
               /*
                 At this point we don't know yet whether this is the last
                 select in union or not, but we move ORDER BY to
                 fake_select_lex anyway. If there would be one more select
                 in union mysql_new_select will correctly throw error.
               */
               DBUG_ASSERT(sel->master_unit()->fake_select_lex);
               lex->current_select= sel->master_unit()->fake_select_lex;
             }
          }
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11758 "/home/buildbot/git/sql/sql_yacc.yy"
    {

          }
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11765 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11767 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11771 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11772 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11773 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11777 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11778 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11783 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            if (sel->master_unit()->is_union() && !sel->braces)
            {
              /* Move LIMIT that belongs to UNION to fake_select_lex */
              Lex->current_select= sel->master_unit()->fake_select_lex;
              DBUG_ASSERT(Select);
            }
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11796 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11804 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11808 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11815 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11822 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11829 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11839 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal(thd, (yyvsp[(1) - (1)].lex_str), spv->offset, spv->sql_type(),
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
            my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          if (splocal->type() != Item::INT_ITEM)
            my_yyabort_error((ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0)));
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11866 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyvsp[(1) - (1)].item_param)->limit_clause_param= TRUE;
        }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11876 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11891 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11898 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11909 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11910 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11914 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11915 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 11916 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11920 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 11921 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 11922 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11923 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11924 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 11925 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11929 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11930 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11931 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11932 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11933 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11937 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11938 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11939 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 11940 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 11941 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11945 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11946 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11947 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 11948 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 11949 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 11954 "/home/buildbot/git/sql/sql_yacc.yy"
    { my_parse_error(thd, ER_ONLY_INTEGERS_ALLOWED); }
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 11963 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 11964 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 11969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            DBUG_ASSERT(&lex->select_lex == lex->current_select);

            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(thd, &lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 11995 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
          }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 12002 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 12003 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 12013 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name(thd, (yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 12022 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                (!(lex->result= new (thd->mem_root) select_dumpvar(thd))))
              MYSQL_YYABORT;
          }
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 12029 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 12034 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 12038 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->result)
            {
              if ((yyvsp[(1) - (1)].myvar) == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)Lex->result)->var_list.push_back((yyvsp[(1) - (1)].myvar), thd->mem_root);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(Lex->describe);
            }
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 12058 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.myvar) = Lex->result ? new (thd->mem_root) my_var_user((yyvsp[(2) - (2)].lex_str)) : NULL;
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 12062 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_variable *t;

            if (!Lex->spcont || !(t= Lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            (yyval.myvar) = Lex->result ? (new (thd->mem_root)
                                my_var_sp((yyvsp[(1) - (1)].lex_str), t->offset, t->sql_type(),
                                          Lex->sphead)) :
                                NULL;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 12080 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange=
                    new (thd->mem_root) sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result=
                    new (thd->mem_root) select_export(thd, lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 12090 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 12093 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result=
                      new (thd->mem_root) select_dump(thd, lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 12106 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 12117 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 12123 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 12134 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_TABLE, (yyvsp[(2) - (4)].num), (yyvsp[(4) - (4)].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 12141 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 12142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 12143 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 12160 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_DB, (yyvsp[(3) - (4)].object_ddl_options));
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 12166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
               my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str));
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[(3) - (6)].object_ddl_options));
            spname= new (thd->mem_root) sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 12181 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[(3) - (4)].object_ddl_options));
            spname= new (thd->mem_root) sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 12197 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            lex->set_command(SQLCOM_DROP_PROCEDURE, (yyvsp[(3) - (4)].object_ddl_options));
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 12205 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_USER, (yyvsp[(3) - (5)].object_ddl_options));
          }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 12209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_ROLE, (yyvsp[(3) - (5)].object_ddl_options));
          }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 12213 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_VIEW, (yyvsp[(3) - (3)].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 12220 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 12222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->set_command(SQLCOM_DROP_EVENT, (yyvsp[(3) - (4)].object_ddl_options));
          }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 12227 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_TRIGGER, (yyvsp[(3) - (4)].object_ddl_options));
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 12233 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 12238 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 12243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_SERVER, (yyvsp[(3) - (4)].object_ddl_options));
            Lex->server_options.reset((yyvsp[(4) - (4)].lex_str));
          }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 12256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 12267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 12285 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 12296 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 12301 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 12309 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_NONE);
        }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 12313 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_EXISTS);
        }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 12319 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 12320 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 12328 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 12336 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 12341 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 12346 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 12353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 12358 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 12363 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 12371 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 12373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 12380 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 12384 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 12386 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 12396 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 12397 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12402 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 12410 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12411 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12412 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12414 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list= new (thd->mem_root) List_item) ||
                lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12425 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root); }
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 12426 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root); }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12430 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12431 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 12432 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item), thd->mem_root) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12456 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12457 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12461 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12462 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12467 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list= new (thd->mem_root) List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12472 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12480 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12486 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12491 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12498 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12500 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12506 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_ignore_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12515 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12523 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 12531 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 12549 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 12559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12572 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item), thd->mem_root) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12581 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12582 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12589 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12604 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12615 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12616 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12618 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12624 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12629 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12635 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12653 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new (thd->mem_root) Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12681 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12682 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12686 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12687 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12691 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12692 "/home/buildbot/git/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12693 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 12698 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12709 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 12733 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 12737 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12741 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12745 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12749 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12753 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12757 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12761 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12765 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12772 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 12785 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->create_info.init();
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 12794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 12801 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 12808 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 12816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 12824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 12832 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 12840 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 12848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 12855 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 12862 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 12868 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 12870 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 12872 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 12881 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 12885 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 12889 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 12895 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 12900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 12909 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 12916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 12921 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 12926 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 12931 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 12933 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 12935 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 12937 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 12939 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 12941 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              MYSQL_YYABORT;
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 12948 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 12956 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 12958 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 12966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 12973 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 12980 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 12987 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (4)].lex_user);
          }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 12993 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_SHOW_CREATE_DB, (yyvsp[(3) - (4)].object_ddl_options));
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 12998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 13006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 13014 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 13018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 13023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 13030 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 13035 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 13042 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 13049 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 13055 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user;
          }
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 13062 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
             Lex->grant_user= (yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 13067 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 13074 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 13081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 13086 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 13091 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 13096 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 13103 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             bool in_plugin;
             lex->sql_command= SQLCOM_SHOW_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[(1) - (3)].lex_str).str, &in_plugin);
             if (!table || !table->old_format || !in_plugin)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[(2) - (3)].simple_string));
               MYSQL_YYABORT;
             }
             if (lex->wild && table->idx_field1 < 0)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[(3) - (3)].simple_string));
               MYSQL_YYABORT;
             }
             if (make_schema_select(thd, Lex->current_select, table))
               MYSQL_YYABORT;
           }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 13125 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 13127 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 13129 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 13143 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 13144 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 13148 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 13149 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 13158 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 13159 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 13163 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 13164 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 13168 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 13170 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
            (yyval.simple_string)= (yyvsp[(2) - (3)].simple_string);
          }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 13178 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
            (yyval.simple_string)= (yyvsp[(2) - (3)].simple_string);
          }
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 13189 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 13200 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 13204 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 13206 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 13227 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->analyze_stmt= true;
          }
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 13233 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 13234 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 13235 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 13239 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 13241 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
              Lex->explain_json= true;
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
              DBUG_ASSERT(Lex->explain_json==false);
            else
              my_yyabort_error((ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 13252 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 13253 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 13255 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 13269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 13276 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 13281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 13291 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 13296 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 13298 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13311 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num); }
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13313 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(thd, ER_NO_TABLES_USED);
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13320 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13326 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13331 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13333 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13335 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13339 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13341 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS"));
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13349 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13351 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13353 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13355 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name= empty_lex_str;
          }
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13360 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13362 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE"));
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13370 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13372 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13374 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13376 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->type|= REFRESH_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[(1) - (2)].lex_str).str);
             if (!table || !table->reset_table)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[(2) - (2)].simple_string));
               MYSQL_YYABORT;
             }
             Lex->view_list.push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[(1) - (2)].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
           }
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 13391 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 13392 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 13396 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 13397 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13401 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13406 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 13415 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 13417 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13419 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->type|= REFRESH_MASTER;
             Lex->next_binlog_file_number= 0;
          }
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13424 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13428 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13429 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13433 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13435 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->next_binlog_file_number = (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13442 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13448 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 13461 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item), thd->mem_root);
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 13473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 13481 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 2130:

/* Line 1455 of yacc.c  */
#line 13487 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 2131:

/* Line 1455 of yacc.c  */
#line 13488 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 2132:

/* Line 1455 of yacc.c  */
#line 13489 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2133:

/* Line 1455 of yacc.c  */
#line 13492 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13493 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13494 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13504 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item), thd->mem_root);
         }
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13508 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user), thd->mem_root);
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13516 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13523 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13534 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13545 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13565 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13569 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13573 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 13574 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13578 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13579 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13583 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13585 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13592 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 13596 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13597 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13598 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13613 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13618 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13653 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13660 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13662 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13667 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13674 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13675 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13679 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 13680 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 13681 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13686 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root); }
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13688 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root); }
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13692 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 13694 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param(thd, (yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13702 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13703 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13713 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item), thd->mem_root) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item), thd->mem_root))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate(thd, (yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13726 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(thd, tmp.str, tmp.length,
                                                cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 13762 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer(thd, (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13795 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string)= (yyvsp[(1) - (1)].string); }
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13801 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13814 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13823 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13839 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
            const char *query_start= lex->sphead ? lex->sphead->m_tmp_query
                                                 : thd->query();
            item= new (thd->mem_root) Item_param(thd, lip->get_tok_start() -
                                                      query_start);
            if (!((yyval.item_param)= item) || lex->param_list.push_back(item, thd->mem_root))
              my_yyabort_error((ER_OUT_OF_RESOURCES, MYF(0)));
          }
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13855 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13857 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg(thd);
          }
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13864 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13865 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13866 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13868 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item)= new (thd->mem_root) Item_null(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "FALSE",0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "TRUE",1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_hex_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13906 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13912 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(thd, NULL, (yyvsp[(2) - (2)].string)->ptr(), (yyvsp[(2) - (2)].string)->length(),
                                           (yyvsp[(1) - (2)].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13930 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13965 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13977 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13983 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13989 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13998 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.with_clause)= 0; }
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 14000 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.with_clause)= (yyvsp[(1) - (1)].with_clause);
          }
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 14008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             With_clause *with_clause=
             new With_clause((yyvsp[(2) - (2)].num), Lex->curr_with_clause);
             if (with_clause == NULL)
               MYSQL_YYABORT;
             Lex->derived_tables|= DERIVED_WITH;
             Lex->curr_with_clause= with_clause;
             with_clause->add_to_list(Lex->with_clauses_list_last_next);
          }
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 14018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.with_clause)= Lex->curr_with_clause;
            Lex->curr_with_clause= Lex->curr_with_clause->pop();
          }
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 14026 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 14027 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 14040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].lex_str_list)= new List<LEX_STRING> (Lex->with_column_list);
            if ((yyvsp[(2) - (2)].lex_str_list) == NULL)
              MYSQL_YYABORT;
            Lex->with_column_list.empty();
          }
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            With_element *elem= new With_element((yyvsp[(1) - (9)].lex_str_ptr), *(yyvsp[(2) - (9)].lex_str_list), (yyvsp[(7) - (9)].select_lex)->master_unit());
	    if (elem == NULL || Lex->curr_with_clause->add_with_element(elem))
	      MYSQL_YYABORT;
	    if (elem->set_unparsed_spec(thd, (yyvsp[(6) - (9)].simple_string)+1, (yyvsp[(8) - (9)].simple_string)))
              MYSQL_YYABORT;
	  }
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 14059 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_list)= NULL; }
    break;

  case 2229:

/* Line 1455 of yacc.c  */
#line 14061 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_list)= NULL; }
    break;

  case 2230:

/* Line 1455 of yacc.c  */
#line 14067 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
	  }
    break;

  case 2231:

/* Line 1455 of yacc.c  */
#line 14072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 14081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 14095 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 14110 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
                my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal(thd, (yyvsp[(1) - (1)].lex_str), spv->offset, spv->sql_type(),
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 14171 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 14176 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 14192 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 14197 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT"));

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE"));

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool tmp_read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(thd, Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            tmp_read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 14269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 14293 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 14322 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 14324 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str));
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str));
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 14334 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 14340 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 14345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 14351 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 14357 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 14367 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 14373 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 14382 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new (thd->mem_root) Table_ident(thd, db, (yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 14391 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 14393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              uint wlen= Well_formed_prefix(cs, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length).length();
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_with_error(system_charset_info, &(yyval.lex_str),
                                          thd->charset(), (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 14418 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 14432 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 14446 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 14460 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 14462 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 14471 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 14473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 14482 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 14483 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 14484 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 14489 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 14502 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 14532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 14544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           if ((yyvsp[(1) - (1)].lex_user)->user.str != current_user.str && (yyvsp[(1) - (1)].lex_user)->host.str == 0)
             (yyvsp[(1) - (1)].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
         }
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 14553 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 14554 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 14555 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 14556 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 14557 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 14558 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 14559 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 14560 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 14561 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 14562 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 14563 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14564 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14565 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14566 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14567 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14568 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1455 of yacc.c  */
#line 14569 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2290:

/* Line 1455 of yacc.c  */
#line 14570 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14571 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14572 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14573 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14574 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14575 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14576 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14577 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14578 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14579 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14580 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14581 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14582 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14583 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14584 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14585 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14586 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14587 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14588 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 14589 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14590 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14591 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14592 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14593 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14594 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14595 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14596 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14597 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14598 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14599 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14600 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14601 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14602 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14603 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14604 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14605 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14606 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14607 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14608 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14609 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14610 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14611 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14612 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14613 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14614 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14615 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14616 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14617 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14618 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 14619 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 14620 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14621 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14622 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14623 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14633 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14634 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14635 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14636 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14637 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14638 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14639 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14640 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14641 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14642 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14643 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14644 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14645 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14646 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14647 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14648 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14649 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14650 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14651 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14652 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14653 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14654 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14655 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14656 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14657 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14658 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14659 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14660 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14661 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14662 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14663 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14664 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14665 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14666 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14667 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14668 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14669 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14670 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14671 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14672 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14673 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14674 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14675 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14676 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14677 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14678 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14679 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14680 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14681 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14686 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14687 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14688 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14689 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14690 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14691 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14692 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14693 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14694 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14695 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14696 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14697 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14698 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14699 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14700 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14701 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14702 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14703 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14704 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14705 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14706 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14707 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14708 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14709 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14710 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14711 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14712 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14713 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14714 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14715 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14716 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14717 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14718 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14719 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14720 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14721 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14722 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14723 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14724 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14725 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14726 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14727 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14728 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14729 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14730 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14731 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14732 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14733 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14734 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14735 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14736 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14737 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14738 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14739 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14740 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14741 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14742 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14743 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14744 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14745 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14746 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14747 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14748 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14749 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14750 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14751 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14752 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14753 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14754 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14755 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14756 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14757 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14758 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14759 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14760 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14761 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14762 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14763 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14764 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14765 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14767 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14768 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14769 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14770 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14771 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14772 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14773 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14774 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14775 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14776 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14777 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14778 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14779 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14780 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14781 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14782 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14783 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14784 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14785 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14786 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14787 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14788 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14789 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14790 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14791 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14792 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14793 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14794 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14795 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14796 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14797 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14798 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14799 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14800 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14801 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14802 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14803 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14804 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14805 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14806 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14807 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14808 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14809 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14810 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14811 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14812 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14813 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14814 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14815 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14816 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14817 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14819 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14820 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14821 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14822 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14823 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14824 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14825 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14826 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14827 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14828 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14829 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14830 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14831 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14832 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14833 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14834 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14835 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14836 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14837 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14838 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14839 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14840 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14841 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14842 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14843 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14844 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14845 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14846 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14847 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14848 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14849 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14850 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14851 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14852 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14853 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14854 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14855 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14856 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14857 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14858 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14859 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14860 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 14861 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 14862 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 14863 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 14864 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14865 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 14866 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 14867 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 14868 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14869 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14870 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14871 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14872 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14873 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 14874 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 14875 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 14876 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14877 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14878 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14879 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14880 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 14881 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14882 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 14883 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14884 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14885 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14886 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14887 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 14888 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 14889 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 14890 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 14891 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 14892 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 14893 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 14894 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 14895 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 14896 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 14897 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 14898 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 14899 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 14900 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 14901 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 14902 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 14903 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 14904 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 14905 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 14906 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 14907 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 14908 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 14909 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 14910 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 14911 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 14912 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 14913 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 14914 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 14915 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 14916 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 14917 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 14918 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 14919 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 14920 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 14921 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 14922 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 14923 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 14924 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 14925 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 14926 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 14927 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 14928 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 14929 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 14930 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 14931 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 14932 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 14933 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 14934 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 14935 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 14936 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 14937 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 14938 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 14939 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 14940 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 14941 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 14942 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 14943 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 14944 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 14945 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 14946 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 14958 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 14968 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 14970 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->option_type= OPT_SESSION;
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->autocommit= 0;
          }
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 14978 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0), "SET STATEMENT"));
            lex->stmt_var_list= lex->var_list;
            lex->var_list.empty();
          }
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 14986 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 15001 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 15007 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 15011 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 15016 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 15026 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 15032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 15046 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 15050 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 15055 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 15059 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 15068 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 15076 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 15077 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 15078 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 15082 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 15083 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 15084 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 15085 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 15089 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2687:

/* Line 1455 of yacc.c  */
#line 15090 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2688:

/* Line 1455 of yacc.c  */
#line 15091 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 15092 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 15098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 15122 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 15148 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new (thd->mem_root) set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 15159 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 15171 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= (new (thd->mem_root)
                  set_var_collation_client(cs2,
                                           thd->variables.collation_database,
                                            cs2));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 15185 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(thd, ER_SYNTAX_ERROR);

            MYSQL_YYABORT;
          }
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 15200 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new (thd->mem_root) set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2697:

/* Line 1455 of yacc.c  */
#line 15219 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            LEX_USER *user;
            if (!(user=(LEX_USER *) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role(user,
                                                             (yyvsp[(3) - (3)].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 15236 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role((yyvsp[(5) - (5)].lex_user), (yyvsp[(3) - (5)].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 15248 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_role *var= new (thd->mem_root) set_var_role((yyvsp[(2) - (2)].lex_str));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 15256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_password *var= (new (thd->mem_root)
                                    set_var_password(lex->definer));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 15272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 15298 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", ""));
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after "));
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 15335 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 15356 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_read_only"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 15374 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_isolation"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 15391 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 15392 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 15396 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 15397 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 15398 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 15399 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 15404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (spc && spc->find_variable(pw, false))
              my_yyabort_error((ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str));
            if (!(lex->definer= (LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            lex->definer->user= current_user;
            lex->definer->plugin= empty_lex_str;
            lex->definer->auth= empty_lex_str;
          }
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 15417 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer= (yyvsp[(2) - (3)].lex_user); }
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 15421 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer->pwhash= (yyvsp[(1) - (1)].lex_str);}
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 15422 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer->pwtext= (yyvsp[(3) - (4)].lex_str); }
    break;

  case 2720:

/* Line 1455 of yacc.c  */
#line 15424 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->definer->pwtext= (yyvsp[(3) - (4)].lex_str);
            Lex->definer->pwhash.str= Item_func_password::alloc(thd,
                                   (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length, Item_func_password::OLD);
            Lex->definer->pwhash.length=  SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
          }
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 15433 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 15434 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2723:

/* Line 1455 of yacc.c  */
#line 15436 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 15442 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2725:

/* Line 1455 of yacc.c  */
#line 15448 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2726:

/* Line 1455 of yacc.c  */
#line 15459 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "LOCK"));
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2727:

/* Line 1455 of yacc.c  */
#line 15467 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2728:

/* Line 1455 of yacc.c  */
#line 15471 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2729:

/* Line 1455 of yacc.c  */
#line 15472 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2732:

/* Line 1455 of yacc.c  */
#line 15482 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2733:

/* Line 1455 of yacc.c  */
#line 15496 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2734:

/* Line 1455 of yacc.c  */
#line 15497 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2735:

/* Line 1455 of yacc.c  */
#line 15499 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2736:

/* Line 1455 of yacc.c  */
#line 15503 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2737:

/* Line 1455 of yacc.c  */
#line 15504 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2738:

/* Line 1455 of yacc.c  */
#line 15509 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "UNLOCK"));
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2739:

/* Line 1455 of yacc.c  */
#line 15517 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2740:

/* Line 1455 of yacc.c  */
#line 15526 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2741:

/* Line 1455 of yacc.c  */
#line 15535 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2742:

/* Line 1455 of yacc.c  */
#line 15544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int(thd, (int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2743:

/* Line 1455 of yacc.c  */
#line 15561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2744:

/* Line 1455 of yacc.c  */
#line 15574 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2745:

/* Line 1455 of yacc.c  */
#line 15575 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2746:

/* Line 1455 of yacc.c  */
#line 15579 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2747:

/* Line 1455 of yacc.c  */
#line 15580 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2748:

/* Line 1455 of yacc.c  */
#line 15584 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2749:

/* Line 1455 of yacc.c  */
#line 15585 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2750:

/* Line 1455 of yacc.c  */
#line 15586 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2751:

/* Line 1455 of yacc.c  */
#line 15587 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2752:

/* Line 1455 of yacc.c  */
#line 15589 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list= new (thd->mem_root) List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2753:

/* Line 1455 of yacc.c  */
#line 15597 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2754:

/* Line 1455 of yacc.c  */
#line 15601 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2755:

/* Line 1455 of yacc.c  */
#line 15602 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2756:

/* Line 1455 of yacc.c  */
#line 15603 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2757:

/* Line 1455 of yacc.c  */
#line 15604 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2758:

/* Line 1455 of yacc.c  */
#line 15605 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2759:

/* Line 1455 of yacc.c  */
#line 15612 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2760:

/* Line 1455 of yacc.c  */
#line 15617 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2761:

/* Line 1455 of yacc.c  */
#line 15623 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2762:

/* Line 1455 of yacc.c  */
#line 15634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2763:

/* Line 1455 of yacc.c  */
#line 15645 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2764:

/* Line 1455 of yacc.c  */
#line 15649 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2765:

/* Line 1455 of yacc.c  */
#line 15656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[(1) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2766:

/* Line 1455 of yacc.c  */
#line 15665 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[(4) - (4)].lex_user); }
    break;

  case 2767:

/* Line 1455 of yacc.c  */
#line 15667 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2768:

/* Line 1455 of yacc.c  */
#line 15672 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2769:

/* Line 1455 of yacc.c  */
#line 15678 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2770:

/* Line 1455 of yacc.c  */
#line 15685 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2771:

/* Line 1455 of yacc.c  */
#line 15697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2772:

/* Line 1455 of yacc.c  */
#line 15708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2773:

/* Line 1455 of yacc.c  */
#line 15715 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[(1) - (4)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2774:

/* Line 1455 of yacc.c  */
#line 15726 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer = 0; }
    break;

  case 2775:

/* Line 1455 of yacc.c  */
#line 15727 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer = (yyvsp[(3) - (3)].lex_user); }
    break;

  case 2776:

/* Line 1455 of yacc.c  */
#line 15730 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; }
    break;

  case 2777:

/* Line 1455 of yacc.c  */
#line 15731 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; }
    break;

  case 2778:

/* Line 1455 of yacc.c  */
#line 15735 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2779:

/* Line 1455 of yacc.c  */
#line 15740 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2780:

/* Line 1455 of yacc.c  */
#line 15748 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->reset_auth();
          }
    break;

  case 2781:

/* Line 1455 of yacc.c  */
#line 15758 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[(1) - (1)].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            (yyvsp[(1) - (1)].lex_str).str[(yyvsp[(1) - (1)].lex_str).length] = '\0';
            if ((yyvsp[(1) - (1)].lex_str).length == 0)
              my_yyabort_error((ER_INVALID_ROLE, MYF(0), ""));
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         cs, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2785:

/* Line 1455 of yacc.c  */
#line 15785 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2786:

/* Line 1455 of yacc.c  */
#line 15787 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2791:

/* Line 1455 of yacc.c  */
#line 15805 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2792:

/* Line 1455 of yacc.c  */
#line 15806 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2793:

/* Line 1455 of yacc.c  */
#line 15808 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2794:

/* Line 1455 of yacc.c  */
#line 15809 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2795:

/* Line 1455 of yacc.c  */
#line 15811 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2796:

/* Line 1455 of yacc.c  */
#line 15812 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2797:

/* Line 1455 of yacc.c  */
#line 15814 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2798:

/* Line 1455 of yacc.c  */
#line 15815 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2799:

/* Line 1455 of yacc.c  */
#line 15816 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2800:

/* Line 1455 of yacc.c  */
#line 15817 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2801:

/* Line 1455 of yacc.c  */
#line 15818 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2802:

/* Line 1455 of yacc.c  */
#line 15819 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2803:

/* Line 1455 of yacc.c  */
#line 15820 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2804:

/* Line 1455 of yacc.c  */
#line 15821 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2805:

/* Line 1455 of yacc.c  */
#line 15822 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2806:

/* Line 1455 of yacc.c  */
#line 15823 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2807:

/* Line 1455 of yacc.c  */
#line 15824 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2808:

/* Line 1455 of yacc.c  */
#line 15825 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2809:

/* Line 1455 of yacc.c  */
#line 15826 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2810:

/* Line 1455 of yacc.c  */
#line 15827 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2811:

/* Line 1455 of yacc.c  */
#line 15828 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2812:

/* Line 1455 of yacc.c  */
#line 15829 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2813:

/* Line 1455 of yacc.c  */
#line 15830 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2814:

/* Line 1455 of yacc.c  */
#line 15831 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2815:

/* Line 1455 of yacc.c  */
#line 15832 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2816:

/* Line 1455 of yacc.c  */
#line 15833 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2817:

/* Line 1455 of yacc.c  */
#line 15834 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2818:

/* Line 1455 of yacc.c  */
#line 15835 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2819:

/* Line 1455 of yacc.c  */
#line 15836 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2820:

/* Line 1455 of yacc.c  */
#line 15837 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2821:

/* Line 1455 of yacc.c  */
#line 15838 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2822:

/* Line 1455 of yacc.c  */
#line 15839 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2823:

/* Line 1455 of yacc.c  */
#line 15840 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2824:

/* Line 1455 of yacc.c  */
#line 15841 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2825:

/* Line 1455 of yacc.c  */
#line 15845 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2826:

/* Line 1455 of yacc.c  */
#line 15846 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2829:

/* Line 1455 of yacc.c  */
#line 15856 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SUBJECT"));
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2830:

/* Line 1455 of yacc.c  */
#line 15863 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "ISSUER"));
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2831:

/* Line 1455 of yacc.c  */
#line 15870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "CIPHER"));
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2832:

/* Line 1455 of yacc.c  */
#line 15880 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2833:

/* Line 1455 of yacc.c  */
#line 15891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2834:

/* Line 1455 of yacc.c  */
#line 15900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2835:

/* Line 1455 of yacc.c  */
#line 15909 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2836:

/* Line 1455 of yacc.c  */
#line 15921 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2837:

/* Line 1455 of yacc.c  */
#line 15926 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2838:

/* Line 1455 of yacc.c  */
#line 15934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2839:

/* Line 1455 of yacc.c  */
#line 15939 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2840:

/* Line 1455 of yacc.c  */
#line 15947 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2841:

/* Line 1455 of yacc.c  */
#line 15952 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2846:

/* Line 1455 of yacc.c  */
#line 15963 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->pwtext= (yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
          }
    break;

  case 2847:

/* Line 1455 of yacc.c  */
#line 15970 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->pwhash= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2848:

/* Line 1455 of yacc.c  */
#line 15975 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2849:

/* Line 1455 of yacc.c  */
#line 15981 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2850:

/* Line 1455 of yacc.c  */
#line 15987 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2851:

/* Line 1455 of yacc.c  */
#line 15992 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2855:

/* Line 1455 of yacc.c  */
#line 16006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *new_str= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= (new (thd->mem_root)
                                LEX_COLUMN(*new_str,lex->which_columns));
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col, thd->mem_root);
            }
          }
    break;

  case 2857:

/* Line 1455 of yacc.c  */
#line 16036 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2858:

/* Line 1455 of yacc.c  */
#line 16040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2859:

/* Line 1455 of yacc.c  */
#line 16044 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2860:

/* Line 1455 of yacc.c  */
#line 16048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2861:

/* Line 1455 of yacc.c  */
#line 16055 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2862:

/* Line 1455 of yacc.c  */
#line 16061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2863:

/* Line 1455 of yacc.c  */
#line 16067 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2864:

/* Line 1455 of yacc.c  */
#line 16073 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2865:

/* Line 1455 of yacc.c  */
#line 16079 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.max_statement_time= (yyvsp[(2) - (2)].item_num)->val_real();
            lex->mqh.specified_limits|= USER_RESOURCES::MAX_STATEMENT_TIME;
          }
    break;

  case 2866:

/* Line 1455 of yacc.c  */
#line 16087 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2867:

/* Line 1455 of yacc.c  */
#line 16088 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2868:

/* Line 1455 of yacc.c  */
#line 16092 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2870:

/* Line 1455 of yacc.c  */
#line 16098 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2871:

/* Line 1455 of yacc.c  */
#line 16099 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2872:

/* Line 1455 of yacc.c  */
#line 16103 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2873:

/* Line 1455 of yacc.c  */
#line 16104 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2874:

/* Line 1455 of yacc.c  */
#line 16108 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2875:

/* Line 1455 of yacc.c  */
#line 16109 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2876:

/* Line 1455 of yacc.c  */
#line 16113 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2877:

/* Line 1455 of yacc.c  */
#line 16114 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2878:

/* Line 1455 of yacc.c  */
#line 16119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2879:

/* Line 1455 of yacc.c  */
#line 16124 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2880:

/* Line 1455 of yacc.c  */
#line 16129 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_COMPOUND;
            Lex->sphead->set_stmt_end(thd);
            Lex->sphead->restore_thd_mem_root(thd);
          }
    break;

  case 2881:

/* Line 1455 of yacc.c  */
#line 16137 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2882:

/* Line 1455 of yacc.c  */
#line 16138 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2883:

/* Line 1455 of yacc.c  */
#line 16142 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2884:

/* Line 1455 of yacc.c  */
#line 16143 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2885:

/* Line 1455 of yacc.c  */
#line 16148 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2886:

/* Line 1455 of yacc.c  */
#line 16149 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2887:

/* Line 1455 of yacc.c  */
#line 16150 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2888:

/* Line 1455 of yacc.c  */
#line 16155 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2889:

/* Line 1455 of yacc.c  */
#line 16156 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2890:

/* Line 1455 of yacc.c  */
#line 16157 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2891:

/* Line 1455 of yacc.c  */
#line 16161 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2892:

/* Line 1455 of yacc.c  */
#line 16162 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2893:

/* Line 1455 of yacc.c  */
#line 16167 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2894:

/* Line 1455 of yacc.c  */
#line 16179 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2895:

/* Line 1455 of yacc.c  */
#line 16189 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2896:

/* Line 1455 of yacc.c  */
#line 16198 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2897:

/* Line 1455 of yacc.c  */
#line 16207 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2898:

/* Line 1455 of yacc.c  */
#line 16220 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2900:

/* Line 1455 of yacc.c  */
#line 16226 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2901:

/* Line 1455 of yacc.c  */
#line 16231 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2902:

/* Line 1455 of yacc.c  */
#line 16242 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2903:

/* Line 1455 of yacc.c  */
#line 16247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->pop_context();
          }
    break;

  case 2904:

/* Line 1455 of yacc.c  */
#line 16253 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2905:

/* Line 1455 of yacc.c  */
#line 16267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2908:

/* Line 1455 of yacc.c  */
#line 16283 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2909:

/* Line 1455 of yacc.c  */
#line 16290 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2910:

/* Line 1455 of yacc.c  */
#line 16291 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2911:

/* Line 1455 of yacc.c  */
#line 16292 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2912:

/* Line 1455 of yacc.c  */
#line 16306 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2913:

/* Line 1455 of yacc.c  */
#line 16312 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (3)].select_lex); }
    break;

  case 2914:

/* Line 1455 of yacc.c  */
#line 16313 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(2) - (4)].select_lex); }
    break;

  case 2915:

/* Line 1455 of yacc.c  */
#line 16317 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (2)].select_lex); }
    break;

  case 2916:

/* Line 1455 of yacc.c  */
#line 16318 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex); }
    break;

  case 2917:

/* Line 1455 of yacc.c  */
#line 16322 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (1)].select_lex); }
    break;

  case 2918:

/* Line 1455 of yacc.c  */
#line 16323 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (1)].select_lex); }
    break;

  case 2919:

/* Line 1455 of yacc.c  */
#line 16324 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (2)].select_lex); }
    break;

  case 2920:

/* Line 1455 of yacc.c  */
#line 16330 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyvsp[(3) - (4)].select_lex)->set_with_clause((yyvsp[(2) - (4)].with_clause));
            (yyval.select_lex)= (yyvsp[(3) - (4)].select_lex);
          }
    break;

  case 2921:

/* Line 1455 of yacc.c  */
#line 16337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2922:

/* Line 1455 of yacc.c  */
#line 16358 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2927:

/* Line 1455 of yacc.c  */
#line 16393 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2928:

/* Line 1455 of yacc.c  */
#line 16395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2929:

/* Line 1455 of yacc.c  */
#line 16402 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2930:

/* Line 1455 of yacc.c  */
#line 16403 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2931:

/* Line 1455 of yacc.c  */
#line 16404 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2932:

/* Line 1455 of yacc.c  */
#line 16406 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2933:

/* Line 1455 of yacc.c  */
#line 16412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2934:

/* Line 1455 of yacc.c  */
#line 16417 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2935:

/* Line 1455 of yacc.c  */
#line 16428 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2936:

/* Line 1455 of yacc.c  */
#line 16430 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2937:

/* Line 1455 of yacc.c  */
#line 16432 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2951:

/* Line 1455 of yacc.c  */
#line 16465 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 2952:

/* Line 1455 of yacc.c  */
#line 16479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->definer= (yyvsp[(3) - (3)].lex_user);
            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
            Lex->ssl_cipher= Lex->x509_subject= Lex->x509_issuer= 0;
            bzero(&(Lex->mqh), sizeof(Lex->mqh));
          }
    break;

  case 2953:

/* Line 1455 of yacc.c  */
#line 16495 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2954:

/* Line 1455 of yacc.c  */
#line 16497 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2955:

/* Line 1455 of yacc.c  */
#line 16499 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2956:

/* Line 1455 of yacc.c  */
#line 16504 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2957:

/* Line 1455 of yacc.c  */
#line 16506 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2958:

/* Line 1455 of yacc.c  */
#line 16508 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2959:

/* Line 1455 of yacc.c  */
#line 16513 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2961:

/* Line 1455 of yacc.c  */
#line 16531 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2963:

/* Line 1455 of yacc.c  */
#line 16537 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
    break;

  case 2964:

/* Line 1455 of yacc.c  */
#line 16543 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
    break;

  case 2965:

/* Line 1455 of yacc.c  */
#line 16551 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2966:

/* Line 1455 of yacc.c  */
#line 16557 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            uint not_used;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select,
                            &not_used);
            lex->parsing_options.allows_variable= TRUE;
            lex->current_select->set_with_clause((yyvsp[(2) - (4)].with_clause));
          }
    break;

  case 2971:

/* Line 1455 of yacc.c  */
#line 16584 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2972:

/* Line 1455 of yacc.c  */
#line 16586 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2973:

/* Line 1455 of yacc.c  */
#line 16588 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2974:

/* Line 1455 of yacc.c  */
#line 16590 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2975:

/* Line 1455 of yacc.c  */
#line 16601 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.trigger_action_order_type)= TRG_ORDER_FOLLOWS; }
    break;

  case 2976:

/* Line 1455 of yacc.c  */
#line 16603 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.trigger_action_order_type)= TRG_ORDER_PRECEDES; }
    break;

  case 2977:

/* Line 1455 of yacc.c  */
#line 16608 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              (yyval.trg_execution_order).ordering_clause= TRG_ORDER_NONE;
              (yyval.trg_execution_order).anchor_trigger_name.str= NULL;
              (yyval.trg_execution_order).anchor_trigger_name.length= 0;
            }
    break;

  case 2978:

/* Line 1455 of yacc.c  */
#line 16615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              (yyval.trg_execution_order).ordering_clause= (yyvsp[(1) - (2)].trigger_action_order_type);
              (yyval.trg_execution_order).anchor_trigger_name= (yyvsp[(2) - (2)].lex_str);
            }
    break;

  case 2979:

/* Line 1455 of yacc.c  */
#line 16625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(3) - (3)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 2980:

/* Line 1455 of yacc.c  */
#line 16634 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $10 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2981:

/* Line 1455 of yacc.c  */
#line 16640 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $14 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2982:

/* Line 1455 of yacc.c  */
#line 16645 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->trg_chistics.ordering_clause_begin= YYLIP->get_cpp_ptr();
          }
    break;

  case 2983:

/* Line 1455 of yacc.c  */
#line 16649 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $19 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER"));

            lex->stmt_definition_begin= (yyvsp[(2) - (18)].simple_string);
            lex->ident.str= (yyvsp[(9) - (18)].simple_string);
            lex->ident.length= (yyvsp[(13) - (18)].simple_string) - (yyvsp[(9) - (18)].simple_string);
            lex->spname= (yyvsp[(5) - (18)].spname);
            (*static_cast<st_trg_execution_order*>(&lex->trg_chistics))= ((yyvsp[(18) - (18)].trg_execution_order));
            lex->trg_chistics.ordering_clause_end= lip->get_cpp_ptr();

            if (!make_sp_head(thd, (yyvsp[(5) - (18)].spname), TYPE_ENUM_TRIGGER))
              MYSQL_YYABORT;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2984:

/* Line 1455 of yacc.c  */
#line 16669 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $21 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(11) - (20)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2985:

/* Line 1455 of yacc.c  */
#line 16701 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->lex->udf.type= UDFTYPE_AGGREGATE; }
    break;

  case 2986:

/* Line 1455 of yacc.c  */
#line 16702 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->lex->udf.type= UDFTYPE_FUNCTION;  }
    break;

  case 2987:

/* Line 1455 of yacc.c  */
#line 16708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[(2) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
              my_yyabort_error((ER_NATIVE_FCT_NAME_COLLISION, MYF(0), (yyvsp[(3) - (7)].lex_str).str));
            lex->sql_command= SQLCOM_CREATE_FUNCTION;
            lex->udf.name= (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns= (Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl= (yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2988:

/* Line 1455 of yacc.c  */
#line 16726 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $5 */
            LEX *lex= Lex;
            Lex_input_stream *lip= YYLIP;
            const char* tmp_param_begin;

            if (lex->add_create_options_with_check((yyvsp[(2) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION"));

            if (!make_sp_head(thd, (yyvsp[(3) - (4)].spname), TYPE_ENUM_FUNCTION))
              MYSQL_YYABORT;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2989:

/* Line 1455 of yacc.c  */
#line 16747 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2990:

/* Line 1455 of yacc.c  */
#line 16751 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->init_last_field(&lex->sphead->m_return_field_def, NULL,
                                 thd->variables.collation_database);
          }
    break;

  case 2991:

/* Line 1455 of yacc.c  */
#line 16757 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $12 */
            if (Lex->sphead->fill_field_definition(thd, Lex, Lex->last_field))
              MYSQL_YYABORT;
          }
    break;

  case 2992:

/* Line 1455 of yacc.c  */
#line 16762 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2993:

/* Line 1455 of yacc.c  */
#line 16769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
              my_yyabort_error((ER_SP_NORETURN, MYF(0), sp->m_qname.str));
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to
                occur before the call), the warning will provide a hint
                explaining the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER_THD(thd, ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2994:

/* Line 1455 of yacc.c  */
#line 16821 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(2) - (3)].object_ddl_options)))
              MYSQL_YYABORT;

            if (Lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE"));

            if (!make_sp_head(thd, (yyvsp[(3) - (3)].spname), TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2995:

/* Line 1455 of yacc.c  */
#line 16833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2996:

/* Line 1455 of yacc.c  */
#line 16842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2997:

/* Line 1455 of yacc.c  */
#line 16846 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2998:

/* Line 1455 of yacc.c  */
#line 16850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2999:

/* Line 1455 of yacc.c  */
#line 16864 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 3000:

/* Line 1455 of yacc.c  */
#line 16868 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 3001:

/* Line 1455 of yacc.c  */
#line 16872 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 3002:

/* Line 1455 of yacc.c  */
#line 16876 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 3003:

/* Line 1455 of yacc.c  */
#line 16880 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 3004:

/* Line 1455 of yacc.c  */
#line 16884 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 3005:

/* Line 1455 of yacc.c  */
#line 16891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 3006:

/* Line 1455 of yacc.c  */
#line 16898 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 3007:

/* Line 1455 of yacc.c  */
#line 16905 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 3008:

/* Line 1455 of yacc.c  */
#line 16914 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3009:

/* Line 1455 of yacc.c  */
#line 16915 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3010:

/* Line 1455 of yacc.c  */
#line 16919 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 3011:

/* Line 1455 of yacc.c  */
#line 16920 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 3012:

/* Line 1455 of yacc.c  */
#line 16921 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 3013:

/* Line 1455 of yacc.c  */
#line 16925 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 3014:

/* Line 1455 of yacc.c  */
#line 16926 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 3015:

/* Line 1455 of yacc.c  */
#line 16931 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 3016:

/* Line 1455 of yacc.c  */
#line 16933 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 3018:

/* Line 1455 of yacc.c  */
#line 16938 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3019:

/* Line 1455 of yacc.c  */
#line 16939 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 3020:

/* Line 1455 of yacc.c  */
#line 16944 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 3021:

/* Line 1455 of yacc.c  */
#line 16951 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 3022:

/* Line 1455 of yacc.c  */
#line 16961 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 3023:

/* Line 1455 of yacc.c  */
#line 16967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 3024:

/* Line 1455 of yacc.c  */
#line 16978 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 47275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



